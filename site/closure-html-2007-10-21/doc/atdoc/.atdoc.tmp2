<?xml version="1.0"?>
<pages xmlns:macro="http://lichteblau.com/macro" css="index.css" heading="Closure HTML">
  <main-page title="Closure HTML API reference">
    <padded>
	Index of packages:
      </padded>
    <columns>
      <column width="60%">
        <padded>
          <h2 class="page-title">
            <a href="pages/closure-html.html">
		  Package
		  closure-html</a>
          </h2>
          <div style="left: 100px">
            <div class="indent">This package exports functions for HTML parsing and serialization.<br/><br/>
    In addition, two simple in-memory data structures are included: LHTML, a
    lisp-list model.  And PT, a simple structure instance model used by
    Closure internally.<br/><br/>                    </div>
            <div class="indent">
              <p>
                <i>About this package:</i>
              </p>
              <ul>
                <li>
                  <a href="pages/closure-html.html#id58062">Parsing</a>
                </li>
                <li>
                  <a href="pages/closure-html.html#id58072">Serialization sinks</a>
                </li>
                <li>
                  <a href="pages/closure-html.html#id58103">Convenience serialization API</a>
                </li>
                <li>
                  <a href="pages/closure-html.html#id58134">LHTML model</a>
                </li>
                <li>
                  <a href="pages/closure-html.html#id58149">PT model</a>
                </li>
              </ul>
            </div>
          </div>
          <h2 class="page-title">
            <a href="pages/hax.html">
		  Package
		  hax</a>
          </h2>
          <div style="left: 100px">
            <div class="indent">An event protocol for HTML serialization, this package is similar
       to the SAX protocol defined by cxml for XML serialization.<br/><br/>
       (Technically, this package should have been spelled SAH, but HAX
       sounds better.)<br/><br/>
       Note that Closure HTML is not a streaming parser yet.  Documents
       are always parsed in full before the first HAX event is emitted.
       In spite of this restriction, the HAX API is useful for HTML
       serialization and transformation purposes, and for integration
       with SAX.<br/><br/>                     </div>
            <div class="indent">
              <p>
                <i>About this package:</i>
              </p>
              <ul>
                <li>
                  <a href="pages/hax.html#id60376">HAX handlers</a>
                </li>
                <li>
                  <a href="pages/hax.html#id60389">The attribute protocol</a>
                </li>
                <li>
                  <a href="pages/hax.html#id60421">HAX events</a>
                </li>
              </ul>
            </div>
          </div>
        </padded>
      </column>
      <column>
        <h3><a name="index"/>Symbol Index</h3>
        <simple-table>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__variable___html-dtd_.html"><tt>*html-dtd*</tt></a>, variable</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__class__abstract-handler.html"><tt>abstract-handler</tt></a>, class</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__attribute.html"><tt>attribute</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__attribute-name.html"><tt>attribute-name</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__attribute-specified-p.html"><tt>attribute-specified-p</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__attribute-value.html"><tt>attribute-value</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__characters.html"><tt>characters</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__comment.html"><tt>comment</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__comment.html"><tt>comment</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__class__default-handler.html"><tt>default-handler</tt></a>, class</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__end-document.html"><tt>end-document</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__end-element.html"><tt>end-element</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__find-attribute.html"><tt>find-attribute</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__class__lhtml-builder.html"><tt>lhtml-builder</tt></a>, class</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__make-attribute.html"><tt>make-attribute</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__make-character-stream-sink.html"><tt>make-character-stream-sink</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__make-lhtml-builder.html"><tt>make-lhtml-builder</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__make-octet-stream-sink.html"><tt>make-octet-stream-sink</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__make-octet-vector-sink.html"><tt>make-octet-vector-sink</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__make-pt-builder.html"><tt>make-pt-builder</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__make-rod-sink.html"><tt>make-rod-sink</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__make-string-sink.html"><tt>make-string-sink</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__parse.html"><tt>parse</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/sgml__class__pt.html"><tt>pt</tt></a>, class</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/sgml__fun__pt-attrs.html"><tt>pt-attrs</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__class__pt-builder.html"><tt>pt-builder</tt></a>, class</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/sgml__fun__pt-children.html"><tt>pt-children</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/sgml__fun__pt-name.html"><tt>pt-name</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/sgml__fun__pt-parent.html"><tt>pt-parent</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__serialize-lhtml.html"><tt>serialize-lhtml</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__serialize-pt.html"><tt>serialize-pt</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__class__standard-attribute.html"><tt>standard-attribute</tt></a>, class</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__start-document.html"><tt>start-document</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">hax:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/hax__fun__start-element.html"><tt>start-element</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__fun__text.html"><tt>text</tt></a>, function</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__macro__with-element.html"><tt>with-element</tt></a>, macro</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__macro__with-html-output.html"><tt>with-html-output</tt></a>, macro</cell>
          </row>
          <row>
            <cell align="right" nowrap="nowrap">
              <span class="nonlink">
                <tt>
                  <span style="color: #777777">closure-html:</span>
                </tt>
              </span>
            </cell>
            <cell><a href="pages/closure-html__macro__with-output-sink.html"><tt>with-output-sink</tt></a>, macro</cell>
          </row>
        </simple-table>
      </column>
    </columns>
  </main-page>
  <page base="../" pathname="pages/closure-html.html" title="Package closure-html">
    <padded>
      <p class="noindent">
	    Up:
	    <a href="../index.html">Closure HTML API reference</a></p>
      <h1>
	  Package
	  closure-html</h1>
      <div class="indent">This package exports functions for HTML parsing and serialization.<br/><br/>
    In addition, two simple in-memory data structures are included: LHTML, a
    lisp-list model.  And PT, a simple structure instance model used by
    Closure internally.<br/><br/>                    </div>
    </padded>
    <columns>
      <column width="60%">
        <padded><div style="margin-left: -30px"><h3>About This Package</h3></div><a href="#id58062" style="font-weight: bold">Parsing</a><br/><a href="#id58072" style="font-weight: bold">Serialization sinks</a><br/><a href="#id58103" style="font-weight: bold">Convenience serialization API</a><br/><a href="#id58134" style="font-weight: bold">LHTML model</a><br/><a href="#id58149" style="font-weight: bold">PT model</a><br/><br/><h2><a name="id58062"/>Parsing</h2>    <div class="def"><a href="closure-html__fun__parse.html">Function parse (input handler)</a></div><div style="margin-left: 3em">Parse the HTML document given as an argument, or referred to       using a pathname. <a href="closure-html__fun__parse.html#details">...</a></div><br/>    <h2><a name="id58072"/>Serialization sinks</h2>    <div class="def"><a href="closure-html__fun__make-octet-vector-sink.html">Function make-octet-vector-sink (&amp;rest initargs)</a></div><div style="margin-left: 3em">Returns a sink creating octet vectors. <a href="closure-html__fun__make-octet-vector-sink.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__fun__make-octet-stream-sink.html">Function make-octet-stream-sink (stream &amp;rest initargs)</a></div><div style="margin-left: 3em">Returns a sink writing to an octet stream. <a href="closure-html__fun__make-octet-stream-sink.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__fun__make-rod-sink.html">Function make-rod-sink (&amp;rest initargs)</a></div><div style="margin-left: 3em">Returns a sink creating rods. <a href="closure-html__fun__make-rod-sink.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__fun__make-character-stream-sink.html">Function make-character-stream-sink (stream &amp;rest initargs)</a></div><div style="margin-left: 3em">Returns a sink writing to a character stream. <a href="closure-html__fun__make-character-stream-sink.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__fun__make-string-sink.html">Function make-string-sink (&amp;rest args)</a></div><div style="margin-left: 3em">Returns a sink creating strings. <a href="closure-html__fun__make-string-sink.html#details">...</a></div><br/>    <h2><a name="id58103"/>Convenience serialization API</h2>    <div class="def"><a href="closure-html__macro__with-html-output.html">Macro with-html-output ((sink &amp;key (name HTML) public-id system-id) &amp;body body)</a></div><div style="margin-left: 3em">Generate <a href="hax__fun__start-document.html"><tt>hax:start-document</tt></a> and <a href="hax__fun__end-document.html"><tt>hax:end-document</tt></a>         events. <a href="closure-html__macro__with-html-output.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__macro__with-element.html">Macro with-element (name &amp;body body)</a></div><div style="margin-left: 3em">Generate <a href="hax__fun__start-element.html"><tt>hax:start-element</tt></a> and <a href="hax__fun__end-element.html"><tt>hax:end-element</tt></a>         events. <a href="closure-html__macro__with-element.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__macro__with-output-sink.html">Macro with-output-sink ((var) &amp;body body)</a></div><div style="margin-left: 3em">Bind a variable to the current serialization sink. <a href="closure-html__macro__with-output-sink.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__fun__attribute.html">Function attribute (name value)</a></div><div style="margin-left: 3em">Add an attribute to the current element. <a href="closure-html__fun__attribute.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__fun__text.html">Function text (data)</a></div><div style="margin-left: 3em">Write a text node. <a href="closure-html__fun__text.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__fun__comment.html">Function comment (data)</a></div><div style="margin-left: 3em">Write a comment node. <a href="closure-html__fun__comment.html#details">...</a></div><br/>    <h2><a name="id58134"/>LHTML model</h2>    <div class="def"><a href="closure-html__fun__make-lhtml-builder.html">Function make-lhtml-builder ()</a></div><div style="margin-left: 3em">Create a HAX handler which builds LHTML list structures. <a href="closure-html__fun__make-lhtml-builder.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__fun__serialize-lhtml.html">Function serialize-lhtml (document handler &amp;key (name HTML) public-id system-id)</a></div><div style="margin-left: 3em">Serialize the LHTML document into HAX events, sent to the          specified HAX handler. <a href="closure-html__fun__serialize-lhtml.html#details">...</a></div><br/>    <h2><a name="id58149"/>PT model</h2>    <div class="def"><a href="closure-html__fun__make-pt-builder.html">Function make-pt-builder ()</a></div><div style="margin-left: 3em">Create a HAX handler which builds <a href="sgml__class__pt.html"><tt>pt</tt></a> structures. <a href="closure-html__fun__make-pt-builder.html#details">...</a></div><br/>    <div class="def"><a href="closure-html__fun__serialize-pt.html">Function serialize-pt (document handler &amp;key (name HTML) public-id system-id)</a></div><div style="margin-left: 3em">Serialize the PT node into HAX events, sent to the          specified HAX handler. <a href="closure-html__fun__serialize-pt.html#details">...</a></div><br/>    <div class="def"><a href="sgml__fun__pt-name.html">Function pt-name (instance)</a></div><div style="margin-left: 3em">Returns the element's name. <a href="sgml__fun__pt-name.html#details">...</a></div><br/>    <div class="def"><a href="sgml__fun__pt-children.html">Function pt-children (instance)</a></div><div style="margin-left: 3em">Returns the element's children. <a href="sgml__fun__pt-children.html#details">...</a></div><br/>    <div class="def"><a href="sgml__fun__pt-parent.html">Function pt-parent (instance)</a></div><div style="margin-left: 3em">Returns the element's parent node. <a href="sgml__fun__pt-parent.html#details">...</a></div><br/>    <div class="def"><a href="sgml__fun__pt-attrs.html">Function pt-attrs (instance)</a></div><div style="margin-left: 3em">Returns the element's attributes as a plist. <a href="sgml__fun__pt-attrs.html#details">...</a></div><br/>    </padded>
      </column>
      <column>
        <h3><a name="index"/>Symbol Index</h3>
        <simple-table>
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    <row><cell><a href="closure-html__variable___html-dtd_.html"><tt>*html-dtd*</tt></a>, variable</cell></row><row><cell><a href="closure-html__fun__attribute.html"><tt>attribute</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__comment.html"><tt>comment</tt></a>, function</cell></row><row><cell><a href="closure-html__class__lhtml-builder.html"><tt>lhtml-builder</tt></a>, class</cell></row><row><cell><a href="closure-html__fun__make-character-stream-sink.html"><tt>make-character-stream-sink</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__make-lhtml-builder.html"><tt>make-lhtml-builder</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__make-octet-stream-sink.html"><tt>make-octet-stream-sink</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__make-octet-vector-sink.html"><tt>make-octet-vector-sink</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__make-pt-builder.html"><tt>make-pt-builder</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__make-rod-sink.html"><tt>make-rod-sink</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__make-string-sink.html"><tt>make-string-sink</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__parse.html"><tt>parse</tt></a>, function</cell></row><row><cell><a href="sgml__class__pt.html"><tt>pt</tt></a>, class</cell></row><row><cell><a href="sgml__fun__pt-attrs.html"><tt>pt-attrs</tt></a>, function</cell></row><row><cell><a href="closure-html__class__pt-builder.html"><tt>pt-builder</tt></a>, class</cell></row><row><cell><a href="sgml__fun__pt-children.html"><tt>pt-children</tt></a>, function</cell></row><row><cell><a href="sgml__fun__pt-name.html"><tt>pt-name</tt></a>, function</cell></row><row><cell><a href="sgml__fun__pt-parent.html"><tt>pt-parent</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__serialize-lhtml.html"><tt>serialize-lhtml</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__serialize-pt.html"><tt>serialize-pt</tt></a>, function</cell></row><row><cell><a href="closure-html__fun__text.html"><tt>text</tt></a>, function</cell></row><row><cell><a href="closure-html__macro__with-element.html"><tt>with-element</tt></a>, macro</cell></row><row><cell><a href="closure-html__macro__with-html-output.html"><tt>with-html-output</tt></a>, macro</cell></row><row><cell><a href="closure-html__macro__with-output-sink.html"><tt>with-output-sink</tt></a>, macro</cell></row></simple-table>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax.html" title="Package hax">
    <padded>
      <p class="noindent">
	    Up:
	    <a href="../index.html">Closure HTML API reference</a></p>
      <h1>
	  Package
	  hax</h1>
      <div class="indent">An event protocol for HTML serialization, this package is similar
       to the SAX protocol defined by cxml for XML serialization.<br/><br/>
       (Technically, this package should have been spelled SAH, but HAX
       sounds better.)<br/><br/>
       Note that Closure HTML is not a streaming parser yet.  Documents
       are always parsed in full before the first HAX event is emitted.
       In spite of this restriction, the HAX API is useful for HTML
       serialization and transformation purposes, and for integration
       with SAX.<br/><br/>                     </div>
    </padded>
    <columns>
      <column width="60%">
        <padded><div style="margin-left: -30px"><h3>About This Package</h3></div><a href="#id60376" style="font-weight: bold">HAX handlers</a><br/><a href="#id60389" style="font-weight: bold">The attribute protocol</a><br/><a href="#id60421" style="font-weight: bold">HAX events</a><br/><br/><h2><a name="id60376"/>HAX handlers</h2>       <div class="def"><a href="hax__class__abstract-handler.html">
	  Class
	  abstract-handler</a></div><div style="margin-left: 3em">The superclass of all HAX handlers. <a href="hax__class__abstract-handler.html#details">...</a></div><br/>       <div class="def"><a href="hax__class__default-handler.html">
	  Class
	  default-handler</a></div><div style="margin-left: 3em">A no-op HAX handler. <a href="hax__class__default-handler.html#details">...</a></div><br/>       <h2><a name="id60389"/>The attribute protocol</h2>       <div class="def"><a href="hax__class__standard-attribute.html">
	  Class
	  standard-attribute</a></div><div style="margin-left: 3em">An implementation of the HAX attribute protocol. <a href="hax__class__standard-attribute.html#details">...</a></div><br/>       <div class="def"><a href="hax__fun__make-attribute.html">Function make-attribute (name value &amp;optional (specified-p t))</a></div><div style="margin-left: 3em">Creates a HAX attribute. <a href="hax__fun__make-attribute.html#details">...</a></div><br/>       <div class="def"><a href="hax__fun__attribute-name.html">Function attribute-name (attribute)</a></div><div style="margin-left: 3em">Return an attribute's name. <a href="hax__fun__attribute-name.html#details">...</a></div><br/>       <div class="def"><a href="hax__fun__attribute-value.html">Function attribute-value (attribute)</a></div><div style="margin-left: 3em">Return an attribute's value. <a href="hax__fun__attribute-value.html#details">...</a></div><br/>       <div class="def"><a href="hax__fun__attribute-specified-p.html">Function attribute-specified-p (attribute)</a></div><div style="margin-left: 3em">Return whether the attribute was contained the parsed document. <a href="hax__fun__attribute-specified-p.html#details">...</a></div><br/>       <h2><a name="id60421"/>HAX events</h2>       <div class="def"><a href="hax__fun__start-document.html">Function start-document (handler name public-id system-id)</a></div><div style="margin-left: 3em">Signals the beginning of an HTML document. <a href="hax__fun__start-document.html#details">...</a></div><br/>       <div class="def"><a href="hax__fun__start-element.html">Function start-element (handler name attributes)</a></div><div style="margin-left: 3em">Signals the beginning of an HTML element. <a href="hax__fun__start-element.html#details">...</a></div><br/>       <div class="def"><a href="hax__fun__end-element.html">Function end-element (handler name)</a></div><div style="margin-left: 3em">Signals the end of an HTML element. <a href="hax__fun__end-element.html#details">...</a></div><br/>       <div class="def"><a href="hax__fun__characters.html">Function characters (handler data)</a></div><div style="margin-left: 3em">Signals character data. <a href="hax__fun__characters.html#details">...</a></div><br/>       <div class="def"><a href="hax__fun__comment.html">Function comment (handler data)</a></div><div style="margin-left: 3em">Signals a comment. <a href="hax__fun__comment.html#details">...</a></div><br/>       <div class="def"><a href="hax__fun__end-document.html">Function end-document (handler)</a></div><div style="margin-left: 3em">Signals the end of an HTML document. <a href="hax__fun__end-document.html#details">...</a></div><br/>       </padded>
      </column>
      <column>
        <h3><a name="index"/>Symbol Index</h3>
        <simple-table>
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    <row><cell><a href="hax__class__abstract-handler.html"><tt>abstract-handler</tt></a>, class</cell></row><row><cell><a href="hax__fun__attribute-name.html"><tt>attribute-name</tt></a>, function</cell></row><row><cell><a href="hax__fun__attribute-specified-p.html"><tt>attribute-specified-p</tt></a>, function</cell></row><row><cell><a href="hax__fun__attribute-value.html"><tt>attribute-value</tt></a>, function</cell></row><row><cell><a href="hax__fun__characters.html"><tt>characters</tt></a>, function</cell></row><row><cell><a href="hax__fun__comment.html"><tt>comment</tt></a>, function</cell></row><row><cell><a href="hax__class__default-handler.html"><tt>default-handler</tt></a>, class</cell></row><row><cell><a href="hax__fun__end-document.html"><tt>end-document</tt></a>, function</cell></row><row><cell><a href="hax__fun__end-element.html"><tt>end-element</tt></a>, function</cell></row><row><cell><a href="hax__fun__find-attribute.html"><tt>find-attribute</tt></a>, function</cell></row><row><cell><a href="hax__fun__make-attribute.html"><tt>make-attribute</tt></a>, function</cell></row><row><cell><a href="hax__class__standard-attribute.html"><tt>standard-attribute</tt></a>, class</cell></row><row><cell><a href="hax__fun__start-document.html"><tt>start-document</tt></a>, function</cell></row><row><cell><a href="hax__fun__start-element.html"><tt>start-element</tt></a>, function</cell></row></simple-table>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__make-lhtml-builder.html" title="Function make-lhtml-builder">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  make-lhtml-builder</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>make-lhtml-builder</tt> ()</div>
          <h3>Return Value</h3>
          <div class="indent">The <a href="closure-html__class__lhtml-builder.html"><tt>lhtml-builder</tt></a>, a HAX handler.</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">       Create a HAX handler which builds LHTML list structures.<br/><br/>
       Example:       <pre>
 (chtml:parse "&lt;p&gt;nada&lt;/p&gt;" (chtml:make-lhtml-builder))       </pre>       <tt>
 =&gt; (:HTML NIL (:HEAD NIL) (:BODY NIL (:P NIL "nada")))       </tt><br/><br/>              </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__class__lhtml-builder.html">
                  <tt>lhtml-builder</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__parse.html">
                  <tt>parse</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__serialize-lhtml.html">
                  <tt>serialize-lhtml</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/sgml__fun__pt-name.html" title="Function pt-name">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  pt-name</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>pt-name</tt> (<b>instance</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>instance</tt> -- a <a href="sgml__class__pt.html"><tt>pt</tt></a> node</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">a keyword symbol</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">              Returns the element's name.<br/><br/>
       HTML element names are symbols in the keyword package with uppercase       names.</div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="sgml__class__pt.html">
                  <tt>pt</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__parse.html" title="Function parse">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  parse</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>parse</tt> (<b>input</b> <b>handler</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>input</tt> -- a pathname, stream, string, or octet array</li>
              <li><tt>handler</tt> -- nil, or a HAX/SAX handler</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">The return value of this function is determined by the         <tt>handler</tt> argument; see below.</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                     Parse the HTML document given as an argument, or referred to       using a pathname.<br/><br/>       <tt>input</tt> can have one of the following types:       <ul>       <li>pathname -- a Common Lisp pathname. Opens the file specified by         the pathname parses it as an HTML document.</li>       <li>stream -- a Common Lisp stream that has already been opened.</li>       <li>array -- an <tt>(unsigned-byte 8)</tt> array.  The array is parsed         directly, and interpreted according to the encoding it specifies.</li>       <li>string/rod -- a rod (or string on unicode-capable
         implementations). Parses an XML document from the input string that         has already undergone external-format decoding.</li>       </ul><br/><br/>       If <tt>handler</tt> is <tt>nil</tt>, the parser's internal representation
       of the document is returned.  The result is equivalent to that       returned using a PT builder as returned by <a href="closure-html__fun__make-pt-builder.html"><tt>make-pt-builder</tt></a>, but
       avoids creating the same representation twice.<br/><br/>       Alternatively, <tt>handler</tt> can be a HAX handler       (see <a href="hax__class__abstract-handler.html"><tt>hax:abstract-handler</tt></a>) or a SAX handler (see the       <a href="http://common-lisp.net/project/cxml/sax.html#sax">SAX protocol in       cxml</a>). In this case, the document will be serialized to the specified       handler, and the result of <a href="hax__fun__end-document.html"><tt>hax:end-document</tt></a> will be returned
       from this function. Note that the parser will currently always process       the entire document before sending the first HAX event.</div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__fun__make-pt-builder.html">
                  <tt>make-pt-builder</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__class__abstract-handler.html">
                  <tt>hax:abstract-handler</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>hax:end-document</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/sgml__class__pt.html" title="Class pt">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Class pt</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Superclasses</h3>
          <div class="indent"><tt style="color: #777777">common-lisp:structure-object</tt>, <tt style="color: #777777">sb-pcl::slot-object</tt>, <tt style="color: #777777">common-lisp:t</tt></div>
          <h3>Documented Subclasses</h3>
          <div class="indent">
		None
	      </div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">Represents an HTML element.<br/><br/>
       PT represents each HTML element as a structure instance, named by
       a keyword symbol.  The children of a PT node are strings (rods)
       for text nodes, or other PT nodes for elements.<br/><br/>                                          </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>Slot Access Functions</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="sgml__fun__pt-name.html">
                  <tt>pt-name</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="sgml__fun__pt-children.html">
                  <tt>pt-children</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="sgml__fun__pt-parent.html">
                  <tt>pt-parent</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="sgml__fun__pt-attrs.html">
                  <tt>pt-attrs</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="sgml__fun__make-pt-builder.html">
                  <tt>make-pt-builder</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="sgml__fun__serialize-pt.html">
                  <tt>serialize-pt</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__macro__with-element.html" title="Macro with-element">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Macro
	  with-element</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>with-element</tt> (<b>name</b> <b>&amp;body</b> <b>body</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>name</tt> -- the element's name, a string/rod</li>
              <li><tt>body</tt> -- an implicit progn</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">the value of <tt>body</tt></div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                     Generate <a href="hax__fun__start-element.html"><tt>hax:start-element</tt></a> and <a href="hax__fun__end-element.html"><tt>hax:end-element</tt></a>         events.<br/><br/>       Execute <tt>body</tt> as an implicit progn.  Send a start-element event to
       the current sink (before the first child element begins, or the
       current element ends), including all attributes specified using       <a href="closure-html__fun__attribute.html"><tt>attribute</tt></a> until that point.  Send an end-element event after       <tt>body</tt> is finished.<br/><br/>       To be used in the extent of an <a href="closure-html__macro__with-html-output.html"><tt>with-html-output</tt></a> invocation.</div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>hax:start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-element.html">
                  <tt>hax:end-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__attribute.html">
                  <tt>attribute</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__macro__with-html-output.html">
                  <tt>with-html-output</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__make-string-sink.html" title="Function make-string-sink">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  make-string-sink</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>make-string-sink</tt> (<b>&amp;rest</b> <b>args</b>)</div>
          <h3>Return Value</h3>
          <div class="indent">a HAX handler</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">       Returns a sink creating strings.<br/><br/>
       This function creates a serialization sink.  Sinks are HAX handlers
       that write events in their normal HTML syntax, and return       the result from <a href="hax__fun__end-document.html"><tt>hax:end-document</tt></a>, if applicable.<br/><br/>
       This particular kind of sink creates an HTML document in a string.       The string is <i>not</i> encoded into an external-format.  When
       writing this string to a Lisp character stream at a later point, make
       sure that the stream's external format agrees with the encoding
       declared by the document, if any.<br/><br/>       <b>Supported only on Lisps with Unicode support.</b>  On Lisps without       Unicode characters, try <i>make-string-sink/utf8</i> as an alternative
       that has different encoding behaviour, but still uses strings.  Or       use <i>make-rod-sink</i>, which creates arrays of code points.<br/><br/>                            </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>hax:end-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-character-stream-sink.html">
                  <tt>make-character-stream-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-octet-stream-sink.html">
                  <tt>make-octet-stream-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-octet-vector-sink.html">
                  <tt>make-octet-vector-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-rod-sink.html">
                  <tt>make-rod-sink</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__variable___html-dtd_.html" title="Variable *html-dtd*">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Variable
	  *html-dtd*</h2>
      <h3>Details<a name="details"/></h3>
      <div class="indent">fixme: exported only for the benefit of Closure</div>
    </padded>
  </page>
  <page base="../" pathname="pages/closure-html__fun__comment.html" title="Function comment">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  comment</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>comment</tt> (<b>data</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>data</tt> -- a string/rod</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">the <tt>data</tt></div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">              Write a comment node.<br/><br/>       To be used in the extent of an <a href="closure-html__macro__with-html-output.html"><tt>with-html-output</tt></a> invocation, this       function serializes a comment.</div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__macro__with-html-output.html">
                  <tt>with-html-output</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/sgml__fun__pt-children.html" title="Function pt-children">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  pt-children</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>pt-children</tt> (<b>instance</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>instance</tt> -- a <a href="sgml__class__pt.html"><tt>pt</tt></a> node</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">a list</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">              Returns the element's children.<br/><br/>
       The children of a PT node are strings (rods)
       for text nodes, or other PT nodes for elements.<br/><br/>       </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="sgml__class__pt.html">
                  <tt>pt</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="sgml__fun__pt-parent.html">
                  <tt>pt-parent</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__text.html" title="Function text">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  text</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>text</tt> (<b>data</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>data</tt> -- a string/rod</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">the <tt>data</tt></div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">              Write a text node.<br/><br/>       To be used in the extent of an <a href="closure-html__macro__with-html-output.html"><tt>with-html-output</tt></a> invocation, this       function serializes a text node.</div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__macro__with-html-output.html">
                  <tt>with-html-output</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__serialize-pt.html" title="Function serialize-pt">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  serialize-pt</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>serialize-pt</tt> (<b>document</b> <b>handler</b> <b>&amp;key</b> <b>(name HTML)</b> <b>public-id</b> <b>system-id</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>document</tt> -- an <a href="sgml__class__pt.html"><tt>pt</tt></a> instance</li>
              <li><tt>handler</tt> -- a HAX/SAX handler</li>
              <li><tt>name</tt> -- root element name, a rod/string</li>
              <li><tt>public-id</tt> -- nil or the Public ID, a rod/string</li>
              <li><tt>system-id</tt> -- nil or the System ID/URI, a rod/string</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">The return value of this function is determined by the         <tt>handler</tt> argument; see below.</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                                          Serialize the PT node into HAX events, sent to the          specified HAX handler.<br/><br/>       <tt>handler</tt> can be a HAX handler       (see <a href="hax__class__abstract-handler.html"><tt>hax:abstract-handler</tt></a>) or a SAX handler (see the       <a href="http://common-lisp.net/project/cxml/sax.html#sax">SAX protocol in       cxml</a>).<br/><br/>       The result of calling <a href="hax__fun__end-document.html"><tt>hax:end-document</tt></a> on the handler will be
       returned from this function.<br/><br/>       If <tt>system-id</tt> is specified, a doctype will be written       according to the arguments <tt>name</tt>, <tt>public-id</tt>, and       <tt>system-id</tt>.<br/><br/>
       Use this function with a serialization sink to get a string or file
       with a serialized HTML document, or with a HAX/SAX builder to
       convert PT into a different representation, like DOM, LHTML, or
       STP.<br/><br/>
       Example:       <pre>
 (let ((x (chtml:parse "&lt;p&gt;nada&lt;/p&gt;" (chtml:make-pt-builder)))))
   (chtml:serialize-pt x (chtml:make-string-sink))       </pre>       <tt>
 =&gt; "&lt;HTML&gt;&lt;HEAD&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;P&gt;nada&lt;/P&gt;&lt;/BODY&gt;&lt;/HTML&gt;"       </tt><br/><br/>              </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="sgml__class__pt.html">
                  <tt>pt</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__class__abstract-handler.html">
                  <tt>hax:abstract-handler</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>hax:end-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__parse.html">
                  <tt>parse</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-pt-builder.html">
                  <tt>make-pt-builder</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__class__pt-builder.html" title="Class pt-builder">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Class pt-builder</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Superclasses</h3>
          <div class="indent"><a href="hax__class__abstract-handler.html"><tt>abstract-handler</tt></a>, <tt style="color: #777777">common-lisp:standard-object</tt>, <tt style="color: #777777">sb-pcl::slot-object</tt>, <tt style="color: #777777">common-lisp:t</tt></div>
          <h3>Documented Subclasses</h3>
          <div class="indent">
		None
	      </div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">A HAX handler which builds PT structures.<br/><br/>
       PT represents each HTML element as a structure instance of type       <a href="sgml__class__pt.html"><tt>pt</tt></a>.<br/><br/>              </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="sgml__class__pt.html">
                  <tt>pt</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-pt-builder.html">
                  <tt>make-pt-builder</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__serialize-pt.html">
                  <tt>serialize-pt</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__class__lhtml-builder.html" title="Class lhtml-builder">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Class lhtml-builder</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Superclasses</h3>
          <div class="indent"><a href="hax__class__abstract-handler.html"><tt>abstract-handler</tt></a>, <tt style="color: #777777">common-lisp:standard-object</tt>, <tt style="color: #777777">sb-pcl::slot-object</tt>, <tt style="color: #777777">common-lisp:t</tt></div>
          <h3>Documented Subclasses</h3>
          <div class="indent">
		None
	      </div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">A HAX handler which builds LHTML list structures.<br/><br/>
       LHTML represents each HTML element as a list of the form<br/><br/>  <tt>(</tt><i>name</i><tt> (</tt><i>attributes...</i><tt>) </tt><i>children...</i><tt>)</tt><br/><br/>
       and each attribute as a list of the form<br/><br/>  <tt>(</tt><i>name value</i><tt>)</tt><br/><br/>
       Element and attribute names are symbols in the keyword package
       with uppercase names.  Attribute values are rods or strings.<br/><br/>              </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__fun__make-lhtml-builder.html">
                  <tt>make-lhtml-builder</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__serialize-lhtml.html">
                  <tt>serialize-lhtml</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__macro__with-html-output.html" title="Macro with-html-output">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Macro
	  with-html-output</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>with-html-output</tt> (<b>(sink &amp;key (name HTML) public-id system-id)</b> <b>&amp;body</b> <b>body</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>sink</tt> -- a HAX/SAX handler</li>
              <li><tt>name</tt> -- root element name, a rod/string</li>
              <li><tt>public-id</tt> -- nil or the Public ID, a rod/string</li>
              <li><tt>system-id</tt> -- nil or the System ID/URI, a rod/string</li>
              <li><tt>body</tt> -- an implicit progn</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">the value of <tt>body</tt></div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                                          Generate <a href="hax__fun__start-document.html"><tt>hax:start-document</tt></a> and <a href="hax__fun__end-document.html"><tt>hax:end-document</tt></a>         events.<br/><br/>
       Send a start-document event to the current sink, then execute       <tt>body</tt> as an implicit progn.  Afterwards, send an end-element
       event.<br/><br/>                                   </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__start-document.html">
                  <tt>hax:start-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>hax:end-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__macro__with-output-sink.html">
                  <tt>with-output-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__macro__with-element.html">
                  <tt>with-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__attribute.html">
                  <tt>attribute</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__text.html">
                  <tt>text</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__comment.html">
                  <tt>comment</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__make-octet-stream-sink.html" title="Function make-octet-stream-sink">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  make-octet-stream-sink</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>make-octet-stream-sink</tt> (<b>stream</b> <b>&amp;rest</b> <b>initargs</b>)</div>
          <h3>Return Value</h3>
          <div class="indent">a HAX handler</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">       Returns a sink writing to an octet stream.<br/><br/>
       This function creates a serialization sink.  Sinks are HAX handlers
       that write events in their normal HTML syntax.<br/><br/>
       This particular kind of sink writen the HTML document to a stream       of element-type <tt>(unsigned-byte 8)</tt>.<br/><br/>                            </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__fun__make-character-stream-sink.html">
                  <tt>make-character-stream-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-octet-vector-sink.html">
                  <tt>make-octet-vector-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-rod-sink.html">
                  <tt>make-rod-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-string-sink.html">
                  <tt>make-string-sink</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__make-rod-sink.html" title="Function make-rod-sink">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  make-rod-sink</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>make-rod-sink</tt> (<b>&amp;rest</b> <b>initargs</b>)</div>
          <h3>Return Value</h3>
          <div class="indent">a HAX handler</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">       Returns a sink creating rods.<br/><br/>
       This function creates a serialization sink.  Sinks are HAX handlers
       that write events in their normal HTML syntax, and return       the result from <a href="hax__fun__end-document.html"><tt>hax:end-document</tt></a>, if applicable.<br/><br/>
       This particular kind of sink creates an HTML document in a rod.<br/><br/>       On Lisps with Unicode support, <tt>make-string-sink</tt> is an alias for
       this function.<br/><br/>                            </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>hax:end-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-character-stream-sink.html">
                  <tt>make-character-stream-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-octet-stream-sink.html">
                  <tt>make-octet-stream-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-octet-vector-sink.html">
                  <tt>make-octet-vector-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-string-sink.html">
                  <tt>make-string-sink</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__make-octet-vector-sink.html" title="Function make-octet-vector-sink">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  make-octet-vector-sink</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>make-octet-vector-sink</tt> (<b>&amp;rest</b> <b>initargs</b>)</div>
          <h3>Return Value</h3>
          <div class="indent">a HAX handler</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">       Returns a sink creating octet vectors.<br/><br/>
       This function creates a serialization sink.  Sinks are HAX handlers
       that write events in their normal HTML syntax, and return       the result from <a href="hax__fun__end-document.html"><tt>hax:end-document</tt></a>, if applicable.<br/><br/>
       This particular kind of sink creates an HTML document in an array       of <tt>(unsigned-byte 8)</tt>.<br/><br/>                            </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>hax:end-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-character-stream-sink.html">
                  <tt>make-character-stream-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-octet-stream-sink.html">
                  <tt>make-octet-stream-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-rod-sink.html">
                  <tt>make-rod-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-string-sink.html">
                  <tt>make-string-sink</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__make-character-stream-sink.html" title="Function make-character-stream-sink">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  make-character-stream-sink</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>make-character-stream-sink</tt> (<b>stream</b> <b>&amp;rest</b> <b>initargs</b>)</div>
          <h3>Return Value</h3>
          <div class="indent">a HAX handler</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">       Returns a sink writing to a character stream.<br/><br/>
       This function creates a serialization sink.  Sinks are HAX handlers
       that write events in their normal HTML syntax.<br/><br/>
       This particular kind of sink writen the HTML document to a stream       of element-type <tt>character</tt>. The characters written are <i>not</i>
       encoded into an external-format. Make sure that the stream's external
       format agrees with the encoding declared by the document, if any.<br/><br/>       <b>Supported only on Lisps with Unicode support.</b>  On Lisps without       Unicode characters, try <i>make-character-stream-sink/utf8</i> as
       an alternative that has different encoding behaviour, but still uses
       character streams.<br/><br/>                            </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__fun__make-octet-stream-sink.html">
                  <tt>make-octet-stream-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-octet-vector-sink.html">
                  <tt>make-octet-vector-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-rod-sink.html">
                  <tt>make-rod-sink</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-string-sink.html">
                  <tt>make-string-sink</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__attribute.html" title="Function attribute">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  attribute</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>attribute</tt> (<b>name</b> <b>value</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>name</tt> -- a string/rod</li>
              <li><tt>value</tt> -- a string/rod or other object</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">the <tt>value</tt></div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                     Add an attribute to the current element.<br/><br/>       To be used in the extent of an <a href="closure-html__macro__with-element.html"><tt>with-element</tt></a> invocation, this       function adds an attribute to the element being serialized.</div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__macro__with-element.html">
                  <tt>with-element</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__serialize-lhtml.html" title="Function serialize-lhtml">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  serialize-lhtml</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>serialize-lhtml</tt> (<b>document</b> <b>handler</b> <b>&amp;key</b> <b>(name HTML)</b> <b>public-id</b> <b>system-id</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>document</tt> -- an LHTML list</li>
              <li><tt>handler</tt> -- a HAX/SAX handler</li>
              <li><tt>name</tt> -- root element name, a rod/string</li>
              <li><tt>public-id</tt> -- nil or the Public ID, a rod/string</li>
              <li><tt>system-id</tt> -- nil or the System ID/URI, a rod/string</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">The return value of this function is determined by the         <tt>handler</tt> argument; see below.</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                                          Serialize the LHTML document into HAX events, sent to the          specified HAX handler.<br/><br/>       <tt>handler</tt> can be a HAX handler       (see <a href="hax__class__abstract-handler.html"><tt>hax:abstract-handler</tt></a>) or a SAX handler (see the       <a href="http://common-lisp.net/project/cxml/sax.html#sax">SAX protocol in       cxml</a>).<br/><br/>       The result of calling <a href="hax__fun__end-document.html"><tt>hax:end-document</tt></a> on the handler will be
       returned from this function.<br/><br/>       If <tt>system-id</tt> is specified, a doctype will be written       according to the arguments <tt>name</tt>, <tt>public-id</tt>, and       <tt>system-id</tt>.<br/><br/>
       Use this function with a serialization sink to get a string or file
       with a serialized HTML document, or with a HAX/SAX builder to
       convert LHTML into a different representation, like DOM, PT, or
       STP.<br/><br/>
       Example:       <pre>
 (let ((x '(:HTML NIL (:HEAD NIL) (:BODY NIL (:P NIL "nada"))))))
   (chtml:serialize-lhtml x (chtml:make-string-sink))       </pre>       <tt>
 =&gt; "&lt;HTML&gt;&lt;HEAD&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;P&gt;nada&lt;/P&gt;&lt;/BODY&gt;&lt;/HTML&gt;"       </tt><br/><br/>              </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__class__abstract-handler.html">
                  <tt>hax:abstract-handler</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>hax:end-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__parse.html">
                  <tt>parse</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__make-lhtml-builder.html">
                  <tt>make-lhtml-builder</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__fun__make-pt-builder.html" title="Function make-pt-builder">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  make-pt-builder</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>make-pt-builder</tt> ()</div>
          <h3>Return Value</h3>
          <div class="indent">The <a href="closure-html__class__pt-builder.html"><tt>pt-builder</tt></a>, a HAX handler.</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">       Create a HAX handler which builds <a href="sgml__class__pt.html"><tt>pt</tt></a> structures.<br/><br/>
       Example:       <pre>
 (chtml:parse "&lt;p&gt;nada&lt;/p&gt;" (chtml:make-pt-builder))       </pre>       <tt>
 =&gt; #&lt;SGML:PT HTML ..&gt;       </tt><br/><br/>              </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__class__pt-builder.html">
                  <tt>pt-builder</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="sgml__class__pt.html">
                  <tt>pt</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__parse.html">
                  <tt>parse</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__serialize-pt.html">
                  <tt>serialize-pt</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/sgml__fun__pt-parent.html" title="Function pt-parent">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  pt-parent</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>pt-parent</tt> (<b>instance</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>instance</tt> -- a <a href="sgml__class__pt.html"><tt>pt</tt></a> node</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">nil, or a <a href="sgml__class__pt.html"><tt>pt</tt></a> node</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">              Returns the element's parent node.<br/><br/>
       This slot should refer to the node's parent, if it is included
       in the list of that node's children.<br/><br/>       </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="sgml__class__pt.html">
                  <tt>pt</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="sgml__fun__pt-children.html">
                  <tt>pt-children</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/sgml__fun__pt-attrs.html" title="Function pt-attrs">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Function
	  pt-attrs</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>pt-attrs</tt> (<b>instance</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>instance</tt> -- a <a href="sgml__class__pt.html"><tt>pt</tt></a> node</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">a plist</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">              Returns the element's attributes as a plist.<br/><br/>
       This plist maps attribute names to their values. <br/><br/>
       Attribute names are symbols in the keyword package with uppercase       names.  Attribute values are strings/rods.</div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="sgml__class__pt.html">
                  <tt>pt</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/closure-html__macro__with-output-sink.html" title="Macro with-output-sink">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="closure-html.html">closure-html</a></p>
      <h2 class="page-title">
	  Macro
	  with-output-sink</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>with-output-sink</tt> (<b>(var)</b> <b>&amp;body</b> <b>body</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>var</tt> -- the variable name, a symbol</li>
              <li><tt>body</tt> -- an implicit progn</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">the value of <tt>body</tt></div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                     Bind a variable to the current serialization sink.<br/><br/>       Execute <tt>body</tt> as an implicit progn with <tt>var</tt> bound to a       serialization sink that <tt>body</tt> can safely call HAX functions on.<br/><br/>       To be used in the extent of an <a href="closure-html__macro__with-html-output.html"><tt>with-html-output</tt></a> invocation.</div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__macro__with-html-output.html">
                  <tt>with-html-output</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__class__default-handler.html" title="Class default-handler">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Class default-handler</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Superclasses</h3>
          <div class="indent"><a href="hax__class__abstract-handler.html"><tt>abstract-handler</tt></a>, <tt style="color: #777777">common-lisp:standard-object</tt>, <tt style="color: #777777">sb-pcl::slot-object</tt>, <tt style="color: #777777">common-lisp:t</tt></div>
          <h3>Documented Subclasses</h3>
          <div class="indent">
		None
	      </div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">A no-op HAX handler.<br/><br/>
       This class defines methods for all HAX events that do nothing.
       It is useful as a superclass when implementing a HAX handler that
       is interested in only some events and not others.<br/><br/>                                                               </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__fun__parse.html">
                  <tt>chtml:parse</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__serialize-lhtml.html">
                  <tt>chtml:serialize-lhtml</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__serialize-pt.html">
                  <tt>chtml:serialize-pt</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-document.html">
                  <tt>start-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>end-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-element.html">
                  <tt>end-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__characters.html">
                  <tt>characters</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__comment.html">
                  <tt>comment</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__make-attribute.html" title="Function make-attribute">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  make-attribute</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>make-attribute</tt> (<b>name</b> <b>value</b> <b>&amp;optional</b> <b>(specified-p t)</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>name</tt> -- a string/rod</li>
              <li><tt>value</tt> -- a string/rod</li>
              <li><tt>specified-p</tt> -- a boolean, default is <tt>t</tt></li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">an instance of <a href="hax__class__standard-attribute.html"><tt>standard-attribute</tt></a>.</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                            Creates a HAX attribute.<br/><br/>
       Creates an instance that can be used with the generic functions
       for HAX attributes.  The result can be passed to       <a href="hax__fun__start-element.html"><tt>hax:start-element</tt></a> in the list of attributes.<br/><br/>                     </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__class__standard-attribute.html">
                  <tt>standard-attribute</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>hax:start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-name.html">
                  <tt>attribute-name</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-value.html">
                  <tt>attribute-value</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-specified-p.html">
                  <tt>attribute-specified-p</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__end-element.html" title="Function end-element">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  end-element</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>end-element</tt> (<b>handler</b> <b>name</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>handler</tt> -- a HAX/SAX handler         (see <a href="hax__class__abstract-handler.html"><tt>abstract-handler</tt></a> for details)</li>
              <li><tt>name</tt> -- root element name, a rod/string</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">unspecified</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                     Signals the end of an HTML element.<br/><br/>
       This event corresponds to the closing tag of an element.<br/><br/>                                   </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__class__abstract-handler.html">
                  <tt>abstract-handler</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-document.html">
                  <tt>start-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__characters.html">
                  <tt>characters</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__comment.html">
                  <tt>comment</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>end-document</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__start-element.html" title="Function start-element">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  start-element</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>start-element</tt> (<b>handler</b> <b>name</b> <b>attributes</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>handler</tt> -- a HAX/SAX handler         (see <a href="hax__class__abstract-handler.html"><tt>abstract-handler</tt></a> for details)</li>
              <li><tt>name</tt> -- root element name, a rod/string</li>
              <li><tt>attributes</tt> -- a list of attributes</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">unspecified</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                            Signals the beginning of an HTML element.<br/><br/>
       This event corresponds to the opening tag of an element.<br/><br/>
       Elements of the attribute list can have any class, but must implement       the generic functions for attributes.  See <a href="hax__class__standard-attribute.html"><tt>standard-attribute</tt></a>
       for the built-in attribute implementation.<br/><br/>                                          </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__class__abstract-handler.html">
                  <tt>abstract-handler</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__class__standard-attribute.html">
                  <tt>standard-attribute</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__find-attribute.html">
                  <tt>find-attribute</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-document.html">
                  <tt>start-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-element.html">
                  <tt>end-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__characters.html">
                  <tt>characters</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__comment.html">
                  <tt>comment</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>end-document</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__attribute-value.html" title="Function attribute-value">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  attribute-value</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>attribute-value</tt> (<b>attribute</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>instance</tt> -- any class implementing this function</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">a string/rod</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">              Return an attribute's value.<br/><br/>
       Instances of this classes implementing this function can be passed to       <a href="hax__fun__start-element.html"><tt>hax:start-element</tt></a> in the list of attributes.<br/><br/>              </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>hax:start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-name.html">
                  <tt>attribute-name</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-specified-p.html">
                  <tt>attribute-specified-p</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__attribute-specified-p.html" title="Function attribute-specified-p">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  attribute-specified-p</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>attribute-specified-p</tt> (<b>attribute</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>instance</tt> -- any class implementing this function</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">a string/rod</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">              Return whether the attribute was contained the parsed document.<br/><br/>       Attributes return <tt>nil</tt> here if they resulted from a default
       value declaration in a DTD.<br/><br/>
       Instances of this classes implementing this function can be passed to       <a href="hax__fun__start-element.html"><tt>hax:start-element</tt></a> in the list of attributes.<br/><br/>              </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>hax:start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-name.html">
                  <tt>attribute-name</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-value.html">
                  <tt>attribute-value</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__class__standard-attribute.html" title="Class standard-attribute">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Class standard-attribute</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Superclasses</h3>
          <div class="indent"><tt style="color: #777777">common-lisp:standard-object</tt>, <tt style="color: #777777">sb-pcl::slot-object</tt>, <tt style="color: #777777">common-lisp:t</tt></div>
          <h3>Documented Subclasses</h3>
          <div class="indent">
		None
	      </div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">An implementation of the HAX attribute protocol.<br/><br/>
       A standard class implementing the generic functions for HAX
       attributes.  Instances of this class can be passed to       <a href="hax__fun__start-element.html"><tt>hax:start-element</tt></a> in the list of attributes.<br/><br/>                            </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>Returned by</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="common-lisp__fun__make-instance.html">
                  <tt>make-instance</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
        <h3>Slot Access Functions</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__attribute-name.html">
                  <tt>attribute-name</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-value.html">
                  <tt>attribute-value</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-specified-p.html">
                  <tt>attribute-specified-p</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>hax:start-element</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__characters.html" title="Function characters">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  characters</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>characters</tt> (<b>handler</b> <b>data</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>handler</tt> -- a HAX/SAX handler         (see <a href="hax__class__abstract-handler.html"><tt>abstract-handler</tt></a> for details)</li>
              <li><tt>data</tt> -- rod/string</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">unspecified</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                     Signals character data.<br/><br/>
       This event represents character data in a document.<br/><br/>                                   </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__class__abstract-handler.html">
                  <tt>abstract-handler</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-document.html">
                  <tt>start-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-element.html">
                  <tt>end-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__comment.html">
                  <tt>comment</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>end-document</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__class__abstract-handler.html" title="Class abstract-handler">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Class abstract-handler</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Superclasses</h3>
          <div class="indent"><tt style="color: #777777">common-lisp:standard-object</tt>, <tt style="color: #777777">sb-pcl::slot-object</tt>, <tt style="color: #777777">common-lisp:t</tt></div>
          <h3>Documented Subclasses</h3>
          <div class="indent"><a href="closure-html__class__lhtml-builder.html"><tt>lhtml-builder</tt></a>, <a href="closure-html__class__pt-builder.html"><tt>pt-builder</tt></a>, <a href="hax__class__default-handler.html"><tt>default-handler</tt></a></div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">The superclass of all HAX handlers.<br/><br/>
       Direct subclasses have to implement all event methods, since
       no default methods are defined on this class.<br/><br/>
       Note that it is permissible to use handlers that are not
       instances of this class in some circumstances.<br/><br/>
       In particular,       <tt>nil</tt> is a valid HAX handler and ignores all events.<br/><br/>
       In addition,       <a href="http://common-lisp.net/project/cxml/sax.html#sax">SAX handlers</a>
       are valid HAX handlers (and vice versa), even though
       hax:abstract-handler and sax:abstract-handler do not
       share a specific superclass.  HAX events sent to SAX handlers are
       automatically re-signalled as XHTML SAX events, and SAX events sent
       to HAX handlers are re-signalled as namespace-less HAX events.<br/><br/>
       However, user code should define subclasses of the documented
       superclasses to enable the HAX/SAX bridging described above.<br/><br/>                                                               </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="closure-html__fun__parse.html">
                  <tt>chtml:parse</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__serialize-lhtml.html">
                  <tt>chtml:serialize-lhtml</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="closure-html__fun__serialize-pt.html">
                  <tt>chtml:serialize-pt</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-document.html">
                  <tt>start-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>end-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-element.html">
                  <tt>end-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__characters.html">
                  <tt>characters</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__comment.html">
                  <tt>comment</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__end-document.html" title="Function end-document">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  end-document</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>end-document</tt> (<b>handler</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>handler</tt> -- a HAX/SAX handler         (see <a href="hax__class__abstract-handler.html"><tt>abstract-handler</tt></a> for details)</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">The return value of this function depends on the handler class.</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">              Signals the end of an HTML document.<br/><br/>
       This is the last event sent to any handler, and signals the end of
       serialization.<br/><br/>
       The return value of this function is usually returned to user code
       by higher-level serialization functions and can be considered the
       result of serialization and "return value" of the handler.<br/><br/>                                   </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__class__abstract-handler.html">
                  <tt>abstract-handler</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-document.html">
                  <tt>start-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-element.html">
                  <tt>end-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__characters.html">
                  <tt>characters</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__comment.html">
                  <tt>comment</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__find-attribute.html" title="Function find-attribute">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  find-attribute</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>find-attribute</tt> (<b>name</b> <b>attrs</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>name</tt> -- a string/rod</li>
              <li><tt>attrs</tt> -- a list of attributes</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">an attribute, or nil</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                     Searches for an attribute by name.<br/><br/>       Returns the first attribute in <tt>attrs</tt> with the specified name,       or <tt>nil</tt> if no such attribute was found.<br/><br/>       </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__attribute-name.html">
                  <tt>attribute-name</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__start-document.html" title="Function start-document">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  start-document</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>start-document</tt> (<b>handler</b> <b>name</b> <b>public-id</b> <b>system-id</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>handler</tt> -- a HAX/SAX handler         (see <a href="hax__class__abstract-handler.html"><tt>abstract-handler</tt></a> for details)</li>
              <li><tt>name</tt> -- root element name, a rod/string</li>
              <li><tt>public-id</tt> -- nil or the Public ID, a rod/string</li>
              <li><tt>system-id</tt> -- nil or the System ID/URI, a rod/string</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">unspecified</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                                   Signals the beginning of an HTML document.<br/><br/>
       This is the first event sent to any handler.<br/><br/>       If <tt>system-id</tt> is non-nil, the document includes a doctype
       declaration.<br/><br/>                                   </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__class__abstract-handler.html">
                  <tt>abstract-handler</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-element.html">
                  <tt>end-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__characters.html">
                  <tt>characters</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__comment.html">
                  <tt>comment</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>end-document</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__comment.html" title="Function comment">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  comment</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>comment</tt> (<b>handler</b> <b>data</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>handler</tt> -- a HAX/SAX handler         (see <a href="hax__class__abstract-handler.html"><tt>abstract-handler</tt></a> for details)</li>
              <li><tt>data</tt> -- rod/string</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">unspecified</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">                     Signals a comment.<br/><br/>
       This event represents a comment.<br/><br/>                                   </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__class__abstract-handler.html">
                  <tt>abstract-handler</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-document.html">
                  <tt>start-document</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-element.html">
                  <tt>end-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__characters.html">
                  <tt>characters</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__end-document.html">
                  <tt>end-document</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
  <page base="../" pathname="pages/hax__fun__attribute-name.html" title="Function attribute-name">
    <padded>
      <p class="noindent">
	  Package:
	  <a href="hax.html">hax</a></p>
      <h2 class="page-title">
	  Function
	  attribute-name</h2>
    </padded>
    <columns width="100%">
      <column width="60%">
        <padded>
          <h3>Lambda List</h3>
          <div class="indent"><tt>attribute-name</tt> (<b>attribute</b>)</div>
          <h3>Arguments</h3>
          <div class="indent">
            <ul>
              <li><tt>instance</tt> -- any class implementing this function</li>
            </ul>
          </div>
          <h3>Return Value</h3>
          <div class="indent">a string/rod</div>
          <h3>Details<a name="details"/></h3>
          <div class="indent">              Return an attribute's name.<br/><br/>
       Instances of this classes implementing this function can be passed to       <a href="hax__fun__start-element.html"><tt>hax:start-element</tt></a> in the list of attributes.<br/><br/>              </div>
        </padded>
      </column>
      <column width="5%">
	     
	  </column>
      <column width="35%">
        <h3>See also</h3>
        <div class="indent">
          <simple-table>
            <tr>
              <td>
                <a href="hax__fun__start-element.html">
                  <tt>hax:start-element</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-value.html">
                  <tt>attribute-value</tt>
                </a>
              </td>
            </tr>
            <tr>
              <td>
                <a href="hax__fun__attribute-specified-p.html">
                  <tt>attribute-specified-p</tt>
                </a>
              </td>
            </tr>
          </simple-table>
        </div>
      </column>
    </columns>
  </page>
</pages>
