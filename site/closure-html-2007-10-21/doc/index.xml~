<page>
  <p>
    A data structure for well-formed XML documents, designed for Common
    Lisp.
  </p>

  <h3>About</h3>

  <p>
    cxml-stp is an alternative to the
    W3C's <a href="http://common-lisp.net/project/cxml/dom.html">DOM</a>,
    which cxml also implements.  It was written
    by <a href="mailto:david@lichteblau.com">David Lichteblau</a> as an
    add-on library for
    <a href="http://common-lisp.net/project/cxml">Closure XML</a> and is
    available under an X11-style license.
  </p>
  <p>
    Please send bug reports
    to <a href="mailto:cxml-devel@common-lisp.net">
      cxml-devel@common-lisp.net</a>
    (<a href="http://common-lisp.net/cgi-bin/mailman/listinfo/cxml-devel">list information</a>).
  </p>
  <p>
    <i>Acknowledgements:</i>
    cxml-stp is inspired by <a href="http://www.xom.nu/">XOM</a>.
  </p>
  <h3>Download</h3>
  <p>
    Download a
    <a href="http://www.lichteblau.com/cxml-stp/download/">tarball</a>.
  </p>

  <h3>Installation</h3>
  <p>
    cxml-stp needs
    <a href="http://common-lisp.net/project/cxml">Closure XML</a>
    and <a href="http://common-lisp.net/project/alexandria/">Alexandria</a>.
    <a href="http://www.cliki.net/asdf">ASDF</a> is used for
    compilation.  Register the .asd file, e.g. by symlinking it,
    then compile cxml-stp using <tt>asdf:operate</tt>.
  </p>
  <pre>$ ln -sf `pwd`/cxml-stp.asd /path/to/your/registry/
* (asdf:operate 'asdf:load-op :cxml-stp)</pre>
  <p>
    <i>Implementation-specific notes:</i>
    At this point, cxml-stp is written to work with Lisp strings
    (as opposed to runes and rods), and is meant to be used on
    Lisp implementations with Unicode support.
  </p>

  <h3>Documentation</h3>
  <p>
    <raute/> <a href="tutorial/index.html">Tutorial</a>
  </p>
  <p>
    <raute/> <a href="tutorial/examples.html">Code</a> snippets
    from the tutorial collected on one page
  </p>
  <p>
    <raute/> <a href="doc/pages/cxml-stp.html">API documentation</a>
  </p>
  <p>
    There is also a rough "STP for DOM
    users" <a href="DOM-COMPARISON">comparison</a> which should be
    useful if you have a specific DOM function in mind and are looking
    for STP's equivalent.
  </p>

<!--
  <h3>Example</h3>
  <p>
    To parse into STP, use an STP builder together with a function
    generating SAX events:
  </p>
  <pre class="code">(defparameter *example*
    (cxml:parse-file "example.xml" (<a
    href="doc/pages/cxml-stp__make-builder.html">cxml-stp:make-builder</a>)))</pre>
  <p>
    Serialize STP by sending SAX events for the tree to a sink:
  </p>
  <pre class="code">(<a
    href="doc/pages/cxml-stp__serialize.html">cxml-stp:serialize</a> *example* (cxml:make-character-stream-sink *standard-output*))</pre>
-->
</page>
