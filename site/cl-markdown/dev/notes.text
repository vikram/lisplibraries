todo: 

include should check for circularity

glossary is like footnoes but you supply the id

abbreviation 

what's going on in the examples with asdf-install and log5

how can we prevent the toc from getting the footer?
  don't use a header?!

For docs - should(?) save everything in parse phase (otherwise indexes will
have to be at end)

FAILS:

(search 
 "this is code" 
 (nth-value 1 (markdown:markdown  
  "Here is an example:

    this is code

 - - - -
" :stream nil)) :test 'char=) 



* I think that " # hello" is getting handled wrong

Enh: add section numbering
Enh: when doing TOC, add back links
Enh: Ensure that all #name links have anchors
Enh: ToC, give better anchor names
Enh: Disclosing ToC with details
Enh: Footnotes

standard properties
  :time-format
  :date-format
  :date-created
  :date-modified
  :docs-package
  :omit-initial-paragraph
  :omit-final-paragraph

We can't encode everything (in render-to-html) because that's not
  Markdown but something is going wrong. 

look at that cool TB thing and think about adding it to markdown
  ummm, what was this? Oh the text flow thing, that was cool

For documentation 
    - want to specify class and whether it's block or span. 
    - want to not require HTML output... later
    - no <p> tags

HTML: doctype
HTML: custom headers
HTML: include

X: pretty printing code

GOAL: rewrite my websites using CL-Markdown

Documents could be serialized pretty easily

metatilities: include split-sequence and remove tokensize stuff

?? Add a format argument somewhere about render-span-to-html and just make it
  render-span-to <format> <code> <body>

{include file &optional format}

#| How it works

chunk-source, 
  this converts lines into chunks of text (sort of like paragraphs)

  based on parsing environment which provides
    line-code->stripper
    chunk-parsing-environment
      chunk-enders, starters, line-codes and parser-map

run post-processors 
  these iterate over the chunks and recognize paragraph types, make minor modifications, etc

  based on parsing environment which provides
    chunk-post-processors

handle-spans, 
  iterate over the chunks and handle inline stuff (links, emphasis, etc.)

  based on scanners-for-chunks which is based on *spanner-parsing-environments*

cleanup 
  (ad hoc) currently just removes empty strings ("", " ", etc.)

render
|#

how to order this

what is returned?
  options: text, html, lml2, markdown (recursive)
  text is easy!
  html is closed off -- what about PDF, etc.
  lml2 feels like a bad idea
  recursive markdown feels OK too
  and then there is efficiency!

rethink mechanims and rewrite to to markdown with same mechanism?!

*parsing-environment*

(markdown "Backtick: `` \\` ``")

maybe - Links, reference style.text 
  embedded brackets

ok - Literal quotes in titles
  reference, getting full title
  inline, getting it at all

Inline HTML (Simple)
  minor (?) spacing problems

Tabs
  problem with rendering -- causes level warning
  problem with encoding second code block

compare-all should take care of style sheet


Umm, it may be that my strategy is/was f*cked.
  code over multiple lines...

Markdown: http://fletcher.freeshell.org/wiki/MultiMarkdown

(let ((document (cl-markdown::chunk-source
                 (make-pathname :type "text"
                                :name "Links, reference style"  
                                :defaults *test-source-directory*))))
  (iterate-elements 
   (cl-markdown::chunk-post-processors cl-markdown::*parsing-environment*)
   (lambda (processor)
     (funcall processor document)))
  document)

(pro:with-profiling
  (let ((in (merge-pathnames 
             (make-pathname :name "index"
                            :type "text"
                            :directory `(:relative :back "website" "source" "tutorial"))
             (dsc:system-source-directory :asdf-install)))
        (out (merge-pathnames 
              (make-pathname :name "index"
                             :type "html"
                             :directory `(:relative :back "website" "output" "tutorial"))
              (dsc:system-source-directory :asdf-install))))
    (markdown in :stream out)))

Textile
  http://hobix.com/textile/quick.html#quick-block-modifiers

#|
(in-package cl-markdown)

(line-code->stripper *parsing-environment*)
(item-at-1 (line-code->stripper *parsing-environment*)
           'LINE-IS-BLOCKQUOTE-P)

(blockquote-count "> Example:")
(funcall (item-at-1 (line-code->stripper *parsing-environment*)
                    'LINE-IS-BLOCKQUOTE-P)
         "> Example:")

(funcall (item-at-1 (line-code->stripper *parsing-environment*)
                    'LINE-IS-BLOCKQUOTE-P)
         ">     }")
(funcall (item-at-1 (line-code->stripper *parsing-environment*)
                    'LINE-IS-CODE-P)
         "}")

(progn
  (reset *parsing-environment*)
  (insert-item (strippers *parsing-environment*) 
               (item-at-1 (line-code->stripper *parsing-environment*)
                          'LINE-IS-BLOCKQUOTE-P))
  (insert-item (strippers *parsing-environment*) 
               (item-at-1 (line-code->stripper *parsing-environment*)
                    'LINE-IS-CODE-P))
  (insert-item (strippers *parsing-environment*) 
               (item-at-1 (line-code->stripper *parsing-environment*)
                    'LINE-IS-CODE-P))
  (maybe-strip-line ">     }"))

(some-element-p (line-coders (current-chunk-parser))
                (lambda (p) (funcall p "> Example:")))

(labels ((apply-mark (mark rest)
           (cond ((null mark) rest)
                 ((consp mark) `((,(first mark) ,@(apply-mark (rest mark) rest))))
                 (t
                  (error "unhandled case")))))
  (print (apply-mark '(:code :pre) '("hello" "there")))
  (print (apply-mark nil '("hello")))
  (print (apply-mark '(:ul) '("hello"))))

(cl-markdown::render-to-stream
 (cl-markdown:markdown (make-pathname :type "text"
                                      :name "Amps and angle encoding"
                                      :defaults cl-markdown-test::*test-source-directory*))
 :lml2 :none) 

(cl-markdown::render-to-stream
 (cl-markdown:markdown (make-pathname :type "text"
                                      :name "blockquotes with code blocks"
                                      :defaults cl-markdown-test::*test-source-directory*)) :lml2 :none)

(cl-markdown:markdown (make-pathname :type "text"
                                     :name "blockquotes with code blocks"
                                     :defaults cl-markdown-test::*test-source-directory*))

(cl-markdown::chunk-source (make-pathname :type "text"
                                          :name "blockquotes with code blocks"
                                          :defaults cl-markdown-test::*test-source-directory*))

(cl-markdown::chunk-source (make-pathname :type "text"
                                          :name "auto links"
                                          :defaults cl-markdown-test::*test-source-directory*))

"auto links"

(iterate-elements 
 (chunk-post-processors *parsing-environment*)
 (lambda (processor)
   (funcall processor ccl:!)))

(merge-chunks ccl:! ccl:!!)

(make-iterator (chunks ccl:!))
(current-element ccl:!)
(move-forward-p ccl:!)

|#

current-element should error if current-element-p is nil

`code` keeps processing other span things...

warnings: unused links, unfound links, bad structure...

ok - remove extra spaces
  (:P "First " (:STRONG "paragraph") "") -> (:P "First " (:STRONG "paragraph"))

We need to be more careful about the difference between spaces and Tabs 

Gary King 2006-05-01: 

I _think_ I understand the basic structure of the program again

There is oddness all over. Sign of the need for a complete redesign or just focused cleanup

Do we really have enough 'context' to recreate the stream properly? Look at : 

"X
* Item 1
    * sub-item a

    this is part of item 1's description
    > quote this 
    >> and this
    > He said two things?
    >> * thing 1
    >> * and thing 2
    
* item 2"

1. poc: get something simple to HTML / LML2
  a. block structure is confused
  b. output is close... 
2. tests for block structure
3. tests for output
4. PDF
5. extensions

What do we do about ## hello ## (do we remove the ending ##...?)

Where is this?
  finish block structure
  finish spans
  test with Tidy
  handle escapes
  encoding
  to DOM
  to HTML
  to PDF
  extend with footnotes, etc...

Convert output to LML2 style??

When you do want to insert a <br /> break tag using Markdown, you end a 
line with two or more spaces, then type return.

current stripping strategy fails for BQs; must remove layer or won't see what is
  beyond it.

Need smarter "this is a paragraph" logic

Merge lines into long strings...

Note that Markdown formatting syntax is not processed within block-level HTML tags. E.g., you canÕt use Markdown-style *emphasis* inside an HTML block.

Unlike block-level HTML tags, Markdown syntax is processed within span-level tags.

However, inside Markdown code spans and blocks, angle brackets and ampersands are always encoded automatically. This makes it easy to use Markdown to write about HTML code.

We want to handle _(Wiki links), ^(links?), #H(hyperspec), etc

maybe merge paragraphs? merge-paragraphs-p, merge-paragraphs
  would make some kinds of things easier

;;; ---------------------------------------------------------------------------

Why? Efficiency, propaganda, etc.

;;; ---------------------------------------------------------------------------

notes

- could tokenize via whitespace with some escaping.
So *bog* -> '*bog*' but \*bog\* -> '*' 'bog' '*'
No, WS matters to MD; also, HTML is processed within some stuff but not others
Maybe could parse groups of spaces at the start of line specially.

is some funkiness regarding single quotes...

ok - Horizontal Rules: You can produce a horizontal rule tag (<hr />) by placing 
three or more hyphens, asterisks, or underscores on a line by themselves. If 
you wish, you may use spaces between the hyphens or asterisks. Each of the 
following lines will produce a horizontal rule:
ok - when replacing more than once for a single scanner
ok - List markers typically start at the left margin, but may be indented by up to three spaces. List markers must be followed by one or more spaces or a tab.
ok - links: recognize in and out of band link lines and store
  CCPRE
ok - LIFT: need a warning when redefining some tests... at least the class or something?

ok - python "reference" implementation
http://www.freewisdom.org/projects/python-markdown/

ok - test suite:
http://six.pairlist.net/pipermail/markdown-discuss/2004-December/000909.html

ok - html tidying code
http://tidy.sourceforge.net/

ok - I don't see an easy way to do include
  we process {include ...} during span processing and don't know the
    current location.
  we could add more logic to chunk-source, but that seems ungainly
    i.e., use the same syntax _but_ it's realy doing something else
      entirely
      ugh!
  add another mechanism? 
  
the problem with paragraphs in lists is that I assumed that chunks and 
  strippers were coupled. But the paragraph in the list item is a 
  separate chunk but the empty line between them should not have reset 
  the strippers...

  second problem is that I also assumed that the <li> could wrap a single
  chunk. We need a slightly smarter algorithm here on both parse and output
    
    for parse, the level of the included paragraphs needs to be one higher
      ???

    for output, we some way to know to wrap the <li> around things rather
    than having it be part of chunk output. I believe this is somewhat 
    special case for HTML... not happy though

ok - [deftestsuite][] doesn't find the link (add a generic one?)

