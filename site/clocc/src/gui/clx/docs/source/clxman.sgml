<!DOCTYPE clxman SYSTEM 'clxman.dtd'>
<!---------------------------------------------------------------------------->
<!--     Title: Translation of the CLX manual to custom DTD                 -->
<!--   Created: Thu Sep 18 17:25:25 1997                                    -->
<!--    Author: Gilbert Baumann <unk6@rz.uni-karlsruhe.de>                  -->
<!---------------------------------------------------------------------------->

<!-- 
   I am not the author of the material. I only made the
   conversion. The original copyright runs:

                © 1988, 1989 Texas Instruments Incorporated
        
        Permission is granted to any individual or institution to use, copy,
        modify and distribute this document, provided that this complete
        copyright and permission notice is maintained, intact, in all copies
        and supporting documentation.  Texas Instruments Incorporated makes no
        representations about the suitability of this document or the software
        described herein for any purpose. It is provided "as is" without
        express or implied warranty.

   This is a transcription of the CLX manual postscript files into a custom
   DTD, which is a superset of HTML. Due to problems to formulate the defun
   line proper in HTML. I decided to introduce a <defun> tag to be able to
   convert this tag into different HTML tags to suit different browsers.

   To guide similar conversion efforts, let me describe how I did the
   conversion.

   1. First of all you need a good PS to text converter. It is very
      important that this converter produces resonable output. My approach
      was using a little programm hacked only for this purpose. The programm
      is feed with the output of the 'ps2ascii.ps' programm distributed with
      ghostscript. I had enabled the low level output to assemble the lines
      on my own and to perserve the font information. The fonts were already
      converted to <b>, <i>, <code> tags, which saves a lot of work.

   2. Get rid of hyphenation now; it'll get into your way unnecessary. I did
      it with two passes of M-x query-replace-regexp over the text. The
      first to detect a hyphenated word and eliminate the hyphen and the
      #\newline. A second one to eleminate just the newline for words, which
      come with an hyphen initially. This is actually tedious, but so is the
      whole job.

   3. Try to recognize common patterns now. Look at the text
      carefully. Write on the fly macros or hack them in with "c-x (" and
      "c-x )", name them, bind them to function keys. When careful done on
      the fly keyboard macros could be extreme handy. Goal is, that common
      patterns like "Function" at the end of line are recognized and are
      converted into the appropriate <defun> tag header automatically.

   4. Now go into the kitchen and provide you with a big amount of your 
      favorite programming fluid. Then grind through all the text and
      convert it, step by step, paragraph for paragraph. If you recognize
      you type the same command sequences often, bind them to macros. The
      longer I grinded thru the code the faster was I progressing.

   Finally, I needed roughly two days for this work.
-->

<!-- 
  Quirks

  section 5.3 is duplicate
  there are a couple of dead references:
      "paragraph 5.4.7, Fill-Rule and Fill-Style".
      "paragraph 5.4.6, Exposures"
      "*clx-cached-types*"
-->

<!-- 

Markup notes
============

  References

  When you want to refer to some section or table, name the head element
  (H1..H6) or the CAPTION element by specifing a NAME attribute, later refer
  to that element by using the REF element. The REF element reproduces the
  title. 

  Example:

      <H2 name="winattr"> Window Attributes </H2>

      :
      See <REF name="winattr">, for details.
      :
      Refer to <REF name="winattr">.

  ==>

      4.3 WINDOW ATTRIBUTES

      :
      See section 4.3, Window Attributes, for details.
      :
      Refer to section 4.3, Window Attributes.
  

-->

<clxman>
  <head>
    <title>CLX -- Common Lisp X Interface</title>
  </head>
<!--
  <footer>
    <!-- This footer is appended to each generated page - ->
    <div class=footer>
      <hr size=1 noshade>
      © 1988, 1989 Texas Instruments Incorporated, see <ref name=frontmatter> for details.<br>
      Conversion to HTML made by <A HREF="mailto:unk6@rz.uni-karlsruhe.de">Gilbert Baumann</a>.<br>
      Last build: <eval x="*date-string*">.
    </div>
  </footer>
-->
  <body>

<h1 name=frontmatter>Front matter</h1>

<XH1 align=center>
CLX<BR>
Common LISP X Interface<BR>
</XH1>

    <div align=center>© 1988, 1989 Texas Instruments Incorporated</div>
    <p>
      Permission is granted to any individual or institution to use,
      copy, modify and distribute this document, provided that this
      complete copyright and permission notice is maintained, intact,
      in all copies and supporting documentation. Texas Instruments
      Incorporated makes no representations about the suitability of
      this document or the software described herein for any purpose. 
      It is provided "as is" without express or implied warranty.
    </p>

<XH2>Acknowledgments</XH2>

<XH3> Primary Interface Author: </XH3>
Robert W. Scheifler<BR>
&nbsp;<BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MIT Laboratory for Computer Science<BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;545 Technology Square, Room 418<BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cambridge, MA 02139<BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rws@zermatt.lcs.mit.edu<BR>

<XH3> Primary Implementation Author:  </XH3>
LaMott Oren<BR>
&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Texas Instruments<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PO Box 655474, MS 238<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dallas, TX 75265<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oren@csc.ti.com<BR>

<XH3>Design Contributors:  </XH3>
 Dan Cerys, BBN<BR>
 Scott Fahlman, CMU<BR>
 Kerry Kimbrough, Texas Instruments<BR>
 Chris Lindblad, MIT<BR>
 Rob MacLachlan, CMU<BR>
 Mike McMahon, Symbolics<BR>
 David Moon, Symbolics<BR>
 LaMott Oren, Texas Instruments<BR>
 Daniel Weinreb, Symbolics<BR>
 John Wroclawski, MIT<BR>
 Richard Zippel, Symbolics<BR>

<XH3>Documentation Contributors: </XH3>
 Keith Cessna, Texas Instruments<BR>
 Kerry Kimbrough, Texas Instruments<BR>
 Mike Myjak<BR>
 LaMott Oren, Texas Instruments<BR>
 Dan Stenger, Texas Instruments<BR>

<P>
The X Window System is a trademark of MIT.
<P>
UNIX is a trademark of AT&amp;T Bell Laboratories.
<P>
ULTRIX, ULTRIX-32, ULTRIX-32m, ULTRIX-32w, and VAX/VMS are trademarks
of Digital Equipment Corporation.


    <h1 name='introduction_to_clx'>1 Introduction to CLX</h1>

    <h2 name='introduction'>1.1 Introduction</h2>

    <p>
      This manual assumes a basic understanding of window systems and
      the Common Lisp programming language. To provide an introduction
      to the Common Lisp X Interface (CLX) programming, this section
      discusses the following:

    <ul>
      <li> Overview of the X Window System
      <li> Naming and argument conventions
      <li> Programming considerations
    </ul>
    
    <h2>1.2 The X Window System</h2>
    
    <p>
      The X Window System was developed at the Massachusetts Institute
      of Technology (MIT) and first released in 1985. Since then, the
      X Window System has become an industry-standard product
      available on virtually every type of bit-mapped workstation. The
      current version of X, Version 11, has been implemented for
      several different computer architectures, for a wide variety of
      display hardware, and also for many different operating
      systems. X Version 11 represents the fulfillment of the original
      design goals proposed by MIT, as follows:
    
    <dl>
      <dt>Portable
      <dd>
        Support virtually any bitmap display and any interactive input
        device (including keyboards, mice, tablets, joysticks, and
        touch screens). Make it easy to implement the window system on
        different operating systems.
        
      <dt>Device-Independent Applications
      <dd>
        Avoid rewriting, recompiling, or even relinking in order to
        use different display/input hardware. Make it easy for an
        application to work on both monochrome and color hardware.
        
      <dt>Network Transparent
      <dd>
        Let an application run on one computer while using another
        computer's display, even if the other computer has a different
        operating system or hardware architecture.
        
      <dt>Multitasking
      <dd>
        Support multiple applications being displayed simultaneously.
        
      <dt>No User Interface Policy
      <dd>
        Since no one agrees on what constitutes the best user
        interface, make it possible for a broad range of user
        interface styles (or policies) to be implemented, external to
        the window system and to the application programs.
        
      <dt>Cheap Windows
      <dd>
        Windows should be abundant, and ubiquitous. Provide
        overlapping windows and a simple mechanism for window
        hierarchy.
        
      <dt>High-Performance Graphics
      <dd>
        Provide powerful interfaces for synthesizing 2-D images
        (geometric primitives, high-quality text with multiple
        typefaces, and scanned images).
        
      <dt>Extensible
      <dd>
        Include a mechanism for adding new capabilities. Allow
        separate sites to develop independent extensions without
        becoming incompatible with remote applications.
    </dl>
    <p>
      Some of these goals lead directly to the basic X architecture --
      the client-server model.  The basic window system is implemented
      by the X <i>server</i> program. An application program (the
      <i>client</i>) sends window system <i>requests</i> to the X
      server through a reliable two-way byte-stream.
    <p>
      In general, the server and the client can be executing on
      separate host computers, in which case the byte-stream is
      implemented via some network protocol (TCP, DECnet<sup>tm</sup>,
      Chaosnet, and so forth). The X server, which is connected to
      several client programs running concurrently, executes client
      requests in round-robin fashion. The server is responsible for
      drawing client graphics on the display screen and for making
      sure that graphics output to a window stays inside its boundary.
    <p>
      The other primary job of the X server is to channel input from
      the keyboard, pointer, and other input devices back to the
      appropriate client programs. Input arrives at the client
      asynchronously in the form of input <i>events</i> representing
      up/down transitions of keys or pointer buttons, changes in the
      pointer position, and so on. In some cases, a request generates
      a return value (or <i>reply</i>) from the server, which is
      another kind of client input.  Replies and input events are
      received via the same byte-stream connecting the client with the
      server.
      
    <h3>1.2.1 Windows</h3>
    
    <p>
      The X Window System supports one or more screens containing
      overlapping windows and subwindows. A <i>screen</i> is a
      physical monitor and hardware, which can be either color or
      black and white. There can be multiple screens per display
      workstation. A single server can provide display services for
      any number of screens. A set of screens for a single user with
      one keyboard and one mouse is called a <i>display</i>.
    <p>
      All windows in an X server are arranged in a strict
      hierarchy. At the top of the hierarchy are the <i>root
      windows</i>, which cover each of the display screens. Each root
      window is either partially or completely covered by child
      windows. All windows, except for root windows, have parents. Any
      window can in turn have its own children. In this way, an
      application program can create a window tree of arbitrary depth
      on each screen.
    <p>
      A child window can be larger than its parent. That is, part or
      all of the child window can extend beyond the boundaries of the
      parent. However, all output to a window is clipped by the
      boundaries of its parent window. If several children of a window
      have overlapping locations, one of the children is considered to
      be on top of/or raised over the others, <i>obscuring</i>
      them. Window output to areas that are covered by other windows
      is suppressed.
    <p>
      A window has a border that is zero or more pixels in width and
      can be any pattern (pixmap) or solid color. A window usually has
      a background pattern that is drawn by the X server. Each window
      has its own coordinate system. Child windows obscure their
      parents unless the child windows have no background. Graphics
      operations in the parent window are usually clipped by the
      children.
    <p>
      X also provides objects called <i>pixmaps</i> for off-screen
      storage of graphics. Single-plane pixmaps (that is, of depth 1)
      are sometimes referred to as <i>bitmaps</i>. Both pixmaps and
      windows can be used interchangeably in most graphics
      functions. Pixmaps are also used in various graphics operations
      to define patterns, or <i>tiles</i>. Windows and pixmaps
      together are referred to as <i>drawables</i>.
      
    <h3>1.2.2 Input Events</h3>
    
    <p>
      The X input mechanism is conceptually simple yet quite
      powerful. Most events are attached to a particular window (that
      is, contain an identifier for the window receiving the event). A
      client program can receive multiple window input streams, all
      multiplexed over the single byte-stream connection to the
      server.
    <p>
      Clients can tailor their input by expressing interest in only
      certain event types. The server uses special event types to send
      important messages to the client. For example, the client can
      elect to receive an <b>:enter-notify</b> event when the pointer
      cursor moves into a certain window. Another vital message from
      the server is an <b>:exposure</b> event. This is a signal to the
      client indicating that at least some portion of the window has
      suddenly become visible (perhaps the user moved another window
      which had been overlapping it).  The client is then responsible
      for doing what is necessary to redisplay the window's
      image. Client programs must be prepared to regenerate the
      contents of windows in this way on demand.
    <p>
      Input is also subject to policy decisions about which client
      window receives keyboard and pointer events. Since the pointer
      is free to roam between windows, just clicking on a window is
      often enough to send a pointer event to that window. Keyboard
      events, however, must go to a keyboard focus window which has to
      be designated in some other way.  Usually, the arbiter of such
      input management policy is a program called the <i>window</i>
      <i>manager</i>. The window manager gives the human user a way to
      make a window the keyboard focus, to manage the layout of
      windows on the screen, to represent windows with icons, and so
      forth. In fact, the window manager client determines most of the
      so-called look and feel of the X Window System.
      
    <h2>1.3 A Quick Tour of CLX</h2>
    
    <p>
      The X Window System is defined by the X Window System Protocol
      Specification, a detailed description of the encoding and the
      meaning of requests and events sent between a client and a
      server. This standard protocol does not depend on any particular
      programming language. As a result, each programming language
      must define its own functional interface for using the X
      protocol. The standard X interface used by Common Lisp
      programmers is called CLX. CLX is a set of data types,
      functions, and macros which allow a Common Lisp client program
      to interact with an X server to send requests and to receive
      input events and replies.
    <p>
      For the most part, CLX functions are closely tied to the
      underlying requests in the X protocol. Many CLX functions simply
      add requests to an output buffer. These requests later execute
      asynchronously on the X display server. However, some functions
      of CLX lie outside the scope of the protocol--for example,
      reading events and managing a clientside event queue. CLX is
      also responsible for important batching and caching tasks that
      minimize network communication.
    <p>
      The following paragraphs show an example of a CLX client
      program. All CLX functions and macros are shown in upper
      case. Note that some of the terms used are unique to X, while
      other terms that are common to other window systems have
      different meanings in X. It may be helpful to refer to the
      glossary when you are uncertain of a term's meaning in the
      context of the X Window System.
      
    <h3>1.3.1 A Simple Menu</h3>
    
    <p>
      The example client program creates and displays a simple pop-up
      menu consisting of a column of strings--a title string followed
      by selectable menu item strings. The implementation uses one
      window to represent the entire menu, plus a set of subwindows,
      one for each menu item. Here is the definition of a structure
      which represents such a menu.
    <pre>
(defstruct (menu)
   "A simple menu of text strings."
   (title "Choose an item:")
   item-alist                   ;((item-window item-string))
   window
   gcontext
   width
   title-width
   item-width
   item-height
   (geometry-changed-p t))      ;nil if unchanged since displayed
    </pre>
    
    <p>
      The <code>window</code> slot will contain the <b>window</b> object that
      represents the menu. The <code>item-</code> <code>alist</code> represents
      the relationship between the menu items and their associated
      subwindows. Each entry in <code>item-alist</code> is a list whose first
      element is a (sub)window object and whose second element is the
      corresponding item string. A <b>window</b> object is an instance of a
      CLX-defined data type which represents X windows. A <b>window</b> object
      actually carries two pieces of information: an X window ID integer and a
      <b>display</b> object. A <b>display</b> is another CLX-defined data type
      that represents a connection to a specific X display server. The
      <code>gcontext</code> slot contains an instance of a CLX data type known
      as a <i>graphics</i> <i>context</i>. A graphics context is a set of
      display attribute values, such as foreground color, fill style, line
      style, text font, and so forth. Each X graphics request (and hence each
      CLX graphics function call) must supply a graphics context to use in
      displaying the request.  The menu's <code>gcontext</code> will thus hold
      all of the attribute values used during menu display.
    <p>
      The first thing to do is make an instance of a <code>menu</code> object:
      
    <pre>
(defun create-menu (parent-window text-color background-color text-font)
   (make-menu
      ;; Create menu graphics context
      :gcontext (CREATE-GCONTEXT :drawable   parent-window
                                 :foreground text-color
                                 :background background-color
                                 :font       text-font)

      ;; Create menu window
      :window    (CREATE-WINDOW
                  :parent            parent-window
                  :class             :input-output
                  :x                 0                     ;temporary value
                  :y                 0                     ;temporary value
                  :width             16                    ;temporary value
                  :height            16                    ;temporary value
                  :border-width 2  
                  :border            text-color
                  :background        background-color
                  :save-under        :on
                  :override-redirect :on                   ;override window mgr when positioning
                  :event-mask        (MAKE-EVENT-MASK :leave-window :exposure))))
    </pre>
    
    <p>
      <b>create-window</b> is one of the most important CLX functions, since
      it creates and returns a <b>window</b> object. Several of its options
      are shown here. The default window class is <b>:input-output</b>, but X
      provides for <b>:input-only</b> windows, too. Every window must have a
      parent window, except for a system-defined <i>root window</i>, which
      represents an entire display screen. The <b>:event-mask</b> keyword
      value, a CLX <b>event-mask</b> data type, says that an input event will
      be received for the menu window when the window is exposed and also when
      the pointer cursor leaves the window. The window border is a
      pattern-filled or (as in this case) a solid-colored boundary which is
      maintained automatically by the X server; a client cannot draw in a
      window's border, since all graphics requests are relative to the origin
      (upper-left corner) of the window's interior and are clipped by the
      server to this inside region. Turning on the <b>:save-under</b> option
      is a hint to the X server that, when this window is made visible, it may
      be more efficient to save the pixels it obscures, rather than require
      several client programs to refresh their windows when the pop-up menu
      disappears. This is a way to work around X's client-managed refresh
      policy when only a small amount of screen space is needed temporarily.
      
    <p>
      Why is <b>:override-redirect</b> turned on for the menu window? This is
      actually a little unusual, because it prevents any window manager client
      from <i>redirecting</i> the position of the menu when it is popped
      up. Remember that the window manager represents the user's policy for
      controlling the positions of his windows, so this kind of redirection is
      ordinarily correct. However, in this case, as a favor to the user, the
      menu avoids redirection in order to pop up the menu at a very specific
      location; that is, under the pointer cursor.
      
    <p>
      What about the item subwindows? The <code>menu-set-item-list</code>
      function in the following example creates them whenever the menu's item
      list is changed. The upper-left x and y coordinates and the width and
      height are not important yet, because they are computed just before the
      menu is displayed. This function also calls <b>create-window</b>,
      demonstrating the equal treatment of parent and children windows in the
      X window hierarchy.
      
    <pre>(defun menu-set-item-list (menu &amp;rest item-strings)
  ;; Assume the new items will change the menu's width and height
  (setf (menu-geometry-changed-p menu) t)

  ;; Destroy any existing item windows
  (dolist (item (menu-item-alist menu))
    (DESTROY-WINDOW (first item)))
  
  ;; Add (item-window item-string) elements to item-alist
  (setf (menu-item-alist menu)
        (let (alist)
          (dolist (item item-strings (nreverse alist))
            (push (list (CREATE-WINDOW
                         :parent       (menu-window menu)
                         :x            0           ;temporary value
                         :y            0           ;temporary value
                         :width        16          ;temporary value
                         :height       16          ;temporary value
                         :background   (GCONTEXT-BACKGROUND (menu-gcontext menu))
                         :event-mask   (MAKE-EVENT-MASK :enter-window
                                                        :leave-window
                                                        :button-press
                                                        :button-release))
                        item)
                  alist)))))</pre>
    
    <h3>1.3.2 Displaying the Menu</h3>
    
    <p>
      The <code>menu-recompute-geometry</code> function (shown in the
      following example) handles the job of calculating the size of the menu,
      based on its current item list and its current text font. CLX provides a
      way to inquire the geometrical properties of a font object (for example,
      its ascent and descent from the baseline) and also a <b>text-extents</b>
      function. <b>text-extents</b> returns the geometry of a given string as
      displayed in a given font. Notice the use of the <b>with-state</b> macro
      when setting a window's geometry attributes. CLX strives to preserve the
      familiar <b>setf</b> style of accessing individual window attributes,
      even though an attribute access actually involves sending a request to a
      (possibly remote) server and/or waiting for a reply. <b>with-state</b>
      tells CLX to batch together all read and write accesses to a given
      window, using a local cache to minimize the number of server
      requests. This CLX feature can result in a dramatic improvement in
      client performance without burdening the programmer interface.
      
    <p>
      <code>menu-recompute-geometry</code> causes all the item subwindows to
      become <i>mapped</i>.  Mapping a window means attempting to make it
      visible on the screen. However, a subwindow will not actually be
      <i>visible</i> until it and all of its ancestors are mapped. Even then,
      another window might be covering up the subwindow.
      
    <pre>
(defun menu-recompute-geometry (menu)
  (when (menu-geometry-changed-p menu)
    (let* ((menu-font   (GCONTEXT-FONT (menu-gcontext menu)))
           (title-width (TEXT-EXTENTS menu-font (menu-title menu)))
           (item-height (+ (FONT-ASCENT menu-font)
                           (FONT-DESCENT menu-font)
                           *menu-item-margin*))
           (item-width     0)
           (items          (menu-item-alist menu))
           menu-width)

      ;; Find max item string width
      (setf item-width
            (+ *menu-item-margin*
               (dolist (next-item items item-width)
                 (setf item-width (max item-width
                                       (TEXT-EXTENTS menu-font (second next-item)))))))

      ;; Compute final menu width, taking margins into account
      (setf menu-width (max title-width (+ item-width *menu-item-margin*)))
      (let ((window     (menu-window menu)))

        ;; Update width and height of menu window
        (WITH-STATE (window)
                    (setf (DRAWABLE-WIDTH      window) menu-width
                          (DRAWABLE-HEIGHT window) (* (1+ (length items)) item-height)))

        ;; Update width, height, position of item         windows
        (let ((item-left         (round (- menu-width item-width) 2))
              (next-item-top (- item-height (round *menu-item-margin* 2))))
          (dolist (next-item items)
            (let ((window (first next-item)))
              (WITH-STATE (window)
                          (setf (DRAWABLE-HEIGHT window) item-height
                                (DRAWABLE-WIDTH      window) item-width
                                (DRAWABLE-X          window) item-left
                                (DRAWABLE-Y          window) next-item-top)))
            (incf next-item-top item-height))))

      ;; Map all item windows
      (MAP-SUBWINDOWS (menu-window menu))

      ;; Save item geometry
      (setf (menu-item-width menu)         item-width
            (menu-item-height menu)        item-height
            (menu-width menu)              menu-width
            (menu-title-width menu)        title-width
            (menu-geometry-changed-p menu) nil))))
    </pre>
    
    <p>
      Of course, the sample client must know how to draw/redraw the menu and
      its items, so the function <code>menu-refresh</code> is defined next to
      handle that task (shown in the following example). Note that the
      location of window output is given relative to the window
      origin. Windows and subwindows have different coordinate systems. The
      location of the origin (upper-left corner) of a subwindow's coordinate
      system is given with respect to its parent window's coordinate
      system. Negative coordinates are valid, although only output to the
      +x/+y quadrant of a window's coordinate system will ever be visible.
      
    <pre>
(defun menu-refresh (menu)
  (let* ((gcontext   (menu-gcontext menu))
         (baseline-y (FONT-ASCENT (GCONTEXT-FONT gcontext))))
    ;; Show title centered in "reverse-video"
    (let ((fg (GCONTEXT-BACKGROUND gcontext))
          (bg (GCONTEXT-FOREGROUND gcontext)))
      (WITH-GCONTEXT (gcontext :foreground fg :background bg)
                     (DRAW-IMAGE-GLYPHS
                      (menu-window menu)
                      gcontext
                      (round (- (menu-width menu)
                                (menu-title-width menu)) 2)     ;start x
                      baseline-y                                ;start y
                      (menu-title menu))))

    ;; Show each menu item (position is relative to item window)
    (let ((box-margin (round *menu-item-margin* 2)))
      (dolist (item (menu-item-alist menu))
        (DRAW-IMAGE-GLYPHS
         (first item) gcontext
         box-margin                                             ;start x
         (+ baseline-y box-margin)                              ;start y
         (second item))))))
    </pre>
    
    <p>
      <b>with-gcontext</b> is a CLX macro that allows you temporarily to
      modify a graphics context within the dynamic scope of the macro
      body. <b>draw-image-glyphs</b> is a CLX text drawing function which
      produces a terminal-like rendering: foreground character on a background
      block. (More sophisticated text rendering functions are also available.)
      The strange use of <i>glyphs</i> instead of <i>string</i> here actually
      highlights an important fact: X and Common Lisp have totally different
      concepts of a character. A Common Lisp character is an object whose
      implementation can comprehend a vast universe of text complexities
      (typefaces, type styles, international character sets, symbols, and so
      forth). However, to X, a string is just a sequence of integer indexes
      into the array of bitmaps represented by a CLX font object. In general,
      <b>draw-image-glyphs</b>, <b>text-extents</b>, and other CLX text
      functions accept a <b>:translate</b> keyword argument. Its value is a
      function which translates the characters of a string argument into the
      appropriate font-and-index pairs needed by CLX. This example relies upon
      the default translation function, which simply uses <b>char-code</b> to
      compute an index into the current font.
      
    <h3>1.3.3 Menu Input</h3>
    
    <p>
      Now that a menu can be displayed, the sample client program must define
      how the menu will process user input. The <code>menu-choose</code>
      function (shown in the following example) has the classic structure of
      an X client program. First, do some initialization (for example, present
      the menu at a given location). Then, enter an input event loop.  Read an
      input event, process it, and repeat the loop until a termination event
      is received.  The <b>event-case</b> macro continues reading an event
      from the menu window's display object until one of its clauses returns
      non-<b>nil</b>. These clauses specify the action to be taken for each
      event type and also bind values from the event report to local
      variables, such as the <b>event-window</b> receiving the event. Notice
      that the <b>:force-output-p</b> option is enabled, causing
      <b>event-case</b> to begin by sending any client requests which CLX has
      not yet output to the server. To improve performance, CLX quietly queues
      up requests and periodically sends them off in a batch. However, in an
      interactive feedback loop such as this, it is important to keep the
      display crisply up-to-date.
      
    <pre>
(defun menu-choose (menu x y)
  ;; Display the menu so that first item is at x,y.
  (menu-present menu x y)

  (let ((items (menu-item-alist menu))
        (mw    (menu-window menu))
        selected-item)

    ;; Event processing loop
    (do () (selected-item)
      (EVENT-CASE ((DRAWABLE-DISPLAY mw) :force-output-p t)
                  (:exposure
                   (count)
                   ;; Discard all but final :exposure then display the menu
                   (when (zerop count) (menu-refresh menu))
                   t)

                  (:button-release
                   (event-window)
                   ;;Select an item
                   (setf selected-item (second (assoc event-window items)))
                   t)

                  (:enter-notify
                   (window)
                   ;;Highlight an item
                   (menu-highlight-item menu (find window items :key #'first))
                   t)

                  (:leave-notify
                   (window kind)
                   (if (eql mw window)
                       ;; Quit if pointer moved out of main menu window
                       (setf selected-item (when (eq kind :ancestor) :none))
                     ;; Otherwise, unhighlight the item window left
                     (menu-unhighlight-item menu (find window items :key #'first)))
                   t)

                  (otherwise
                   ()
                   ;;Ignore and discard any other event
                   t)))

    ;; Erase the menu
    (UNMAP-WINDOW mw)

    ;; Return selected item string, if any
    (unless (eq selected-item :none) selected-item)))
    </pre>
    
    <p>
      The event loop in <code>menu-choose</code> demonstrates an idiom used in
      all X programs: the contents of a window are displayed (in this case, by
      calling <code>menu-refresh</code>) only when an <b>:exposure</b> event
      is received, signaling that the server has actually made the window
      <i>viewable</i>. The handling of <b>:exposure</b> in
      <code>menu-choose</code> also implements a little trick for improving
      efficiency. In general, when a window is exposed after being previously
      obscured (perhaps only partially), the server is free to send several
      <b>:exposure</b> events, one for each rectangular tile of the exposed
      region. For small windows like this menu, it is not worth the trouble to
      redraw the image one tile at a time. So the code above just ignores all
      but the last tile exposure and redraws everything in one call to
      <code>menu-refresh</code>.
      
    <h3>1.3.4 The Main Program</h3>
    
    <p>
      After all the preceding build-up and the other functions referenced (but
      not shown here) have been implemented, the code for the main client
      program is very small.
      
    <pre>
(defun just-say-lisp (host &amp;optional (font-name "fg-16"))
  (let* ((display   (OPEN-DISPLAY host))
         (screen    (first (DISPLAY-ROOTS display)))
         (fg-color  (SCREEN-BLACK-PIXEL screen))
         (bg-color  (SCREEN-WHITE-PIXEL screen))
         (nice-font (OPEN-FONT display font-name))

         ;; Create a menu as a child of the root window.
         (a-menu       (create-menu (SCREEN-ROOT screen)
                                    fg-color bg-color nice-font)))

    (setf (menu-title a-menu) "Please pick your favorite language:")
    (menu-set-item-list a-menu "Fortran" "APL" "Forth" "Lisp")

    ;; Bedevil the user until he picks a nice programming language
    (unwind-protect
        (loop
          ;; Determine the current root window position of the pointer
          (multiple-value-bind (x y) (QUERY-POINTER (SCREEN-ROOT screen))

            (let ((choice (menu-choose a-menu x y)))
              (when (string-equal "Lisp" choice)
                (return)))))

      (CLOSE-DISPLAY display))))
    </pre>
    
    <p>
      Note that the main program event loop lies in the body of an
      <b>unwind-protect</b> form. This is a good programming technique
      because, without this protection, an unexpected error could cause the
      program to terminate without freeing the <i>server resources</i> it has
      created.  Server resources are CLX objects which refer to objects
      actually stored on the X server.  Examples of these are <b>window</b>,
      <b>font</b>, <b>pixmap</b>, <b>cursor</b>, <b>colormap</b>, and
      <b>gcontext</b> objects.  These server resources are created and
      destroyed by user requests. Server resources created by a client are
      also destroyed when its display connection is closed. If client
      resources are repeatedly created without being destroyed, then the
      server will eventually run out of memory and fail.
      
    <p>
      Most server resources are potentially sharable between applications. In
      fact, windows are manipulated explicitly by window manager
      programs. Fonts and cursors are typically shared automatically since the
      X server loads and unloads font storage as needed.  <b>gcontext</b>
      objects are not ordinarily shared between client applications.
      
    <h3>1.3.5 Debugging With CLX</h3>
    
    <p>
      Typically, most CLX programs do not need to control the buffering of
      output requests directly. However, CLX programmers need to be aware of
      the asynchronous nature of client-server communication. It may be
      convenient to control the CLX output buffer more directly, especially
      during debugging.
      
    <p>
      A client that wants a request to execute immediately instead of
      asynchronously can follow it with a call to
      <b>display-force-output</b>. This function <i>blocks</i> (does not
      return) until all previously buffered output requests have been
      sent. Otherwise, the output buffer is always flushed by a call to any
      function which returns a value from the server or which waits for input
      (for example, <b>get-property</b>). Certain output requests can cause
      input events to be sent. For example, <b>map-window</b> can cause
      <b>:exposure</b> events to be sent.  Synchronizing output with the
      resulting input can be done with the <b>display-finish-output</b>
      function. This function blocks until all previously buffered output has
      been sent and all resulting input events have been received.
      
    <p>
      Functions that return information from the server block until an
      explicit reply is received or an error occurs. If a nonblocking call
      results in an error, the error is generally not reported until
      later. All errors (synchronous and asynchronous) are processed by
      calling an error handler defined for the display. If the handler is a
      sequence it is expected to contain handler functions specific to each
      error. The error code is used to index the sequence, fetching the
      appropriate handler. Any results returned by the handler are ignored
      since it is assumed that the handler either takes care of the error
      completely, or else signals.
      
    <h2>1.4 Naming and Argument Conventions</h2>
    
    <p>
      Throughout CLX, a number of conventions for naming and syntax of the CLX
      functions have been followed. These conventions are intended to make the
      syntax of the functions more predictable.
      
    <p>
      The major naming conventions are as follows:
      
    <ul>
      <li> To better differentiate the CLX symbols from other symbols, they
        have all been placed in the package XLIB. External symbols have been
        explicitly exported.
        
      <li> The <i>display</i> argument, where used, is always first in the
        argument list.
        
      <li> All server resource objects, where used, occur at the beginning of
        the argument list, immediately after the display variable.
        
      <li> When a graphics context (<i>gcontext</i>) is present together with
        another type of server resource (most commonly, a <i>drawable</i>), the
        graphics context occurs in the argument list after the other server
        resource. Drawables out rank all other server resources.
        
      <li> Source arguments always precede the destination arguments in the
        argument list.
        
      <li> The <i>x</i> argument always precedes the <i>y</i> argument in the
        argument list.
        
      <li> The <i>width</i> argument always precedes the <i>height</i>
        argument in the argument list.
        
      <li> Where the <i>x</i>, <i>y</i>, <i>width</i> and <i>height</i>
        arguments are used together, the <i>x</i> and <i>y</i> arguments always
        precede the <i>width</i> and <i>height</i> arguments.
        
      <li> Where a <i>mask</i> is accompanied with a <i>structure</i>, the
        mask always precedes the structure in the argument list.
    </ul>
    
    <h2>1.5 Programming Considerations</h2>
    
    <p>
      The major programming considerations are as follows:
      
    <ul>
      <li> Keyboards are the greatest variable between different
        manufacturer's workstations. If you want your program to be portable,
        you should be particularly conservative here.
        
      <li> Many display systems have limited amounts of off-screen memory. If
        you can, you should minimize use of pixmaps and backing store.
        
      <li> The user should have control of his screen real-estate. Therefore,
        you should write your applications to react to window management, rather
        than presume control of the entire screen. What you do inside of your
        top level window, however, is up to your application.
        
      <li> Coordinates and sizes in X are actually 16-bit quantities. They
        usually are declared as an <b>int16</b> in the functions. Values larger
        than 16 bits can be truncated silently.  Sizes (width and height) are
        unsigned quantities.
        
      <li> The types <b>color</b>, <b>colormap</b>, <b>cursor</b>,
        <b>display</b>, <b>font</b>, <b>gcontext</b>, <b>pixmap</b>,
        <b>screen</b>, and <b>window</b> are defined solely by a functional
        interface. Even though they are treated like structures in this
        document, it is not specified whether they are implemented as structures
        or classes. Although some interfaces are described as functions, they
        are not required to be defined using <b>defun.</b> (It is a requirement
        that they be functions as opposed to macros or special forms.)
    </ul>
    
    <h2 name=datatypes>1.6 Data Types</h2>    
    
    <p>
      The following are some data type definitions that are commonly used in
      CLX function definitions.
      
    <defun>
      <name> alist
      <ll>   (<i>key-type-and-name datum-type-and-name</i>) <b>'list</b>
      <kind> Type
      <desc>
        <p>
          <b>alist</b> defines an association list. An association list is a
          sequence, containing zero or more repetitions of the given elements
          with each of the elements expressed as (<i>type</i> <i>name</i>).
    </defun>
    
    <defun>
      <name> angle
      <ll>   `(<b>number</b> ,(* -2pi) ,(* 2pi))
      <kind> Type
      <desc>
        <p>
          <b>angle</b> defines an angle in units of radians and is bounded by
          (-2%pi;) and (2%pi;). Note that we are explicitly using a
          different angle representation than what is actually transmitted in
          the protocol.
    </defun>
    
    <defun>
      <name> arc-seq
      <ll>   '(<b>repeat-seq</b> (<b>int16</b>&nbsp;<i>x</i>) (<b>int16</b>&nbsp;<i>y</i>) 
        (<b>card16</b>&nbsp;<i>width</i>) (<b>card16</b>&nbsp;<i>height</i>) 
        (<b>angle</b>&nbsp;<i>angle1</i>) (<b>angle</b>&nbsp;<i>angle2</i>))
      <kind> Type
      <desc>
        <p>
          <b>arc-seq</b> defines a six-tuple sequence of the form 
          (<i>x</i>, <i>y</i>, <i>width</i>, <i>height</i>, <i>angle1</i>, <i>angle2</i>).
          The points <i>x</i> and <i>y</i> are signed, 16-bit quantities with a
          range from -32,768 to 32,767. The <i>width</i> and <i>height</i>
          values are unsigned, 16-bit quantities and range from 0 to 65,535.
          <i>angle1</i> and <i>angle2</i> are in units of radians, and bounded
          by (-2%pi;) and (2%pi;).
    </defun>
    
    <defun>
      <name> array-index
      <ll>   `(<b>integer</b> 0 ,<i>array-dimension-limit</i>)
      <kind> Type
      <desc>
        <p>
          <b>array-index</b> defines a type which is a subtype of the integers
          and can be used to describe all variables that can be array
          indices. The range is inclusive because start and end array index
          specifiers can be one (1) past the end.
    </defun>
    
    <defun>
      <name> bit-gravity
      <ll>   '<code>(</code><b>member</b> <i>gravity*</i>)
      <kind> Type
      <desc>
        <p>
          A keyword that specifies which region of a window should be retained
          when the window is resized.
        <p>
          <i>gravity</i> -- One of the following:
        <menu>
          <li><b>:center</b>        <li><b>:north</b>            <li><b>:south</b>            <li><b>:static</b>
          <li><b>:east</b>          <li><b>:north-east</b>       <li><b>:south-east :west</b>
          <li><b>:forget</b>        <li><b>:north-west</b>       <li><b>:south-west</b>
        </menu>
        <p>
          If a window is reconfigured without changing its inside width or
          height, then the contents of the window moves with the window and are
          not lost. Otherwise, the contents of a resized window are either moved
          or lost, depending on its bit-gravity attribute. See
          <b>window-bit-gravity</b>, in <REF name="winattr">, for
          additional information.
    </defun>
    
    <defun>
      <name> bitmap
      <ll>   '(<b>array bit</b> (* *))
      <kind> Type
      <desc>
        <p>
          Specifies a two-dimensional array of bits.
    </defun>
    
    <defun>
      <name> bitmap-format
      <kind> Structure
      <desc>
        <p>
          A structure that describes the storage format of a bitmap.
        <p>
          The <b>bitmap-format</b> structure contains slots for <b>unit</b>,
          <b>pad</b>, and <b>lsb-first-p</b>. The <b>unit</b> member indicates
          the unit of increments used to maintain the bitmap data. The units
          available for use are 8, 16, or 32 bits. The <b>pad</b> member
          indicates how many bits are needed to pad the left edge of the
          scan-line. The <b>lsb-first-p</b> member is a predicate which
          indicates the ordering of bits with the bitmap unit.
    </defun>
    
    <defun>
      <name> unit
      <kind> Slot of <b>bitmap-format</b>
      <desc>
        <p>
          Type: (<b>member</b> 8 16 32).
        <p>
          The size of a contiguous grouping of bits, which can be 8, 16, or
          32. The default is 8.
    </defun>
    
    <defun>
      <name> pad
      <kind> Slot of <b>bitmap-format</b>
      <desc>
        <p>
          Type: (<b>member</b> 8 16 32).
        <p>
          The number of bits to left-pad the scan-line, which can be 8, 16, or
          32. The default is 8.
    </defun>
    
    <defun>
      <name> lsb-first-p
      <kind> Slot of <b>bitmap-format</b>
      <desc>
        <p>
          Type: <b>boolean</b>.
        <p>
          A predicate indicating whether the least significant bit comes first
          (<b>true</b>) or not (<b>nil</b>).
    </defun>
    
    <defun>
      <name> boolean
      <ll>   '(<b>or nil</b> (<b>not nil</b>))
      <kind> Type
      <desc>
        <p>
          <b>boolean</b> defines a type which is all inclusive. It is used for
          variables that can take on a true (non-<b>nil</b>) or false
          (<b>nil</b>) value.
    </defun>
    
    <defun>
      <name> boole-constant
      <ll>   `(<b>member</b> <i>value</i>*)
      <kind> Type
      <desc>
        <p>
          <b>boole-constant</b> defines a type that is a set of the values
          associated with the 16 boolean operation-code constants for the Common
          Lisp language. It is used for the set of allowed source and
          destination combination functions in a graphics context.
        <p>
          <i>value</i> -- One of the following:
        <menu>
          <li><b>boole-1</b>             <li><b>boole-c1</b>          <li><b>boole-nand</b>        <li><b>boole-xor</b>
          <li><b>boole-2</b>             <li><b>boole-c2</b>          <li><b>boole-nor</b>
          <li><b>boole-and</b>           <li><b>boole-clr</b>         <li><b>boole-orc1</b>
          <li><b>boole-andc1</b>         <li><b>boole-eqv</b>         <li><b>boole-orc2</b>
          <li><b>boole-andc2</b>         <li><b>boole-ior</b>         <li><b>boole-set</b>
        </menu>
    </defun>
    
    <defun>
      <name> card8
      <ll>   '(<b>unsigned-byte</b> 8)
      <kind> Type
      <desc>
        <p>
          An unsigned integer value that is a maximum of eight bits long. This
          gives a number of this type a range from 0 to 255.
    </defun>
    
    <defun>
      <name> card16
      <ll>   '(<b>unsigned-byte</b> 16)
      <kind> Type
      <desc>
        <p>
          An unsigned integer value that is a maximum of 16 bits long. This
          gives a number of this type a range from 0 to 65,535.
    </defun>
    
    <defun>
      <name> card29
      <ll>   '(<b>unsigned-byte</b> 29)
      <kind> Type
      <desc>
        <p>
          An unsigned integer value that is a maximum of 29 bits long. This
          gives a number of this type a range from 0 to 536,870,911.
    </defun>
    
    <defun>
      <name> card32
      <ll>   '(<b>unsigned-byte</b> 32)
      <kind> Type
      <desc>
        <p>
          An unsigned integer value that is a maximum of 32 bits long. This
          gives a number of this type a range from 0 to 4,294,967,295.
    </defun>
    
    <defun>
      <name> color
      <ll>   '(<b>satisfies color-p</b>)
      <kind> Type
      <desc>
        <p>
          A <b>color</b>. See <ref name=color-functions>, for additional
          information.
    </defun>
    
    <defun>
      <name> colormap
      <ll>   '(<b>satisfies colormap-p</b>)
      <kind> Type
      <desc>
        <p>
          A <b>colormap</b>. See <ref name=colormap-functions>, for
          additional information.
    </defun>
    
    <defun>
      <name> cursor
      <ll>   '(<b>satisfies cursor-p</b>)
      <kind> Type
      <desc>
        <p>
          A <b>cursor</b>. See <ref name=cursors>, for additional information.
    </defun>
    
    <defun>
      <name> device-event-mask
      <ll>   '(<b>or mask32</b> (<b>list device-event-mask-class</b>))
      <kind> Type
      <desc>
        <p>
          Provides a way to specify a set of bits for an event bitmask. Two ways
          of specifying the bits are allowed: by setting the event bits in a 32
          bit mask, or by listing the keyword names of the device related event
          bits in a list.
    </defun>
    
    <defun>
      <name> device-event-mask-class
      <ll>   '<code>(</code><b>member</b> <i>event*</i>)
      <kind> Type
      <desc>
        <p>
          A keyword name, for a device related event, that corresponds to a
          particular bit in an event bitmask. The set of names is a subset of
          the names in the type <b>event-mask-class</b>.
        <p>
          <i>event</i> -- One of the following:
        <menu>
          <li><b>:button-1-motion</b>         <li><b>:button-motion</b>
          <li><b>:button-2-motion</b>         <li><b>:button-press</b>
          <li><b>:button-3-motion</b>         <li><b>:key-press</b>
          <li><b>:button-4-motion</b>         <li><b>:key-release</b>
          <li><b>:button-5-motion</b>         <li><b>:pointer-motion</b>
        </menu>
    </defun>
    
    <defun>
      <name> display
      <ll>   '(<b>satisfies display-p</b>)
      <kind> Type
      <desc>
        <p>
          A connection to an X server. See <ref name=displays>, for additional
          information.
    </defun>
    
    <defun>
      <name> drawable
      <ll>   '(<b>or window pixmap</b>)
      <kind> Type
      <desc>
        <p>
          Both <b>windows</b> and <b>pixmaps</b> can be used as sources and
          destinations in graphics operations. <b>windows</b> and <b>pixmaps</b>
          together are known as <i>drawables</i>. However, an <b>:input-only</b>
          window cannot be used as a source or destination in a graphics
          operation.
    </defun>
    
    <defun>
      <name> draw-direction
      <ll>   '(<b>member :left-to-right :right-to-left</b>)
      <kind> Type
      <desc>
        <p>
          Defines a list of rotation directions for drawing arcs and
          fonts. <b>draw-direction</b> can have the values of
          <b>:left-to-right</b> or <b>:right-to-left</b>.
    </defun>
    
    <defun>
      <name> error-key
      <ll>   '(<b>member</b> <i>error</i>*)
      <kind> Type
      <desc>
        <p>
          Defines a list of all predefined errors. All errors (synchronous and
          asynchronous) are processed by calling an error handler in the
          display. The handler is called with the display as the first argument
          and the error-key as its second argument.
        <p>
          <i>error</i> -- One of the following:
        <menu>
          <li><b>:access</b>         <li><b>:drawable</b>           <li><b>:implementation</b>       <li><b>:value</b>
          <li><b>:alloc</b>          <li><b>:font</b>               <li><b>:length</b>               <li><b>:window</b>
          <li><b>:atom</b>           <li><b>:gcontext</b>           <li><b>:match</b>
          <li><b>:colormap</b>       <li><b>:id-choice</b>          <li><b>:name</b>
          <li><b>:cursor</b>         <li><b>:illegal-request</b>    <li><b>:pixmap</b>
        </menu>
    </defun>
    
    <defun>
      <name> event-key
      <ll>   '(<b>member</b> <i>event-type</i>*)
      <kind> Type
      <desc>
        <p>
          Defines a list that specifies all predefined event-types. Clients are
          informed of information asynchronously by means of events. These
          events can be either asynchronously generated from devices or
          generated as side effects of client requests.
        <p>
          <i>event-type</i> -- One of the following:
        <menu>
          <li><b>:button-press</b>            <li><b>:exposure</b>                  <li><b>:motion-notify</b>
          <li><b>:button-release</b>          <li><b>:focus-in</b>                  <li><b>:no-exposure</b>
          <li><b>:circulate-notify</b>        <li><b>:focus-out</b>                 <li><b>:property-notify</b>
          <li><b>:circulate-request</b>       <li><b>:graphics-exposure</b>         <li><b>:reparent-notify</b>
          <li><b>:client-message</b>          <li><b>:gravity-notify</b>            <li><b>:resize-request</b>
          <li><b>:colormap-notify</b>         <li><b>:keymap-notify</b>             <li><b>:selection-clear</b>
          <li><b>:configure-notify</b>        <li><b>:key-press</b>                 <li><b>:selection-notify</b>
          <li><b>:configure-request</b>       <li><b>:key-release</b>               <li><b>:selection-request</b>
          <li><b>:create-notify</b>           <li><b>:leave-notify</b>              <li><b>:unmap-notify</b>
          <li><b>:destroy-notify</b>          <li><b>:map-notify</b>                <li><b>:visibility-notify</b>
          <li><b>:enter-notify</b>            <li><b>:map-request</b>
        </menu>
    </defun>
    
    <defun>
      <name> event-mask
      <ll>   '(<b>or mask32</b> (<b>list event-mask-class</b>))
      <kind> Type
      <desc>
        <p>
          Provides a way to specify a set of bits for an event bitmask. Two ways
          of specifying the bits are allowed: by setting the event bits in a 32
          bit mask, or by listing the keyword names of the event bits in a list.
    </defun>
    
    <defun>
      <name> event-mask-class
      <ll>   '<code>(</code><b>member</b> <i>event*</i>)
      <kind> Type
      <desc>
        <p>
          The elements of the type <b>event-mask-class</b> are keyword names
          that correspond to a particular bit in an event bitmask.
        <p>
          <i>event</i> -- One of the following:
        <menu>
          <li><b>:button-1-motion</b>         <li><b>:enter-window</b>             <li><b>:pointer-motion-hint</b>
          <li><b>:button-2-motion</b>         <li><b>:exposure</b>                 <li><b>:property-change</b>
          <li><b>:button-3-motion</b>         <li><b>:focus-change</b>             <li><b>:resize-redirect</b>
          <li><b>:button-4-motion</b>         <li><b>:key-press</b>                <li><b>:structure-notify</b>
          <li><b>:button-5-motion</b>         <li><b>:key-release</b>              <li><b>:substructure-notify</b>
          <li><b>:button-motion</b>           <li><b>:keymap-state</b>             <li><b>:substructure-redirect</b>
          <li><b>:button-press</b>            <li><b>:leave-window</b>             <li><b>:visibility-change</b>
          <li><b>:button-release</b>          <li><b>:owner-grab-button</b>
          <li><b>:colormap-change</b>         <li><b>:pointer-motion</b>
        </menu>
    </defun>
    
    <defun>
      <name> make-event-keys
      <ll>   <i>event-mask</i>
      <kind> Function
      <desc>
        <p>
          Returns a list of <b>event-mask-class</b> keyword names for the event
          bits that are set in the specified event mask.
        <p>
      <args>
    <dt><i>event-mask</i> <dd> An event mask (type <b>mask32</b>).
  </defun>
    
    <defun>
      <name> make-event-mask
      <ll>   &amp;rest <i>keys</i>
      <kind> Function
      <returns>
        <dt><i>event-mask</i> <dd> Type <b>mask32</b>.
      <desc>
        <p>
          Constructs an event mask from a set of <b>event-mask-class</b> keyword
          names.
      <args>
        <dt><i>keys</i> <dd> <b>event-mask-class</b> keywords.
    </defun>
    
    <defun>
      <name> font
      <ll>   '(<b>satisfies font-p</b>)
      <kind> Type
      <desc>
        <p>
          A text font. See <ref name=fonts-and-characters>, for additional
          information.
    </defun>
    
    <defun>
      <name> fontable
      <ll>   '(<b>or stringable font</b>)
      <kind> Type
      <desc>
        <p>
          A <b>fontable</b> is either a <b>font</b> object or the name of one of
          the fonts in the font database.
    </defun>
    
    <defun>
      <name> font-props
      <ll>   '<b>list</b>
      <kind> Type
      <desc>
        <p>
          A <b>list</b> that contains alternating keywords and integers.
    </defun>
    
    <defun>
      <name> gcontext
      <ll>   '(<b>satisfies gcontext-p</b>)
      <kind> Type
      <desc>
        <p>
          A graphics context. See <ref name=graphics-contexts>, for additional
          information.
    </defun>
    
    <defun>
      <name> gcontext-key
      <ll>   '(<b>member</b> <i>type</i>*)
      <kind> Type
      <desc>
        <p>
          A list of predefined types for use in <b>gcontext</b>
          processing. Various information for graphics output is stored in a
          graphics context (GC or GContext), such as foreground pixel,
          background pixel, line width, clipping region, and so forth.
        <p>
          <i>type</i> -- One of the following:
        <menu>
          <li><b>:arc-mode</b>         <li><b>:exposures</b>        <li><b>:line-width</b>
          <li><b>:background</b>       <li><b>:fill-rule</b>        <li><b>:plane-mask</b>
          <li><b>:cap-style :fill-style</b>              <li><b>:stipple</b>
          <li><b>:clip-mask</b>        <li><b>:font</b>             <li><b>:subwindow-mode</b>
          <li><b>:clip-x</b>           <li><b>:foreground</b>       <li><b>:tile</b>
          <li><b>:clip-y</b>           <li><b>:function</b>         <li><b>:ts-x</b>
          <li><b>:dash-offset</b>      <li><b>:join-style</b>       <li><b>:ts-y</b>
          <li><b>:dashes</b>           <li><b>:line-style</b>
        </menu>
    </defun>
    
    <defun>
      <name> grab-status
      <ll>   '(<b>member</b> <i>grab-type</i>*)
      <kind> Type
      <desc>
        <p>
          There are two kinds of grabs: active and passive. An <i>active
          grab</i> occurs when a single client grabs the keyboard and/or pointer
          explicitly. Clients can also grab a particular keyboard key or pointer
          button in a window. The grab activates when the key or button is
          actually pressed, and is called a <i>passive grab</i>. Passive grabs
          can be very convenient for implementing reliable pop-up menus.
        <p>
          <i>grab-type</i> -- One of the following:
        <menu>
          <li><b>:already-grabbed</b>
          <li><b>:frozen</b>
          <li><b>:invalid-time</b>
          <li><b>:not-viewable</b>
          <li><b>:success</b>
        </menu>
    </defun>
    
    <defun>
      <name> image-depth
      <ll>   '(<b>integer</b> 0 32)
      <kind> Type
      <desc>
        <p>
          Used in determining the depth of a pixmap, window, or image. The value
          specifies the number of bits deep that a given pixel has within a
          given pixmap, window, or image.
    </defun>
    
    <defun>
      <name> index-size
      <ll>   '(<b>member :default</b> 8 16)
      <kind> Type
      <desc>
        <p>
          Used to control the element size of the destination buffer given to
          the translate function when drawing glyphs. If <b>:default</b> is
          specified, the size is based on the current font, if known; otherwise,
          16 is used.
    </defun>
    
    <defun>
      <name> int8
      <ll>   '(<b>signed-byte</b> 8)
      <kind> Type
      <desc>
        <p>
          A signed integer value that is a maximum of eight bits long. A number
          of this type can have a range from -128 to 127.
    </defun>
    
    <defun>
      <name> int16
      <ll>   '(<b>signed-byte</b> 16)
      <kind> Type
      <desc>
        <p>
          A signed integer value that is a maximum of 16 bits long. A number of
          this type can have a range from -32,768 to 32,767.
    </defun>
    
    <defun>
      <name> int32
      <ll>   '(<b>signed-byte</b> 32)
      <kind> Type
      <desc>
        <p>
          A signed integer value that is a maximum of 32 bits long. A number of
          this type can have a range from -2,147,483,648 to 2,147,483,647.
    </defun>
    
    <defun>
      <name> keysym
      <ll>   '<b>card32</b>
      <kind> Type
      <desc>
        <p>
          Used as an encoding of a symbol on a keycap on a keyboard. It is an
          unsigned integer value represented in a maximum of 32 bits long. A
          <b>keysym</b> type can have a range from 0 to 4,294,967,295.
    </defun>
    
    <defun>
      <name> mask16
      <ll>   ' <b>card16</b>
      <kind> Type
      <desc>
        <p>
          A positional bitmask that contains 16 boolean flags.
    </defun>
    
    <defun>
      <name> mask32
      <ll>   ' <b>card32</b>
      <kind> Type
      <desc>
        <p>
          A positional bitmask that contains 32 boolean flags.
    </defun>
    
    <defun>
      <name> modifier-key
      <ll>   '(<b>member</b> <i>modifier</i><b>*</b>)
      <kind> Type
      <desc>
        <p>
          A keyword identifying one of the modifier keys on the keyboard device.
        <p>
          <i>modifier</i> -- One of the following:
        <menu>
          <li><b>:shift</b>          <li><b>:mod-2</b>
          <li><b>:lock</b>           <li><b>:mod-3</b>
          <li><b>:control</b>        <li><b>:mod-4</b>
          <li><b>:mod-1</b>          <li><b>:mod-5</b>
        </menu>
    </defun>
    
    <defun>
      <name> modifier-mask
      <ll>   '(<b>or</b> (<b>member :any</b>) <b>mask16</b> (<b>list modifier-key</b>))
      <kind> Type
      <desc>
        <p>
          A bitmask or list of keywords that specifies a set of modifier
          keys. The keyword <b>:any</b> is equivalent to any subset of modifier
          key.
    </defun>
    
    <defun>
      <name> pixarray
      <ll>   '(<b>or</b> (<b>array pixel</b> (* *)) <br>
        &nbsp;&nbsp;&nbsp;&nbsp;(<b>array card16</b> (* *)) <br>
        (<b>array card8</b> (* *)) <br>
        (<b>array</b> (<b>unsigned-byte 4</b>) (* *)) <br>
        (<b>array bit</b> (* *))) <br>
      <kind> Type
      <desc>
        <p>
          Specifies a two-dimensional array of pixels.
    </defun>
    
    <defun>
      <name> pixel
      <ll>   '(<b>unsigned-byte</b> 32)
      <kind> Type
      <desc>
        <p>
          An unsigned integer value that is a maximum of 32 bits long. This
          gives a pixel type a value range from 0 to 4,294,967,295. Useful
          values are dependent on the class of colormap being used.
    </defun>
    
    <defun>
      <name> pixmap
      <ll>   <b>'(satisfies <b>pixmap-p</b>)</b>
      <kind> Type
      <desc>
        <p>
          A <term>pixmap</term>. See <ref name=pixmaps>, for additional
          information.
    </defun>
    
    <defun>
      <name> pixmap-format
      <kind> Structure
      <desc>
        <p>
          A structure that describes the storage format of a pixmap.
        <p>
          The <b>pixmap-format</b> structure contains slots for <b>depth</b>,
          <b>bits-per-pixel</b>, and <b>scanline-pad</b>. The <b>depth</b>
          member indicates the number of bit planes in the pixmap. The
          <b>bits-per-pixel</b> member indicates the number of bits used to
          represent a single pixel. For X, a pixel can be 1, 4, 8, 16, 24, or 32
          bits wide. As for <b>bitmap-format</b>, the <b>scanline-pad</b> member
          indicates how many pixels are needed to pad the left edge of the
          scan-line.
    </defun>
    
    <defun>
      <name> depth
      <kind> Slot of <b>pixmap-format</b>
      <desc>
        <p>
          Type: <b>image-depth</b>.
        <p>
          The number of bit planes in the pixmap.
    </defun>
    
    <defun>
      <name> bits-per-pixel
      <kind> Slot of <b>pixmap-format</b>
      <desc>
        <p>
          Type: (<b>member</b> 1 4 8 16 24 32).
        <p>
          The number of consecutive bits used to encode a single pixel. The
          default is 8.
    </defun>
    
    <defun>
      <name> scanline-pad
      <kind> Slot of <b>pixmap-format</b>
      <desc>
        <p>
          Type: (<b>member</b> 8 16 32).
        <p>
          The number of bits to left-pad the scan-line, which can be 8, 16, or
          32. The default is 8.
    </defun>
    
    <defun>
      <name> point-seq
      <ll>   '(<b>repeat-seq</b> (<b>int16</b> <i>x</i>) (<b>int16</b> <i>y</i>))
      <kind> Type
      <desc>
        <p>
          The <b>point-seq</b> type is used to define sequences of
          (<i>x</i>,<i>y</i>) pairs of points. The paired values are 16-bit,
          signed integer quantities. This gives the points in this type a range
          from -32,768 to 32,767.
    </defun>
    
    <defun>
      <name> pointer-event-mask
      <ll>   '(<b>or mask32</b> (<b>list pointer-event-mask-class</b>))
      <kind> Type
      <desc>
        <p>
          Provides a way to specify a set of bits for an event bitmask. Two ways
          of specifying the bits are allowed: by setting the event bits in a 32
          bit mask, or by listing the keyword names of the pointer related event
          bits in a list.
    </defun>
    
    <defun>
      <name> pointer-event-mask-class
      <ll>   '<code>(</code><b>member</b> <i>event*</i>)
      <kind> Type
      <desc>
        <p>
          A keyword name, for a pointer related event, that corresponds to a
          particular bit in an event bitmask. The set of names is a subset of
          the names in the type <b>event-mask-class</b>.
        <p>
          <i>event</i> -- One of the following:
        <menu>
          <li><b>:button-1-motion</b>         <li><b>:button-motion</b>            <li><b>:leave-window</b>
          <li><b>:button-2-motion</b>         <li><b>:button-press</b>             <li><b>:pointer-motion</b>
          <li><b>:button-3-motion</b>         <li><b>:button-release</b>           <li><b>:pointer-motion-hint</b>
          <li><b>:button-4-motion</b>         <li><b>:enter-window</b>
          <li><b>:button-5-motion</b>         <li><b>:keymap-state</b>
        </menu>
    </defun>
    
    <defun>
      <name> rect-seq
      <ll>   '(<b>repeat-seq</b> (<b>int16</b> <i>x</i>) (<b>int16</b> <i>y</i>) (<b>card16</b> <i>width</i>) (<b>card16</b> <i>height</i>))
      <kind> Type
      <desc>
        <p>
          <b>rect-seq</b> defines a four-tuple sequence of the form 
          (<i>x</i>,&nbsp;<i>y</i>,&nbsp;<i>width</i>,&nbsp;<i>height</i>). The points <i>x</i> and
          <i>y</i> are signed, 16-bit quantities with a range from -32,768 to
          32,767. The <i>width</i> and <i>height</i> values are unsigned, 16-bit
          quantities and range from 0 to 65,535.
    </defun>
    
    <defun>
      <name> repeat-seq
      <ll>   (&amp;rest <i>elts</i>) '<b>sequence</b>
      <kind> Type
      <desc>
        <p>
          A subtype used to define repeating sequences.
    </defun>
    
    <defun>
      <name> resource-id
      <ll>   '<b>card29</b>
      <kind> Type
      <desc>
        <p>
          A numeric identifier that is assigned by the server to a server
          resource object.
    </defun>
    
    <defun>
      <name> rgb-val
      <ll>   '(<b>float</b> 0.0 1.0)
      <kind> Type
      <desc>
        <p>
          An <b>rgb-val</b> is a floating-point value between 0 and 1 that
          specifies a saturation for a red, green, or blue additive primary. The
          0 value indicates no saturation and 1 indicates full saturation.
    </defun>
    
    <defun>
      <name> screen
      <ll>   '(<b>satisfies screen-p</b>)
      <kind> Type
      <desc>
        <p>
          A display screen. See <ref name=screens>, for further information.
    </defun>
    
    <defun>
      <name> seg-seq
      <ll> 
        '(<b>repeat-seq</b> (<b>int16</b>&nbsp;<i>x1</i>) (<b>int16</b>&nbsp;<i>y1</i>) 
        (<b>int16</b>&nbsp;<i>x2</i>) (<b>int16</b>&nbsp;<i>y2</i>))
      <kind> Type
      <desc>
        <p>
          Defines sequences of (<i>x1</i>, <i>y1</i>, <i>x2</i>, <i>y2</i>) sets
          of points. The point values are 16-bit, signed integer
          quantities. This gives the points in this type a range from -32,768 to
          32,767.
    </defun>
    
    <defun>
      <name> state-mask-key
      <ll>   '(<b>or modifier-key</b> (<b>member</b> <i>button</i>*))
      <kind> Type
        
      <desc>
        <p>
          A keyword identifying one of the display modifier keys or pointer
          buttons whose state is reported in device events.
        <p>
          <i>button</i> -- One of the following:
        <menu>
          <li><b>:button-1</b>       <li><b>:button-4</b>
          <li><b>:button-2</b>       <li><b>:button-5</b>
          <li><b>:button-3</b>
        </menu>
    </defun>
    
    <defun>
      <name> make-state-keys
      <ll>   <i>state-mask</i>
      <kind> Function
      <returns>
        <dt><i>state-keywords</i> <dd> Type <b>list</b>.
          
      <desc>
        Returns a list of <b>state-mask-key</b> symbols corresponding to the
        <i>state-mask</i>. A symbol belongs to the returned list if, and only
        if, the corresponding <i>state-mask</i> bit is 1.
        
      <args>
        <dt><i>state-mask</i> <dd> A 16-bit mask of type <b>mask16</b>.
          
    </defun>
    
    <defun>
      <name> make-state-mask
      <ll>   &amp;rest <i>keys</i>
      <kind> Function
      <returns>
        <dt><i>mask</i><dd>Type <b>mask16</b>.
          
      <desc>
        Returns a 16-bit <i>mask</i> representing the given <b>state-mask-key</b> symbols. The returned
        <i>mask</i> contains a 1 bit for each keyword.
        
      <args>
        <dt><i>keys</i> <dd> A list of <b>state-mask-key</b> symbols.
    </defun>
    
    <defun>
      <name> stringable
      <ll>   '(<b>or string symbol</b>)
      <kind> Type
      <desc>
        Used for naming something. This type can be either a string or a
        <b>symbol</b> whose <b>symbol-name</b> is used as the string containing
        the name. The case of the characters in the string is ignored when
        comparing stringables.
    </defun>
    
    <defun>
      <name> timestamp
      <ll>   '(<b>or null card32</b>)
      <kind> Type
      <desc>
        An encoding of a time. <b>nil</b> stands for the current time.
    </defun>
    
    <defun>
      <name> visual-info
      <kind> Structure
      <desc>
        A structure that represents a visual type. The elements of this
        structure are <b>id</b>, <b>class</b>, <b>red-mask</b>,
        <b>green-mask</b>, <b>blue-mask</b>, <b>bits-per-rgb</b>, and
        <b>colormap-entries</b>.
    </defun>
    
    <defun>
      <name> id
      <kind> Slot of <b>visual-info</b>
      <desc>
        <p>
          Type: <b>card29</b>.
        <p>
          A unique identification number.
    </defun>
    
    <defun>
      <name> class
      <kind> Slot of <b>visual-info</b>
      <desc>
        <p>
          Type: (<b>member :direct-color :gray-scale :pseudo-color :static-color :static-gray :true-color</b>).
        <p>
          The class of the visual type.
    </defun>
    
    <defun>
      <name> red-mask, green-mask, blue-mask
      <kind> Slots of <b>visual-info</b>
      <desc>
        <p>
          Type: <b>pixel</b>.
        <p>
          The <b>red-mask</b>, <b>green-mask</b>, and <b>blue-mask</b> elements
          are only meaningful for the <b>:direct-color</b> and
          <b>:true-color</b> classes. Each mask has one contiguous set of bits
          with no intersections.
    </defun>
    
    <defun>
      <name> bits-per-rgb
      <kind> Slot of <b>visual-info</b>
      <desc>
        <p>
          Type: <b>card8</b>.
        <p>
          Specifies the log base 2 of the approximate number of distinct color
          values ( individually) of red, green, and blue. Actual RGB values are
          unsigned 16-bit numbers.
    </defun>
    
    <defun>
      <name> colormap-entries
      <kind> Slot of <b>visual-info</b>
      <desc>
        <p>
          Type: <b>card16</b>.
        <p>
          Defines the number of available colormap entries in a newly created
          colormap. For <b>:direct-color</b> and <b>:true-color</b>, this is the
          size of an individual pixel subfield.
    </defun>
    
    <defun>
      <name> win-gravity
      <ll>   '<code>(</code><b>member</b> <i>gravity*</i>)
      <kind> Type
      <desc>
        <p>
          A keyword that specifies how to reposition a window when its parent is
          resized.
        <p>
          <i>gravity</i> -- One of the following:
        <menu>
          <li><b>:center</b>         <li><b>:north-west</b>      <li><b>:static</b>
          <li><b>:east</b>           <li><b>:south</b>           <li><b>:unmap</b>
          <li><b>:north</b>          <li><b>:south-east</b>      <li><b>:west</b>
          <li><b>:north-east</b>     <li><b>:south-west</b>
        </menu>
        <p>
          If a parent window is reconfigured without changing its inside width
          or height, then all child windows move with the parent and are not
          changed. Otherwise, each child of the resized parent is moved,
          depending on the child's gravity attribute. See <b>window-gravity</b>,
          in <ref name=winattr>, for additional information.
    </defun>
    
    <defun>
      <name> window
      <ll>   '(<b>satisfies window-p</b>)
      <kind> Type
      <desc>
        A window. See <ref name=windows-and-pixmaps>, for additional
        information.
    </defun>
    
    <defun>
      <name> xatom
      <ll>   '(<b>or string symbol</b>)
      <kind> Type
        
      <desc>
        A name that has been assigned a corresponding unique ID by the
        server. <b>xatoms</b> are used to identify properties, selections, and
        types defined in the X server. An <b>xatom</b> can be either a
        <b>string</b> or <b>symbol</b> whose <b>symbol-name</b> is used as the
        <b>xatom</b> name. The case of the characters in the string are
        significant when comparing <b>xatoms</b>.
    </defun>
    
    
    <h1 name=displays>2 Displays</h1>

    <h2>2.1 Introduction</h2>

    <p>
      A particular X server, together with its screens and input devices, is
      called a <i>display</i>. The CLX <b>display</b> object contains all the
      information about the particular display and its screens, as well as the
      state that is needed to communicate with the display over a particular
      connection.
    <p>
      Before your program can use a display, you must establish a connection to
      the X server driving your display. Once you have established a connection,
      you then can use the CLX macros and functions discussed in this section to
      return information about the display.  This section discusses how to:
    <ul>
      <li> Open (connect) a display
      <li> Obtain information about a display
      <li> Access and change display attributes
      <li> Close (disconnect) a display
    </ul>

    <h2>2.2 Opening the Display</h2>
    
    <p>
      The <b>open-display</b> function is used to open a connection to an X
      server. In general you can also use the
      <b>open-default-display</b> function that will try to guess the
      correct parameters for <b>open-display</b> and then call it.

    <defun>
      <name>open-default-display
      <kind> Function
      <returns>
        <dt><i>display</i><dd>Type <b>display</b>.
      <desc>
        <p>
          Tries to guess the parameters for <b>open-display</b>, calls
          it and returns the <b>display</b> that resulted from this
    </defun>
    
    <defun>
      <name> open-display
      <ll>   <i>host</i> &amp;key <b>:display :protocol</b>
      <kind> Function
      <returns>
        <dt><i>display</i><dd>Type <b>display</b>.
      <desc>
        <p>
          Returns a <b>display</b> that serves as the connection to the X
          server and contains all the information about that X server.
        <p>
          Authorization, if any, is assumed to come from the
          environment. After a successful call to <b>open-display</b>, all
          screens on the display can be used by the client application.
      <args>
        <dt><i>host</i> 
        <dd>
          Specifies the name of the <i>host</i> machine on which the
          server executes. A string must be acceptable as a <i>host</i>,
          but otherwise the possible types are not constrained and will
          likely be very system dependent.
        <dt><b>:display</b> 
        <dd> An integer that specifies which display device on the
          <i>host</i> should be used for this connection. This is needed
          since multiple displays can be controlled by a single X
          server. The default is display 0 (zero).
        <dt><b>:protocol</b>
        <dd> A keyword argument that specifies which network protocol
          should be used for connecting to the server (for example,
          <b>:tcp</b>, <b>:dna</b>, or <b>:chaos</b>). The set of possible
          values and the default value are implementation specific.
    </defun>
    
    <h2>2.3 Display Attributes</h2>
    
    <p>
      The complete set of display attributes is discussed in the following
      paragraphs.
      
    <defun>
      <name> display-authorization-data
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt><i>authorization-data</i><dd>Type <b>string</b>.
      <desc>
        <p>
          Returns the authorization data string for <i>display</i> that was
          transmitted to the server by <b>open-display</b> during connection
          setup. The data is specific to the particular authorization protocol
          that was used. The <b>display-authorization-name</b> function
          returns the protocol used.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-authorization-name
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt><i>authorization-name</i><dd>Type <b>string</b>.
      <desc>
        <p>
          Returns the authorization protocol namestring for <i>display</i>
          that was transmitted by <b>open-display</b> to the server during
          connection setup. The <i>authorization-name</i> indicates what
          authorization protocol the client expects the server to
          use. Specification of valid authorization mechanisms is not part of
          the X protocol. A server that implements a different protocol than
          the client expects, or a server that only implements the host-based
          mechanism, can simply ignore this information. If both name and data
          strings are empty, this is to be interpreted as "no explicit
          authorization."
      <args>
        <dt><i>display</i><dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-bitmap-format
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt><i>bitmap-format</i><dd>Type <b>bitmap-format</b>.
      <desc>
        Returns the <i>bitmap-format</i> information for the specified <i>display</i>.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-byte-order
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt><i>byte-order</i><dd>Either <b>:lsbfirst</b> or <b>:msbfirst</b>.
      <desc>
        Returns the <i>byte-order</i> to be employed in communication with the server for the given
        <i>display</i>. The possible values are as follows:
        
        <dl>
          <dt><b>:lsbfirst</b> <dd> Values are transmitted least significant byte first.
          <dt><b>:msbfirst</b> <dd> Values are transmitted most significant byte first.
        </dl>
        
        Except where explicitly noted in the protocol, all 16-bit and 32-bit quantities sent by the
        client must be transmitted with this <i>byte-order</i>, and all 16-bit and 32-bit quantities
        returned by the server are transmitted with this <i>byte-order</i>.
        
      <args>
        <dt><i>display</i><dd>A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-display
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt><i>display-number</i><dd>Type <b>integer</b>.
          
      <desc>
        Returns the <i>display-number</i> for the host associated with <i>display</i>.
        
      <args>
        <dt><i>display</i><dd>A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-error-handler
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>error-handler</i> <dd> Type <b>function</b> or <b>sequence</b>. 
          
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the <i>error-handler</i> function
          for the given <i>display</i>. CLX calls (one of) the display error
          handler functions to handle server errors returned to the
          connection. The default error handler, <b>default-error-handler</b>,
          signals conditions as they occur. See <ref name=errors>, for a list
          of the conditions that CLX can signal. For more information about
          errors and error handling, refer to the section entitled Common Lisp
          Condition System in the <i>Lisp Reference</i> manual.
        <p>
          If the value of <i>error-handler</i> is a sequence, it is expected to
          contain a handler function for each specific error. The error code is
          used as an index into the sequence to fetch the appropriate handler
          function. If this element is a function, it is called for all
          errors. Any results returned by the handler are ignored since it is
          assumed the handler either takes care of the error completely or else
          signals. The arguments passed to the handler function are the
          <b>display</b> object, a symbol naming the type of error, and a set of
          keyword-value argument pairs that vary depending on the type of
          error. For all core errors, the keyword-value argument pairs are:
          
        <table>
          <tr><td> <b>:current-sequence</b>      <td><b>card16</b>
          <tr><td> <b>:major</b>                 <td><b>card8</b>
          <tr><td> <b>:minor</b>                 <td><b>card16</b>
          <tr><td> <b>:sequence</b>              <td><b>card16</b>
        </table>
        
        <p>
          For <b>colormap</b>, <b>cursor</b>, <b>drawable</b>, <b>font</b>,
          <b>gcontext</b>, <b>id-choice</b>, <b>pixmap</b>, and <b>window</b>
          errors, the keyword-value pairs are the core error pairs plus:
          
        <table>
          <tr><td><b>:resource-id</b>            <td><b>card32</b>
        </table>
        
        <p>
          For <b>:atom</b> errors, the keyword-value pairs are the core error
          pairs plus:
          
        <table>
          <tr><td><b>:atom-id</b>                 <td><b>card32</b>
        </table>
        
        <p>
          For <b>:value</b> errors, the keyword-value pairs are the core error
          pairs plus:
          
        <table>
          <tr><td><b>:value</b>                   <td><b>card32</b>
        </table>
      <args>
        <dt><i>display</i><dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-image-lsb-first-p
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt><i>image-lsb-first-p</i><dd>Type <b>boolean</b>.
      <desc>
        <p>
          Although the server is generally responsible for byte swapping
          communication data to match the client, images (pixmaps/bitmaps) are
          always transmitted and received in formats (including byte order)
          specified by the server. Within images for each scan-line unit in
          bitmaps or for each pixel value in pixmaps, the leftmost bit in the
          image as displayed on the screen is either the least or most
          significant bit in the unit. For the given <i>display</i>,
          <b>display-image-lsb-first-p</b> returns non-<b>nil</b> if the
          leftmost bit is the least significant bit; otherwise, it returns
          <b>nil</b>.
          
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-keycode-range
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>min-keycode</i>, <i>max-keycode</i> <dd> Type <b>card8</b>.
          
      <desc>
        <p>
          Returns <i>min-keycode</i> and <i>max-keycode</i> as multiple
          values. See the <b>display-max-keycode</b> and
          <b>display-min-keycode</b> functions for additional information.
          
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object. 
    </defun>
    
    <defun>
      <name> display-max-keycode
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>max-keycode</i> <dd> Type <b>card8</b>.
      <desc>
        <p>
          Returns the maximum keycode value for the specified
          <i>display</i>. This value is never greater than 255. Not all keycodes
          in the allowed range are required to have corresponding keys.
          
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-max-request-length
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>max-request-length</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the maximum length of a request, in four-byte units, that is
          accepted by the specified <i>display</i>. Requests larger than this
          generate a length error, and the server will read and simply discard
          the entire request. This length is always at least 4096 (that is,
          requests of length up to and including 16384 bytes are accepted by all
          servers).
          
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-min-keycode
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>min-keycode</i> <dd> Type <b>card8</b>.
          
      <desc>
        <p>
          Returns the minimum keycode value for the specified
          <i>display</i>. This value is never less than eight. Not all keycodes
          in the allowed range are required to have corresponding keys.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-motion-buffer-size
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>motion-buffer-size</i> <dd> Type <b>card32</b>.
          
      <desc>
        <p>
          Returns the approximate size of the motion buffer for the specified
          <i>display</i>. The server can retain the recent history of pointer
          motion at a finer granularity than is reported by
          <b>:motion-notify</b> events. Such history is available through the
          <b>motion-events</b> function.
          
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-p
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>display-p</i> <dd> Type <b>boolean</b>.
          
      <desc>
        <p>
          Returns non-<b>nil</b> if <i>display</i> is a <b>display</b> object;
          otherwise, returns <b>nil</b>.
    </defun>
    
    <defun>
      <name> display-pixmap-formats
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>pixmap-formats</i> <dd> Type <b>list</b>.
      <desc>
        <p>
          Returns the list of <b>pixmap-format</b> values for the given
          <i>display</i>. This list contains one entry for each depth value. The
          entry describes the format used to represent images of that depth. An
          entry for a depth is included if any screen supports that depth, and
          all screens supporting that depth must support (only) the format for
          that depth.
          
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-plist
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>plist</i> <dd> Type <b>list</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the property list for the specified <i>display</i>. This function
          provides a hook where extensions can add data.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-protocol-major-version
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>protocol-major-version</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the major version number of the X protocol associated with the
          specified <i>display</i>. In general, the major version would
          increment for incompatible changes. The returned protocol version
          number indicates the protocol the server actually supports. This might
          not equal the version supported by the client. The server can (but
          need not) refuse connections from clients that offer a different
          version than the server supports. A server can (but need not) support
          more than one version simultaneously.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-protocol-minor-version
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>protocol-minor-version</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the minor protocol revision number associated with the
          specified <i>display</i>. In general, the minor version would
          increment for small upward compatible changes in the X protocol.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-protocol-version
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>protocol-major-version</i>, <i>protocol-minor-version</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns <i>protocol-major-version</i> and
          <i>protocol-minor-version</i> as multiple values. See the
          <b>display-protocol-major-version</b> and
          <b>display-protocol-minor-version</b> functions for additional
          information.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-resource-id-base
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>resource-id-base</i> <dd> Type <b>resource-id</b>.
      <desc>
        <p>
          Returns the <i>resource-id-base</i> value that was returned from the
          server during connection setup for the specified <i>display</i>. This
          is used in combination with the <i>resource-id-mask</i> to construct
          valid IDs for this connection.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-resource-id-mask
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>resource-id-mask</i> <dd> Type <b>resource-id</b>.
      <desc>
        <p>
          Returns the <i>resource-id-mask</i> that was returned from the server
          during connection setup for the specified <i>display</i>. The
          <i>resource-id-mask</i> contains a single contiguous set of bits (at
          least 18) which the client uses to allocate resource IDs for types
          <b>window</b>, <b>pixmap</b>, <b>cursor</b>, <b>font</b>,
          <b>gcontext</b>, and <b>colormap</b> by choosing a value with (only)
          some subset of these bits set, and <b>or</b>ing it with the
          <i>resource-id-base</i>. Only values constructed in this way can be
          used to name newly created server resources over this
          connection. Server resource IDs never have the top three bits set. The
          client is not restricted to linear or contiguous allocation of server
          resource IDs. Once an ID has been freed, it can be reused, but this
          should not be necessary.
          
        <p>
          An ID must be unique with respect to the IDs of all other server
          resources, not just other server resources of the same type. However,
          note that the value spaces of server resource identifiers, atoms,
          visualids, and keysyms are distinguished by context, and as such are
          not required to be disjoint (for example, a given numeric value might
          be both a valid window ID, a valid atom, and a valid keysym.)
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-roots
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>roots</i> <dd> A list of screens.
      <desc>
        <p>
          Returns a list of all the <b>screen</b> structures available for the
          given <i>display</i>.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-vendor
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>vendor-name</i>, <i>release-number</i> <dd> Type <b>card32</b>.
      <desc>
        <p>
          Returns <i>vendor-name</i> and <i>release-number</i> as multiple
          values. See the <b>display-vendor-name</b> and
          <b>display-release-number</b> functions for additional information.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-vendor-name
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>vendor-name</i> <dd> Type <b>string</b>.
      <desc>
        <p>
          Returns a string that provides some vendor identification of the X
          server implementation associated with the specified <i>display</i>.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-version-number
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>version-number</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the X protocol version number for this implementation of CLX.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-xid
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>resource-allocator</i> <dd> Type <b>function</b>.
      <desc>
        <p>
          Returns the function that is used to allocate server resource IDs for
          this <i>display</i>.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> with-display
      <ll>   <i>display</i> &amp;body <i>body</i>
      <kind> Macro
      <desc>
        <p>
          This macro is for use in a multi-process
          environment. <b>with-display</b> provides exclusive access to the
          local <b>display</b> object for multiple request generation. It need
          not provide immediate exclusive access for replies. That is, if
          another process is waiting for a reply (while not in a
          <b>with-display</b>), then synchronization need not (but can) occur
          immediately. Except where noted, all routines effectively contain an
          implicit <b>with-display</b> where needed, so that correct
          synchronization is always provided at the interface level on a
          per-call basis. Nested uses of this macro work correctly. This macro
          does not prevent concurrent event processing (see
          <b>with-event-queue</b>).
      <args>
        <dt><i>display</i> <dd> A <b>display</b>.
    </defun>
    
    <h2>2.4 Managing the Output Buffer</h2>
    
    <p>
      Most CLX functions cause output requests to be generated to an X
      server. Output requests are not transmitted immediately but
      instead are stored in an <i>output buffer</i> for the
      appropriate display. Requests in the output buffer are typically
      sent only when the buffer is filled. Alternatively, buffered
      requests can be sent prior to processing an event in the input
      event queue (see <ref name='processing-events'>). In either
      case, CLX sends the output buffer automatically without explicit
      instructions from the client application.
    <p>
      However, in some cases, explicit control over the output buffer is needed,
      typically to ensure that the X server is in a consistent state before
      proceeding further. The <b>display-force-output</b> and
      <b>display-finish-output</b> functions allow a client program to
      synchronize with buffered output requests.
      
    <defun>
      <name> display-after-function
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>after-function</i> <dd> Type <b>function</b> or <b>null</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the <i>after-function</i>
          for the given <i>display</i>. If <i>after-function</i> is
          non-<b>nil</b>, it is a function that is called after every
          protocol request is generated, even those inside an explicit
          <b>with-display</b>, but never called from inside the
          <i>after-function</i>. The function is called inside the
          effective <b>with-display</b> for the associated request. The
          default value is <b>nil</b>. This can be set, for example, to
          #'<b>display-force-output</b> or #'
          <b>display-finish-outpu</b>t.
      <args>
    <dt><i>display</i> <dd> A <b>display</b> object.
  </defun>
    
    <defun>
      <name> display-force-output
      <ll>   <i>display</i>
      <kind> Function
      <desc>
        <p>
          Forces any buffered output to be sent to the X server.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <defun>
      <name> display-finish-output
      <ll>   <i>display</i>
      <kind> Function
        
      <desc>
        <p>
          Forces any buffered output to be sent to the X server and then waits until all requests
          have been received and processed. Any errors generated are read and handled by the
          display error handler. Any events generated by output requests are read and stored in the
          event queue.
          
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <h2 name=closing-the-display>2.5 Closing the Display</h2>
    
    <p>
      To close or disconnect a display from the X server, use <b>close-display</b>.
      
    <defun>
      <name> close-display
      <ll>   <i>display</i>
      <kind> Function
      <desc>
        <p>
          Closes the connection to the X server for the specified
          <i>display</i>. It destroys all server resources (<b>window</b>,
          <b>font</b>, <b>pixmap</b>, <b>colormap</b>, <b>cursor</b>, and
          <b>gcontext</b>), that the client application has created on this
          display, unless the close down mode of the server resource has been
          changed (see <b>set-close-down-mode</b>). Therefore, these server
          resources should never be referenced again. In addition, this
          function discards any output requests that have been buffered but
          have not yet been sent.
      <args>
        <dt><i>display</i> <dd> A <b>display</b> object.
    </defun>
    
    <h1 name=screens>3 Screens</h1>
    
    <h2>3.1 Screens and Visuals</h2>
    
    <p>
      An X display supports graphical output to one or more
      <i>screens</i>. Each screen has its own root window and window
      hierarchy. Each window belongs to exactly one screen and cannot
      simultaneously appear on another screen.
      
    <p>
      The kinds of graphics hardware used by X screens can vary greatly in
      their support for color and in their methods for accessing raster
      memory. X uses the concept of a <i>visual</i> <i>type</i> (usually
      referred to simply as a <i>visual</i>) which uniquely identifies the
      hardware capabilities of a display screen. Fundamentally, a visual is
      represented by a <b>card29</b> integer ID, which uniquely identifies the
      visual type relative to a single display. CLX also represents a visual
      with a <b>visual-info</b> structure that contains other attributes
      associated with a visual (see <ref name=datatypes>). A screen can
      support more than one depth (that is, pixel size), and for each
      supported depth, a screen may support more than one visual.  However, it
      is more typical for a screen to have only a single depth and a single
      visual type.
      
    <p>
      A visual represents various aspects of the screen hardware, as follows:

    <ul>
      <li> A screen can be color or gray-scale.
      <li> A screen can have a colormap that is either writable or read-only.
      <li> A screen can have a single colormap or separate colormaps for each of the red,
        green, and blue components. With separate colormaps, a pixel value is decomposed
        into three parts to determine indexes into each of the red, green, and blue colormaps.
    </ul>
    
    <p>
      CLX supports the following classes of visual types:
      <b>:direct-color</b>, <b>:gray-scale</b>, <b>:pseudo-color</b>,
      <b>:static-color</b>, <b>:static-gray</b>, and <b>:true-color</b>. The
      following tables show how the characteristics of a screen determine the
      class of its visual type.
      
    <p>
      For screens with a single colormap:
      
    <table border=1>
      <tr><td>           <th>Color                 <th>Gray-Scale
      <tr><th>Read-only  <td><b>:static-color</b>  <td><b>:static-gray</b>
      <tr><th>Writable   <td><b>:pseudo-color</b>  <td><b>:gray-scale</b>
    </table>
    
    <p>
      For screens with red, green, and blue colormaps:
      
    <table border=1>
      <tr><th>Read-only     <td><b>:true-color</b>
      <tr><th>Writable      <td><b>:direct-color</b>             <td><b>:gray-scale</b>
    </table>
    
    <p>
      The visual class also indicates how screen colormaps are handled. See
      <ref name=colormaps-and-colors>.
      
    <h2>3.2 Screen Attributes</h2>
    
    <p>
      In CLX, each display screen is represented by a <b>screen</b>
      structure. The <b>display-roots</b> function returns the list of
      <b>screen</b> structures for the display. The following paragraphs
      discuss the attributes of CLX <b>screen</b> structures.
      
    <defun>
      <name> screen-backing-stores
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>backing-stores-type</i> <dd> One of <b>:always</b>, <b>:never</b>, or <b>:when-mapped</b>.
          
      <desc>
        <p>
          Returns a value indicating when the <i>screen</i> supports backing stores, although it may be
          storage limited in the number of windows it can support at once. The value returned can
          be one of <b>:always</b>, <b>:never</b>, or <b>:when-mapped</b>.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-black-pixel
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>black-pixel</i> <dd> Type <b>pixel</b>.
      <desc>
        Returns the black pixel value for the specified <i>screen</i>.
        
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-default-colormap
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>default-colormap</i> <dd> Type <b>colormap</b>.
          
      <desc>
        Returns the <i>default-colormap</i> for the specified <i>screen</i>. The <i>default-colormap</i> is initially
        associated with the root window. Clients with minimal color requirements creating
        windows of the same depth as the root may want to allocate from this map by default. Most
        routine allocations of color should be made out of this colormap.
        
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-depths
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>depths</i> <dd> Type <b>alist</b>.
      <desc>
        <p>
          Returns an association list that specifies what drawable depths are
          supported on the specified <i>screen</i>. Elements of the returned
          association list have the form (depth <i>visual</i>*), where each
          <i>visual</i> is a <b>visual-info</b> structure. Pixmaps are supported
          for each depth listed, and windows of that depth are supported if at
          least one visual type is listed for the depth.  A pixmap depth of one
          is always supported and listed, but windows of depth one might not be
          supported. A depth of zero is never listed, but zero-depth
          <b>:input-only</b> windows are always supported.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-event-mask-at-open
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>event-mask-at-open</i> <dd> Type <b>mask32</b>.
      <desc>
        <p>
          Returns the initial root event mask for the specified <i>screen</i>.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-height
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>height</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the <i>height</i> of the specified <i>screen</i> in pixel
          units.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-height-in-millimeters
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>height-in-millimeters</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the height of the specified <i>screen</i> in millimeters. The
          returned height can be used with the width in millimeters to determine
          the physical size and the aspect ratio of the screen.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-max-installed-maps
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>max-installed-colormaps</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the maximum number of colormaps that can be installed
          simultaneously with <b>install-colormap</b>.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-min-installed-maps
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>min-installed-colormaps</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the minimum number of colormaps that can be guaranteed to be
          installed simultaneously.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-p
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>screen-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns non-<b>nil</b> if the <i>screen</i> argument is a
          <b>screen</b> structure; otherwise, returns <b>nil</b>.
    </defun>
    
    <defun>
      <name> screen-plist
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>plist</i> <dd> Type <b>list</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the property list for the
          specified <i>screen</i>. This function provides a hook where
          extensions can add data.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-root
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>root-window</i> <dd> Type <b>window</b> or <b>null</b>.
      <desc>
        <p>
          Returns the <i>root-window</i> for the specified <i>screen</i>. This
          function is useful with functions that take a parent window as an
          argument. The class of the root window is always <b>:input-output</b>.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-root-depth
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>root-window-depth</i> <dd> Type <b>image-depth</b>.
      <desc>
        <p>
          Returns the depth of the root window for the specified
          <i>screen</i>. Other depths can also be supported on this
          <i>screen</i>.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-root-visual
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>root-window-visual</i> <dd> Type <b>card29</b>.
      <desc>
        <p>
          Returns the default visual type for the root window for the specified
          <i>screen</i>.
          
      <args>
        <dt> <i>screen</i> <dd> A <b>screen</b>.
    </defun>
    
    <defun>
      <name> screen-save-unders-p
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>save-unders-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          If true, the server can support the save-under mode in
          <b>create-window</b> and in changing window attributes.
          
      <args>
        <dt> <i>screen</i> <dd> A screen.
    </defun>
    
    <defun>
      <name> screen-white-pixel
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>white-pixel</i> <dd> Type <b>pixel</b>.
      <desc>
        <p>
          Returns the white pixel value for the specified <i>screen</i>.
          
      <args>
        <dt> <i>screen</i> <dd> A screen.
    </defun>
    
    <defun>
      <name> screen-width
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>width</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the width of the specified <i>screen</i> in pixel units.
          
      <args>
        <dt> <i>screen</i> <dd> A screen.
    </defun>
    
    <defun>
      <name> screen-width-in-millimeters
      <ll>   <i>screen</i>
      <kind> Function
      <returns>
        <dt> <i>width-in-millimeters</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the width of the specified <i>screen</i> in millimeters. The
          returned width can be used with the height in millimeters to determine
          the physical size and the aspect ratio of the screen.
          
      <args>
        <dt> <i>screen</i> <dd> A screen.
    </defun>
    
    <h1 name=windows-and-pixmaps>4 Windows and Pixmaps</h1>
    
    <h2>4.1 Drawables</h2>
    
    <p>
      Both windows and pixmaps can be used as sources and destinations in
      graphics operations. These are collectively known as
      <i>drawables</i>. The following functions apply to both windows and
      pixmaps.
      
    <defun>
      <name> drawable-display
      <ll>   <i>drawable</i>
      <kind> Function 
        
      <desc>
        <p>
          Returns the display for the specified <i>drawable</i>.
          
      <args>
        <dt> <i>drawable</i> <dd> A <b>drawable</b> object.
    </defun>
    
    <defun>
      <name> drawable-equal
      <ll>   <i>drawable-1 drawable-2</i>
      <kind> Function
        
      <desc>
        <p>
          Returns true if the two arguments refer to the same server resource,
          and <b>nil</b> if they do not.
          
      <args>
        <dt> <i>drawable-1</i>, <i>drawable-2</i> <dd> <b>drawable</b> objects.
    </defun>
    
    <defun>
      <name> drawable-id
      <ll>   <i>drawable</i>
      <kind> Function
      <returns>
        <dt> <i>id</i> <dd> Type <b>resource-id</b>.
          
      <desc>
        <p>
          Returns the unique resource ID assigned to the specified
          <i>drawable</i>.
          
      <args>
        <dt> <i>drawable</i> <dd> A <b>drawable</b> object.
    </defun>
    
    <defun>
      <name> drawable-p
      <ll>   <i>drawable</i>
      <kind> Function
      <returns>
        <dt> <i>boole</i> <dd> Type <b>boolean</b>.
          
      <desc>
        <p>
          Returns true if the argument is a <b>drawable</b> and <b>nil</b>
          otherwise.
    </defun>
    
    <defun>
      <name> drawable-plist
      <ll>   <i>drawable</i>
      <kind> Function
      <returns>
        <dt> <i>plist</i> <dd> A property list.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the property list for the
          specified <i>drawable</i>. This function provides a hook where
          extensions can add data.
    </defun>
    
    <h2>4.2 Creating Windows</h2>
    
    <p>
      A window is a <b>drawable</b> that can also receive input events. CLX
      represents a window with a <b>window</b> object. The
      <b>create-window</b> function creates a new <b>window</b> object.
      
    <defun>
      <name> create-window
      <ll>   &amp;key <b>:parent :x :y :width :height</b> (<b>:depth</b> 0)                                  
        (<b>:border-width</b> 0) (<b>:class :copy</b>) (<b>:visual :copy</b>) <b>:background</b>
        <b>:border :gravity :bit-gravity :backing-store :backing-planes :backing-pixel</b>
        <b>:save-under :event-mask :do-not-propagate-mask :override-redirect :colormap</b>
        <b>:cursor</b>
      <kind> Function
      <returns>
        <dt> <i>window</i> <dd> Type <b>window</b>.
      <desc>
        <p>
          Creates and returns a window. A <b>:parent</b> window must be
          specified; the first window created by a client will have a root
          window as its <b>:parent</b>. The new window is initially unmapped
          and is placed on top of its siblings in the stacking order. A
          <b>:create-notify</b> event is generated by the server.
        <p>
          The <b>:class</b> of a window can be <b>:input-output</b> or
          <b>:input-only</b>. Windows of class <b>:input-only</b> cannot be
          used as the destination drawable for graphics output and can never
          receive <b>:exposure</b> events, but otherwise operate the same as
          <b>:input-output</b> windows. The <b>:class</b> can also be
          <b>:copy</b>, in which case the new window has the same class as its
          <b>:parent</b>.
        <p>
          For an <b>:input-output</b> window, the <b>:visual</b> and
          <b>:depth</b> must be a combination supported by the
          <b>:parent</b>'s screen, but the <b>:depth</b> need not be the same
          as the <b>:parent</b>'s. The <b>:parent</b> of an
          <b>:input-output</b> window must also be <b>:input-output</b>. A
          <b>:depth</b> of 0 means that the depth of the <b>:parent</b> is
          used.
        <p>
          For an <b>:input-only</b> window, the <b>:depth</b> must be zero,
          and the <b>:visual</b> must be supported by the <b>:parent</b>'s
          screen. The <b>:parent</b> of an <b>:input-only</b> window can be of
          any class. The only attributes that can be given for an
          <b>:input-only</b> window are <b>:cursor</b>,
          <b>:do-not-propagate-mask</b>, <b>:event-mask</b>, <b>:gravity</b>,
          and <b>:override-redirect</b>.
      <args>
        <dt> 
          <b>:parent</b> 
        <dd> 
          The parent window. This argument is required.
        <dt> 
          <b>:x</b>, <b>:y</b> 
        <dd> 
          <b>int16</b> coordinates for the outside upper-left corner of the new window with
          respect to the origin (inside upper-left corner) of the <b>:parent</b>. These arguments are
          required.
        <dt> 
          <b>:width</b>, <b>:height</b> 
        <dd> 
          <b>card16</b> values for the size of the new window. These arguments are
          required.
        <dt> 
          <b>:depth</b> 
        <dd> A <b>card16</b> specifying the depth of the new window.
        <dt> 
          <b>:class</b> 
        <dd> 
          One of <b>:input-outpu</b>t, <b>:input-only</b>, or <b>:copy</b>.
        <dt> 
          <b>:visual</b> 
        <dd> A <b>card29</b> ID specifying the visual type of the new window.
        <dt> 
          <b>:background</b>, <b>:backing-pixel</b>, <b>:backing-planes</b>, <b>:backing-store</b>, <b>:bit-gravity</b>,
          <b>:border</b>, <b>:border-width</b>, <b>:colormap</b>, <b>:cursor</b>, <b>:do-not-propagate-mask</b>,
          <b>:event-mask</b>, <b>:gravity</b>, <b>:override-redirect</b>, <b>:save-under</b> 
        <dd> 
          Initial attribute values for the new window. If <b>nil</b>, the default value is defined by 
          the X protocol. See paragraph <!--XXX-->
    </defun>
    
    <h2 name="winattr">4.3 Window Attributes</h2>
    
    <p>
      The following paragraphs describe the CLX functions used to return or
      change window attributes. Using the <b>with-state</b> macro improves the
      performance of attribute access by batching related accesses in the
      minimum number of server requests.
      
    <defun>
      <name> drawable-border-width
      <ll>   <i>drawable</i>
      <kind> Function
      <returns>
        <dt> <i>border-width</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the <i>border-width</i> of the <i>drawable</i> in pixels. It
          always returns zero if the <i>drawable</i> is a pixmap or an
          <b>:input-only</b> window. Used with <b>setf</b>, this function also
          changes the border width of the <b>:input-only</b> window. The
          default border width of a new window is zero.
        <p>
          Changing just the border width leaves the outer left corner of a
          window in a fixed position but moves the absolute position of the
          window's origin. It is an error to make the border width of an
          <b>:input-only</b> window nonzero.
        <p>
          When changing the border-width of a window, if the override-redirect
          attribute of the window is <b>:off</b> and some other client has
          selected <b>:substructure-redirect</b> on the parent, a
          <b>:configure-request</b> event is generated, and no further
          processing is performed.  Otherwise, the border-width is changed.
      <args>
        <dt> <i>drawable</i> <dd> A <b>drawable</b> object.
    </defun>
    
    <defun>
      <name> drawable-depth
      <ll>   <i>drawable</i>
      <kind> Function
      <returns>
        <dt> <i>depth</i> <dd> Type <b>card8</b>.
      <desc>
        <p>
          Returns the depth of the specified <i>drawable</i> (bits per pixel).
      <args>
        <dt> <i>drawable</i> <dd> A <b>drawable</b> object.
    </defun>
    
    <defun>
      <name> drawable-height
      <ll>   <i>drawable</i>
      <kind> Function
      <returns>
        <dt> <i>inside-height</i> <dd> Type <b>card16</b>.
    </defun>
    
    <defun>
      <name> drawable-width
      <ll>   <i>drawable</i>
      <kind> Function
      <returns>
        <dt> <i>inside-width</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          These functions return the height or width of the
          <i>drawable</i>. These coordinates define the inside size of the
          <i>drawable</i>, in pixels. Used with <b>setf</b>, these functions
          also change the inside height or width of a window. However, the
          height or width of a pixmap cannot be changed.
        <p>
          Changing the width and height resizes a window without changing its
          position or stacking priority.
        <p>
          Changing the size of a mapped window may cause the window to lose
          its contents and generate an <b>:exposure</b> event. If a mapped
          window is made smaller, <b>:exposure</b> events are generated on
          windows that it formerly obscured.
        <p>
          When changing the size of a window, if the override-redirect
          attribute of the window is <b>:off</b> and some other client has
          selected <b>:substructure-redirect</b> on the parent, a
          <b>:configure-request</b> event is generated, and no further
          processing is performed. Otherwise, if another client has selected
          <b>:resize-redirect</b> on the window, a <b>:resize-request</b>
          event is generated, and the current inside width and height are
          maintained. Note that the override-redirect attribute of the window
          has no effect on <b>:resize-redirect</b> and that
          <b>:substructure-redirect</b> on the parent has precedence over
          <b>:resize-redirect</b> on the window.
        <p>
          When the inside size of the window is changed, the children of the
          window can move according to their window gravity. Depending on the
          window's bit gravity, the contents of the window can also be moved.
      <args>
        <dt> <i>drawable</i> <dd> A <b>drawable</b> object.
    </defun>
    
    <defun>
      <name> drawable-x
      <ll>   <i>drawable</i>
      <kind> Function
      <returns>
        <dt> <i>outside-left</i> <dd> Type <b>int16</b>.
    </defun>
    
    <defun>
      <name> drawable-y
      <ll>   <i>drawable</i>
      <kind> Function
      <returns>
        <dt> <i>outside-top</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          These functions return the x or y coordinate of the specified
          <i>drawable</i>. They always return zero if the <i>drawable</i> is a
          pixmap. These coordinates define the location of the top left pixel
          of the window's border or of the window, if it has no border. Used
          with <b>setf</b>, these functions also change the x or y coordinate
          of a window. However, the x or y coordinate of a pixmap cannot be
          changed.
        <p>
          Changing the x and y coordinates moves a window without changing its
          size or stacking priority. Moving a mapped window generates
          <b>:exposure</b> events on any formerly obscured windows.
        <p>
          When changing the position of a window, if the override-redirect
          attribute of the window is <b>:off</b> and some other client has
          selected <b>:substructure-redirect</b> on the parent, a
          <b>:configure-request</b> event is generated, and no further
          processing is performed.  Otherwise, the window is moved.
      <args>
        <dt> <i>drawable</i> <dd> A <b>drawable</b> object.
    </defun>
    
    <defun>
      <name> window-all-event-masks
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>all-event-masks</i> <dd> Type <b>mask32</b>.
      <desc>
        <p>
          Returns the inclusive-or of the event masks selected on the
          specified <i>window</i> by all clients.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> setf
      <ll>   (<b>window-background</b>) <i>window background</i>
      <kind> Function
      <returns>
        <dt> <i>background</i> <dd> Either a <b>pixel</b>, a <b>pixmap</b>, <b>:none</b>, or <b>:parent-relative</b>.
      <desc>
        <p>
          Changes the <i>background</i> attribute of the <i>window</i> to the
          specified value. This operation is not allowed on an
          <b>:input-only</b> window. Changing the background does not cause
          the window contents to be changed. Note that the background of a
          window cannot be returned from the X server. The default background
          of a new window is <b>:none</b>.
        <p>
          In general, the server automatically fills in exposed areas of the
          window when they are first made visible. A background pixmap is
          tiled to fill each area. However, if the background is <b>:none</b>,
          the server will not modify exposed areas. If the background is
          <b>:parent-relative</b>, the window and its parent must have the
          same depth. In this case, the window shares the same background as
          its parent. The parent's background is not copied and is reexamined
          whenever the window's background is required. If the background is
          <b>:parent-relative</b>, the background pixmap tile origin is the
          same as the parent's; otherwise, the tile origin is the window
          origin.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>background</i> <dd> Either a <b>pixel</b>, a <b>pixmap</b>, <b>:none</b>, or <b>:parent-relative</b>.
    </defun>
    
    <defun>
      <name> window-backing-pixel
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>backing-pixel</i> <dd> Type <b>pixel</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the value of the
          backing-pixel attribute for the specified <i>window</i>. Changing
          the backing-pixel attribute of a mapped window may have no immediate
          effect. The default backing-pixel of a new window is zero.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-backing-planes
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>backing-planes</i> <dd> Type <b>pixel</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the value of the
          backing-planes attribute for the specified <i>window</i>. Changing
          the backing-planes attribute of a mapped window may have no
          immediate effect. The default backing-planes of a new window is all
          one's.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-backing-store
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>backing-store-type</i> <dd> One of <b>:always</b>, <b>:not-useful</b>, or <b>:when-mapped</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the value of the
          backing-store attribute for the specified <i>window</i>. Changing
          the backing-store attribute of an obscured window to
          <b>:when-mapped</b> or <b>:always</b> may have no immediate
          effect. The default backing-store of a new window is
          <b>:not-useful</b>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-bit-gravity
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>bit-gravity</i> <dd> Type <b>bit-gravity</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the bit-gravity attribute of
          the <i>window</i>. If a window is reconfigured without changing its
          inside width or height, the contents of the window move with the
          window and are not lost. Otherwise, the contents of the resized
          window are either moved or lost, depending on its bit-gravity
          attribute. The default bit-gravity of a new window is
          <b>:forget</b>.
        <p>
          For example, suppose a window's size is changed by <i>W</i> pixels
          in width and <i>H</i> pixels in height. The following table shows,
          for each bit-gravity value, the change in position (relative to the
          window origin) that results for each pixel of the window contents.
        <table border=1>
          <tr> <th><b>Bit-Gravity</b>                <th><b>X Change</b>            <th><b>Y Change</b>
              
          <tr> <td><b>:center</b>                    <td><i>W/</i>2                 <td><i>H/</i>2
          <tr> <td><b>:east</b>                      <td><i>W</i>                   <td><i>H/</i>2
          <tr> <td><b>:north</b>                     <td><i>W/</i>2                 <td>0
          <tr> <td><b>:north-east</b>                <td><i>W</i>                   <td>0
          <tr> <td><b>:north-west</b>                <td>0                          <td>0
          <tr> <td><b>:south</b>                     <td><i>W/</i>2                 <td><i>H</i>
          <tr> <td><b>:south-east</b>                <td>W                          <td>H
          <tr> <td><b>:south-west</b>                <td>0                          <td>H
          <tr> <td><b>:west</b>                      <td>0                          <td>H/2
        </table>
        <p>
          A <b>:static</b> bit-gravity indicates the contents or window should
          not move relative to the origin of the root window.
        <p>
          A server can choose to ignore the specified bit-gravity attribute
          and use <b>:forget</b> instead.  A <b>:forget</b> bit-gravity
          attribute indicates that the window contents are always discarded
          after a size change, even if backing-store or save-under attributes
          are <b>:on</b>. The window's background is displayed (unless it is
          <b>:none</b>), and zero or more <b>:exposure</b> events are
          generated.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> setf
      <ll>   (<b>window-border</b>) <i>window border</i>
      <kind> Function
      <returns>
        <dt> <i>border</i> <dd> Either a <b>pixel</b>, a <b>pixmap</b>, or <b>:copy</b>.
      <desc>
        <p>
          Changes the <i>border</i> attribute of the <i>window</i> to the
          specified value. This operation is not allowed on an
          <b>:input-only</b> window. Changing the border attribute also causes
          the window border to be repainted. Note that the border of a window
          cannot be returned from the X server. The default border of a new
          window is <b>:copy</b>.
        <p>
          A border pixmap is tiled to fill the border. The border pixmap tile
          origin is the same as the background tile origin. A border pixmap
          and the window must have the same root and depth. If the border is
          <b>:copy</b>, the parent's border is copied and used; subsequent
          changes to the parent's border do not affect the window border.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>border</i> <dd> Either a <b>pixel</b>, a <b>pixmap</b>, or <b>:copy</b>.
    </defun>
    
    <defun>
      <name> window-class
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>class</i> <dd> Either <b>:input-output</b> or <b>:input-only</b>.
      <desc>
        <p>
          Returns the <i>class</i> of the specified <i>window</i>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-colormap
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>colormap</i> <dd> Type <b>colormap</b> or <b>null</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the value of the colormap
          attribute for the specified <i>window</i>. A value of <b>:copy</b>
          is never returned, since the parent's colormap attribute is actually
          copied, but the attribute can be set to <b>:copy</b> in a
          <b>setf</b> form. Changing the colormap of a window (defining a new
          map, not changing the contents of the existing map) generates a
          <b>:colormap-notify</b> event. Changing the colormap of a visible
          window may have no immediate effect on the screen (see
          <b>install-colormap</b>). The default colormap of a new window is
          <b>:copy</b>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-colormap-installed-p
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>colormap-installed-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns non-<b>nil</b> if the colormap associated with this
          <i>window</i> is installed. Otherwise, this function returns
          <b>nil</b>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> setf (<b>window-cursor</b>)
      <ll>   <i>window cursor</i>
      <kind> Function
      <returns>
        <dt> <i>cursor</i> <dd> Type <b>cursor</b> or <b>:none</b>.
      <desc>
        <p>
          Changes the <i>cursor</i> attribute of the <i>window</i> to the specified value. Changing the cursor
          of a root window to <b>:none</b> restores the default cursor. Note that the cursor of window
          cannot be returned from the X server. The default cursor of a new window is <b>:none</b>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>cursor</i> <dd> Either <b>cursor</b> or <b>:none</b>.
    </defun>
    
    <defun>
      <name> window-display
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>display</i> <dd> Type <b>display</b>.
      <desc>
        <p>
          Returns the <b>display</b> object associated with the specified
          <i>window</i>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-do-not-propagate-mask
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>do-not-propagate-mask</i> <dd> Type <b>mask32</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the do-not-propagate-mask
          attribute for the window.  The default do-not-propagate-mask of a new
          window is zero.
        <p>
          If a window receives an event from one of the user input devices, and
          if no client has selected to receive the event, the event can instead
          be propagated up the window hierarchy to the first ancestor for which
          some client has selected it. However, any event type selected by the
          do-not-propagate-mask is not be propagated. The types of events that
          can be selected by the do-not-propagate-mask are those of type
          <b>device-event-mask-class</b>. See <ref name=selecting-events>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-equal
      <ll>   <i>window-1 window-2</i>
      <kind> Function
      <returns>
        <dt> <i>equal-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns non-<b>nil</b> if the two arguments are the same window, and
          <b>nil</b> if they are not.
      <args>
        <dt> <i>window-1</i>, <i>window-2</i> <dd> The windows to compare for equality.
    </defun>
    
    <defun>
      <name> window-event-mask
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>event-mask</i> <dd> Type <b>mask32</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the value of the event-mask
          attribute for the <i>window</i>.  The default event-mask of a new
          window is zero.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-gravity
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>gravity</i> <dd> Type <b>win-gravity</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the gravity attribute of the
          <i>window</i>. If a parent window is reconfigured without changing its
          inside width or height, then all child windows move with the parent
          and are not changed. Otherwise, each child of the resized parent is
          moved, depending on the child's gravity attribute. The default gravity
          of a new window is <b>:north-west</b>.
        <p>
          For example, suppose the size of the window's parent is changed by
          <i>W</i> pixels in width and <i>H</i> pixels in height. The following
          table shows, for each possible gravity value, the resulting change in
          the window's position relative to its parent's origin. When the window
          is moved, two events are generated--a <b>:configure-notify</b> event
          followed by a <b>:gravity-notify</b> event.
        <table border=1>
          <tr><th><b>Gravity</b>      <th><b>X Change</b> <th><b>Y Change</b>
          <tr><td><b>:center</b>      <td><i>W/</i>2      <td><i>H/</i>2
          <tr><td><b>:east</b>        <td><i>W</i>        <td><i>H/</i>2
          <tr><td><b>:north</b>       <td><i>W/</i>2      <td>0
          <tr><td><b>:north-east</b>  <td><i>W</i>        <td>0
          <tr><td><b>:north-west</b>  <td>0               <td>0
          <tr><td><b>:south</b>       <td><i>W/</i>2      <td><i>H</i>
          <tr><td><b>:south-east</b>  <td>W               <td>H
          <tr><td><b>:south-west</b>  <td>0               <td>H
          <tr><td><b>:west</b>        <td>0               <td>H/2
        </table>
        <p>
          A <b>:static</b> gravity indicates that the position of the window
          should not move relative to the origin of the root window.
        <p>
          An <b>:unmap</b> gravity is like <b>:north-west</b>, except the window
          is also unmapped and an <b>:unmap-notify</b> event is generated. This
          <b>:unmap-notify</b> event is generated after the
          <b>:configure-notify</b> event is generated for the parent.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-id
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>id</i> <dd> Type <b>resource-id</b>.
      <desc>
        <p>
          Returns the unique ID assigned to <i>window</i>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-map-state
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>map-state</i> <dd> One of <b>:unmapped</b>, <b>:unviewable</b>, or <b>:viewable</b>.
      <desc>
        <p>
          Returns the map state of <i>window</i>. A window is <b>:unviewable</b>
          if it is mapped but some ancestor is unmapped.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-override-redirect
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>override-redirect</i> <dd> Either <b>:on</b> or <b>:off</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the value of the
          override-redirect attribute for <i>window</i>.  The default
          override-redirect of a new window is <b>:off</b>.
        <p>
          The override-redirect attribute determines whether or not attempts to
          change window geometry or parent hierarchy can be <i>redirected</i> by
          a window manager or some other client. The functions that might be
          affected by the override-redirect attribute are
          <b>circulate-window-down</b>, <b>circulate-window-up</b>,
          <b>drawable-border-width</b>, <b>drawable-height</b>,
          <b>drawable-width</b>, <b>drawable-x</b>, <b>drawable-y</b>,
          <b>map-window</b>, and <b>window-priority</b>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-p
      <ll>   <i>object</i>
      <kind> Function
      <returns>
        <dt> <i>window-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns non-<b>nil</b> if the <i>object</i> argument is a window; otherwise, it returns <b>nil</b>.
    </defun>
    
    <defun>
      <name> window-plist
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>plist</i> <dd> A property list.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the property list for the specified
          <i>window</i>. This function provides a hook where extensions can hang
          data.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> setf
      <ll>   (<b>window-priority</b> <i>window</i>) (&amp;optional <i>sibling</i>) <i>mode</i>
      <kind> Function
      <returns>
        <dt> <i>mode</i> <dd> One of <b>:above</b>, <b>:below</b>, <b>:bottom-if</b>, <b>:opposite</b>, or <b>:top-if</b>.
      <desc>
        <p>
          Changes the stacking priority element of the <i>window</i> to the
          specified value. It is an error if the <i>sibling</i> argument is
          specified and is not actually a sibling of the window. Note that the
          priority of an existing window cannot be returned from the X server.
        <p>
          When changing the priority of a window, if the override-redirect
          attribute of the window is <b>:off</b> and some other client has
          selected :substructure-redirect on the parent, a :configure-request
          event is generated, and no further processing is
          performed. Otherwise, the priority is changed.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>sibling</i> 
        <dd> An optional argument specifying that <i>window</i> is to be restacked relative to this
          sibling <b>window</b>.
        <dt> <i>mode</i> <dd> One of <b>:above</b>, <b>:below</b>, <b>:bottom-if</b>, <b>:opposite</b>, or <b>:top-if</b>.
    </defun>
    
    <defun>
      <name> window-save-under
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>save-under</i> <dd> Either <b>:on</b> or <b>:off</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the value of the save-under
          attribute for the specified <i>window</i>. Changing the save-under
          attribute of a mapped window may have no immediate effect.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> window-visual
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>visual-type</i> <dd> Type <b>card29</b>.
      <desc>
        <p>
          Returns the <i>visual-type</i> associated with the specified <i>window</i>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    
    <defun>
      <name> with-state
      <ll>   <i>drawable</i> &amp;body <i>body</i>
      <kind> Macro
      <desc>
        <p>
          Batches successive read and write accesses to window attributes and
          drawable geometry, in order to minimize the number of requests sent to
          the server. Batching occurs automatically within the dynamic extent of
          the <i>body</i>. The <i>body</i> is not executed within a
          <b>with-display</b> form.
        <p>
          All window attributes can be returned or changed in a single
          request. Similarly, all drawable geometry values can be returned or
          changed in a single request. <b>with-state</b> combines accesses to
          these values into the minimum number of server requests necessary to
          guarantee that each read access returns the current server state of
          the <i>drawable</i>.  The number of server requests sent depends on
          the sequence of calls to reader and <b>setf</b> functions within the
          dynamic extent of the <i>body</i>. There are two groups of reader and
          <b>setf</b> functions--the Window Attributes group and the Drawable
          Geometry group--as shown in Table 4-1.
          <!-- <b>Table 4-1</b> <b>Groups of Reader and Setf Functions</b> -->
        <table border=1>
          <caption>Groups of Reader and Setf Functions</caption>
          <tr><th><b>Group</b>                     <th><b>Reader Functions</b>                <th><b>Setf Functions</b>
              <!-- -->
          <tr><td rowspan=15>Window Attributes<td><b>window-all-event-masks</b>       <td><b>window-background</b>
          <tr>                                <td><b>window-backing-pixel</b>         <td><b>window-backing-pixel</b>
          <tr>                                <td><b>window-backing-planes</b>        <td><b>window-backing-planes</b>
          <tr>                                <td><b>window-backing-store</b>         <td><b>window-backing-store</b>
          <tr>                                <td><b>window-bit-gravity</b>           <td><b>window-bit-gravity</b>
          <tr>                                <td><b>window-class</b>                 <td><b>window-border</b>
          <tr>                                <td><b>window-colormap</b>              <td><b>window-colormap</b>
          <tr>                                <td><b>window-colormap-installed-p</b>  <td><b>window-cursor</b>
          <tr>                                <td><b>window-do-not-propagate-mask</b> <td><b>window-do-not-propagate-mask</b>
          <tr>                                <td><b>window-event-mask</b>            <td><b>window-event-mask</b>
          <tr>                                <td><b>window-gravity</b>               <td><b>window-gravity</b>
          <tr>                                <td><b>window-map-state</b>             <td>
          <tr>                                <td><b>window-override-redirect</b>     <td><b>window-override-redirect</b>
          <tr>                                <td><b>window-save-under</b>            <td><b>window-save-under</b>
          <tr>                                <td><b>window-visual</b>                <td>
              <!-- -->
          <tr><td rowspan=7>Drawable Geometry      <td><b>drawable-border-width</b>           <td><b>drawable-border-width</b>
          <tr>                                     <td><b>drawable-depth</b>                  <td><b>drawable-height</b>
          <tr>                                     <td><b>drawable-height</b>                 <td><b>drawable-width</b>
          <tr>                                     <td><b>drawable-root</b>                   <td><b>drawable-x</b>
          <tr>                                     <td><b>drawable-width</b>                  <td><b>drawable-y</b>
          <tr>                                     <td><b>drawable-x</b>                      <td><b>window-priority</b>
          <tr>                                     <td><b>drawable-y</b>                      <td>
        </table>
        <p>
          The results from a sequence of calls to <b>setf</b> functions in a
          given group are cached and sent in a single server request, either
          upon exit from the <i>body</i> or when a reader function from the
          corresponding group is called.
        <p>
          <b>with-state</b> sends a single request to update all its cached
          values for the <i>drawable</i> before the first call to a reader
          function within the <i>body</i> and also before the first call to a
          reader function following a sequence of calls to <b>setf</b>
          functions from the corresponding group.
      <args>
        <dt> <i>drawable</i> <dd> A <b>display</b>.
        <dt> <i>body</i> <dd> The forms in which attributes accesses are batched.
    </defun>
    
    <h2>4.4 Stacking Order</h2>     
    
    <p>
      Sibling windows can <i>stack</i> on top of each other. Windows above can
      <i>obscure</i> or <i>occlude</i> lower windows. This relationship
      between sibling windows is known as the stacking order. The
      <b>window-priority</b> function can be used to change the stacking order
      of a single window. CLX also provides functions to raise or lower
      children of a window.  Raising a mapped window can generate
      <b>:exposure</b> events for the window and any mapped subwindows that
      were formerly obscured. Lowering a mapped window can generate
      <b>:exposure</b> events on any windows it formerly obscured.
      
    <defun>
      <name> circulate-window-down
      <ll>   <i>window</i>
      <kind> Function
      <desc>
        <p>
          Lowers the highest mapped child of the specified <i>window</i>
          that partially or completely occludes another child to the bottom
          of the stack. Completely unobscured children are
          unaffected. Exposure processing is performed on formerly obscured
          windows.
        <p>
          If some other client has selected <b>:substructure-redirect</b> on
          the <i>window</i>, a <b>:circulate-request</b> event is generated,
          and no further processing is performed. Otherwise, the child
          window is lowered and a <b>:circulate-notify</b> event is
          generated if the <i>window</i> is actually restacked.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> circulate-window-up
      <ll>   <i>window</i>
      <kind> Function
      <desc>
        <p>
          Raises the lowest mapped child of the specified <i>window</i> that
          is partially or completely occluded by another child to the top of
          the stack. Completely unobscured children are unaffected. Exposure
          processing is performed on formerly obscured windows.
        <p>
          If another client has selected <b>:substructure-redirect</b> on
          the <i>window</i>, a <b>:circulate-request</b> event is generated,
          and no further processing is performed. Otherwise, the child
          window is raised and a <b>:circulate-notify</b> event is generated
          if the <i>window</i> is actually restacked.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <h2>4.5 Window Hierarchy</h2>
    
    <p>
      All the windows in X are arranged in a strict hierarchy. At the top of
      the hierarchy are the root windows, which cover the display
      screens. Each root window is partially or completely covered by its
      child windows. All windows, except for root windows, have parents. Child
      windows can have their own children. In this way, a tree of arbitrary
      depth on each screen can be created. CLX provides several functions for
      examining and modifying the window hierarchy.
      
    <defun>
      <name> drawable-root
      <ll>   <i>drawable</i>
      <kind> Function
      <returns>
        <dt> <i>root-window</i> <dd> Type <b>window</b>.
      <desc>
        <p>
          Returns the root window of the specified <i>drawable</i>.
      <args>
        <dt> <i>drawable</i> <dd> A <b>drawable</b>.
    </defun>
    
    <defun>
      <name> query-tree
      <ll>   <i>window</i> &amp;key (<b>:result-type `list</b>)
      <kind> Function
      <returns>
        <dt> <i>children</i> <dd> Type <b>sequence</b> of <b>window</b>.
        <dt> <i>parent</i> <dd> Type <b>window</b> or <b>null</b>.
        <dt> <i>root</i> <dd> Type <b>window</b>.
      <desc>
        <p>
          Returns the <i>children</i> windows, the <i>parent</i> window, and
          the <i>root</i> window for the specified <i>window</i>. The children
          are returned as a sequence of windows in current stacking order,
          from bottom-most (first) to top-most (last). The <b>:result-type</b>
          specifies the type of children sequence returned.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <b>:result-type</b> <dd> A valid type specifier for a sub-type of <b>sequence</b>. The default is a <b>list</b>.
    </defun>
    
    <defun>
      <name> reparent-window
      <ll>   <i>window parent x y</i>
      <kind> Function
      <desc>
        <p>
          Changes a <i>window</i>'s <i>parent</i> within a single
          screen. There is no way to move a window between screens.
        <p>
          The specified <i>window</i> is reparented by inserting it as a child
          of the specified <i>parent</i>. If the <i>window</i> is mapped, an
          <b>unmap-window</b> operation is automatically performed on the
          specified <i>window</i>. The <i>window</i> is then removed from its
          current position in the hierarchy and inserted as the child of the
          specified <i>parent</i>. The <i>window</i> is placed on top in the
          stacking order with respect to sibling windows.
        <p>
          After reparenting the specified <i>window,</i> a
          <b>:reparent-notify</b> event is generated. The override-redirect
          attribute of the <i>window</i> is passed on in this event. Window
          manager clients normally should ignore this event if this attribute
          is <b>:on</b>. See <ref name=events-and-input>, for more
          information on <b>:reparent-notify</b> event processing. Finally, if
          the specified <i>window</i> was originally mapped, a
          <b>map-window</b> operation is automatically performed on it.
        <p>
          The X server performs normal exposure processing on formerly
          obscured windows. It might not generate <b>:exposure</b> events for
          regions from the initial <b>unmap-window</b> operation if they are
          immediately obscured by the final <b>map-window</b> operation.
        <p>
          It is an error if any of the following are true:
        <ul>
          <li>
            The new <i>parent</i> window is not on the same screen as the old parent window.
          <li>
            The new <i>parent</i> window is the specified <i>window</i> or an
            inferior of the specified <i>window</i>.
          <li>
            The specified <i>window</i> has a <b>:parent-relative</b>
            background attribute and the new <i>parent</i> window is not the
            same depth as the specified <i>window</i>.
        </ul>
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>parent</i> <dd> The new parent <b>window</b>.
        <dt> <i>x</i>, <i>y</i> 
        <dd>
          The position (type <b>int16</b>) of the <i>window</i> in its new
          <i>parent</i>. These coordinates are relative to the <i>parent</i>'s
          origin, and specify the new position of the upper, left, outer
          corner of the <i>window</i>.
    </defun>
    
    <defun>
      <name> translate-coordinates
      <ll>   <i>source source-x source-y destination</i>
      <kind> Function
      <returns>
        <dt> <i>destination-x</i> <dd> Type <b>int16</b> or <b>null</b>.
        <dt> <i>destination-y</i> <dd> Type <b>int16</b> or <b>null</b>.
        <dt> <i>destination-child</i> <dd> Type <b>window</b> or <b>null</b>.
      <desc>
        <p>
          Returns the position defined by <i>source-x</i> and <i>source-y</i>
          (relative to the origin of the <i>source</i> window), expressed as
          coordinates relative to the origin of the <i>destination</i> window.
      <args>
        <dt>
          <i>source</i>
        <dd>
          A <b>window</b> defining the source coordinate system.
        <dt>
          <i>source-x</i>, <i>source-y</i> 
        <dd>
          Coordinates (<b>int16</b>) relative to the origin of the
          <i>source</i> <b>window</b>.
        <dt>
          <i>destination</i>
        <dd>
          A <b>window</b> defining the destination coordinate system.
    </defun>
    
    <h2>4.6 Mapping Windows</h2>
    <p>
      A window is considered mapped if a <b>map-window</b> call has been made
      on it. When windows are first created, they are not mapped because an
      application may wish to create a window long before it is mapped to the
      screen. A mapped window may not be visible on the screen for one of the
      following reasons:
    <ul>
      <li> It is obscured by another opaque sibling window.
      <li> One of its ancestors is not mapped.
      <li> It is entirely clipped by an ancestor.
    </ul>
    <p>
      A subwindow will appear on the screen as long as all of its ancestors
      are mapped and not obscured by a sibling or clipped by an
      ancestor. Mapping a window that has an unmapped ancestor does not
      display the window, but marks it as eligible for display when the
      ancestor becomes mapped. Such a window is called unviewable. When all
      its ancestors are mapped, the window becomes viewable and remains
      visible on the screen if not obscured by any sibling or ancestor.
    <p>
      Any output to a window not visible on the screen is
      discarded. <b>:exposure</b> events are generated for the window when
      part or all of it becomes visible on the screen. A client only receives
      the <b>:exposure</b> events if it has selected them. Mapping or
      unmapping a window does not change its stacking order priority.
      
    <defun>
      <name> map-window
      <ll> <i>window</i>
      <kind> Function
      <desc>
        <p>
          Maps the <i>window</i>. This function has no effect when the
          <i>window</i> is already mapped.
        <p>
          If the override-redirect attribute of the <i>window</i> is
          <b>:off</b> and another client has selected
          <b>:substructure-redirect</b> on the parent window, the X server
          generates a <b>:map-request</b> event and the <b>map-window</b>
          function does not map the <i>window</i>. Otherwise, the
          <i>window</i> is mapped, and the X server generates a
          <b>:map-notify</b> event.
        <p>
          If the <i>window</i> becomes visible and no earlier contents for it
          are remembered, <b>map-window</b> tiles the window with its
          background. If no background was defined for the window, the
          existing screen contents are not altered, and the X server generates
          one or more <b>:exposure</b> events. If a backing-store was
          maintained while the window was unmapped, no <b>:exposure</b> events
          are generated. If a backing-store will now be maintained, a full
          window exposure is always generated. Otherwise, only visible regions
          may be reported.  Similar tiling and exposure take place for any
          newly viewable inferiors.
        <p>
          <b>map-window</b> generates <b>:exposure</b> events on each
          <b>:input-output</b> window that it causes to become visible.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> map-subwindows
      <ll> <i>window</i>
      <kind> Function
      <desc>
        <p>
          Maps all child windows for a specified <i>window</i> in
          top-to-bottom stacking order. The X server generates an
          <b>:exposure</b> event on each newly visible window. This function
          is much more efficient than mapping each child individually.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> unmap-window
      <ll><i>window</i>
      <kind> Function
      <desc>
        <p>
          Unmaps the specified <i>window</i> and causes the X server to
          generate an <b>:unmap-notify</b> event. If the specified
          <i>window</i> is already unmapped, <b>unmap-window</b> has no
          effect.  Normal exposure processing on formerly obscured windows is
          performed. Any child window is no longer viewable. Unmapping the
          <i>window</i> generates <b>:exposure</b> events on windows that were
          formerly obscured by <i>window</i> and its children.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> unmap-subwindows
      <ll> <i>window</i>
      <kind> Function
      <desc>
        <p>
          Unmaps all child windows for the specified <i>window</i> in bottom
          to top stacking order. The X server generates an
          <b>:unmap-notify</b> event on each child and <b>:exposure</b> events
          on formerly obscured windows. Using this function is much more
          efficient than unmapping child windows individually.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <h2>4.7 Destroying Windows</h2>
    
    <p>
      CLX provides functions to destroy a window or destroy all children of a
      window. Note that by default, windows are destroyed when a connection is
      closed. For further information, see <ref name=closing-the-display>,
      and <ref name=client-termination>.
      
    <defun>
      <name> destroy-window
      <ll> <i>window</i> 
      <kind> Function
      <desc>
        <p>
          Destroys the specified <i>window</i> as well as all of its
          inferiors. The windows should never again be referenced. If the
          specified <i>window</i> is mapped, it is automatically unmapped.
          The window and all of its inferiors are then destroyed, and a
          <b>:destroy-notify</b> event is generated for each window. The
          ordering of the <b>:destroy-notify</b> events is such that for any
          given window being destroyed, <b>:destroy-notify</b> is generated on
          the window's inferiors before being generated on the window. The
          ordering among siblings and across sub-hierarchies is not otherwise
          constrained. If the <i>window</i> is a root window, no windows are
          destroyed. Destroying a mapped window generates <b>:exposure</b>
          events on other windows that the mapped window obscured.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <defun>
      <name> destroy-subwindows
      <ll> <i>window</i>
      <kind> Function
      <desc>
        <p>
          Destroys all inferiors of the specified <i>window</i>, in bottom to
          top stacking order. The X server generates a <b>:destroy-notify</b>
          event for each window. This is much more efficient than deleting
          many windows individually. The inferiors should never be referenced
          again.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
    </defun>
    
    <h2 name=pixmaps>4.8 Pixmaps</h2>
    
    <p>
      A <i>pixmap</i> is a three-dimensional array of bits. A pixmap is
      normally thought of as a two-dimensional array of pixels, where each
      pixel can be a value from 0 to 2<sup><i>n</i></sup>-1, where <i>n</i> is the
      depth of the pixmap. A pixmap can also be thought of as a stack of
      <i>n</i> bitmaps. A <i>bitmap</i> is a single bit pixmap of depth 1. CLX
      provides functions to:
      
    <ul>
      <li> Create or free a pixmap
      <li> Test if an object is a pixmap
      <li> Test if two pixmap objects are equal
      <li> Return the pixmap resource ID from a <b>pixmap</b> object
    </ul>
    
    <p>
      Note that pixmaps can only be used on the screen where they were
      created. Pixmaps are off-screen server resources that are used for a
      number of operations. These include defining patterns for cursors or as
      the source for certain raster operations.
      
    <defun>
      <name> create-pixmap
      <ll>   &amp;key <b>:width :height :depth :drawable</b>
      <kind> Function
      <returns>
        <dt> <i>pixmap</i> <dd> Type <b>pixmap</b>.
      <desc>
        <p>
          Creates a pixmap of the specified <b>:width</b>, <b>:height</b>, and
          <b>:depth</b>. It is valid to pass a window whose class is
          <b>:input-only</b> as the <b>:drawable</b> argument. The <b>:width</b>
          and <b>:height</b> arguments must be nonzero. The <b>:depth</b> must
          be supported by the screen of the specified <b>:drawable</b>.
      <args>
        <dt> <b>:width</b>, <b>:height</b> <dd> The nonzero width and height (type <b>card16</b>).
        <dt> <b>:depth</b> <dd> The depth (type <b>card8</b>) of the pixmap.
        <dt> <b>:drawable</b> <dd> A <b>drawable</b> which determines the screen where the pixmap will be used.
    </defun>
    
    <defun>
      <name> free-pixmap
      <ll> <i>pixmap</i>
      <kind> Function
      <desc>
        <p>
          Allows the X server to free the pixmap storage when no other server
          resources reference it. The pixmap should never be referenced again.
      <args>
        <dt> <i>pixmap</i> <dd> A <b>pixmap</b>.
    </defun>
    
    <defun>
      <name> pixmap-display
      <ll>   <i>pixmap</i>
      <kind> Function
      <returns>
        <dt> <i>display</i> <dd> Type <b>display</b>.
      <desc>
        <p>
          Returns the <b>display</b> object associated with the specified <i>pixmap</i>.
      <args>
        <dt> <i>pixmap</i> <dd> A <b>pixmap</b>.
    </defun>
    
    <defun>
      <name> pixmap-equal
      <ll> <i>pixmap-1 pixmap-2</i>
      <kind> Function
      <desc>
        <p>
          Returns true if the two arguments refer to the same server resource,
          and <b>nil</b> if they do not.
      <args>
        <dt>
          <i>pixmap-1</i>, <i>pixmap-2</i> 
        <dd>
          A three-dimensional array of bits to be tested.
    </defun>
    
    <defun>
      <name> pixmap-id
      <ll>   <i>pixmap</i>
      <kind> Function
      <returns>
        <dt> <i>id</i> <dd> Type <b>resource-id</b>.
      <desc>
        <p>
          Returns the unique resource ID that has been assigned to the specified
          <i>pixmap</i>.
      <args>
        <dt> <i>pixmap</i> <dd> A <b>pixmap</b>.
    </defun>
    
    <defun>
      <name> pixmap-p
      <ll>   <i>object</i>
      <kind> Function
      <returns>
        <dt> <i>pixmap</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns true if the argument is a <b>pixmap</b> object and <b>nil</b>
          otherwise.
    </defun>
    
    <defun>
      <name> pixmap-plist
      <ll>   <i>pixmap</i>
      <kind> Function
      <returns>
        <dt> <i>plist</i> <dd> A property list.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the property list for the
          specified <i>pixmap</i>. This function provides a hook where
          extensions can add data.
      <args>
        <dt> <i>pixmap</i> <dd> A <b>pixmap</b>.
    </defun>
    
    <h1 name=graphics-contexts>5 Graphics Contexts</h1>
    
    <h2>5.1 Introduction</h2>
    
    <p>
      Clients of the X Window System specify the visual attributes of
      graphical output primitives by using <i>graphics contexts</i>. A
      graphics context is a set of graphical attribute values such as
      foreground color, font, line style, and so forth. Like a window, a
      graphics context is another kind of X server resource which is created
      and maintained at the request of a client program. The client program,
      which may use several different graphics contexts at different times, is
      responsible for specifying a graphics context to use with each graphical
      output function.
    <p>
      CLX represents a graphics context by an object of type <b>gcontext</b>
      and defines functions to create, modify, and manipulate <b>gcontext</b>
      objects. By default, CLX also records the contents of graphics contexts
      in a cache associated with each display. This local caching of graphics
      contexts has two important advantages:
    <ol>
      <li>
        Communication efficiency -- Changes to attribute values in a
        <b>gcontext</b> are first made only in the local cache. Just before a
        <b>gcontext</b> is actually used, CLX automatically sends any changes
        to the X server, batching all changes into a single request.
      <li>
        Inquiring <b>gcontext</b> contents -- Accessor functions can be used
        to return the value of any individual <b>gcontext</b> component by
        reading the copy of the <b>gcontext</b> from the cache. This kind of
        inquiry is not supported by the basic X protocol. There is no way for
        a client program to request an X server to return the contents of a
        <b>gcontext</b>.
    </ol>
    <p>
      Caching graphics contexts can result in a synchronization problem if
      more than one client program modifies a graphics context. However, this
      problem is unusual. Sharing a graphics context among several clients,
      while possible, is not expected to be useful and is not very easy to
      do. At any rate, a client program can choose to not cache a
      <b>gcontext</b> when it is created.
    <p>
      Each client program must determine its own policy for creating and using
      graphics contexts. Depending on the display hardware and the server
      implementation, creating a new graphics context can be more or less
      expensive than modifying an existing one. In general, some amount of
      graphics context information can be cached in the display hardware, in
      which case modifying the hardware cache is faster than replacing
      it. Typical display hardware can cache only a small number of graphics
      contexts. Graphics output is fastest when only a few graphics contexts
      are used without heavy modifications.
    <p>
      This section explains the CLX functions used to:
    <ul>
      <li> Create a graphics context
      <li> Return the contents of a graphics context
      <li> Change the contents of a graphics context
      <li> Copy a graphics context
      <li> Free a graphics context
    </ul>
    
    <h2 name='creating-GCs'>5.2 Creating Graphics Contexts</h2>
    
    <p>
      To create a graphics context, use <b>create-gcontext</b>.
      
    <defun>
      <name> create-gcontext
      <ll> 
        &amp;key <b>:arc-mode :background</b> (<b>:cache-p</b> t) <b>:cap-style</b>                          
        <b>:clip-mask :clip-ordering :clip-x :clip-y :dash-offset :dashes</b>
        <b>:drawable :exposures :fill-rule :fill-style :font :foreground</b>
        <b>:function :join-style :line-style :line-width :plane-mask :stipple</b>
        <b>:subwindow-mode :tile :ts-x :ts-y</b>
      <kind> Function
      <returns>
        <dt> <i>gcontext</i> <dd> Type <b>gcontext</b>.
      <desc>
        <p>
          Creates, initializes, and returns a graphics context
          (<b>gcontext</b>). The graphics context can only be used with
          destination drawables having the same root and depth as the specified
          <b>:drawable</b>. If <b>:cache-p</b> is non-<b>nil</b>, the graphics
          context state is cached locally, and changing a component has no
          effect unless the new value differs from the cached value.  Changes to
          a graphics context (<b>setf</b> and <b>with-gcontext</b>) are always
          deferred regardless of the cache mode and sent to the server only when
          required by a local operation or by an explicit call to
          <b>force-gcontext-changes</b>.
        <p>
          All of the graphics context components are set to the values that are
          specified by the keyword arguments, except that a value of <b>nil</b>
          causes the default value to be used. These default values are as
          follows:
        <table border=1>
          <tr><th><b>Component</b>                  <th><b>Default Value</b>
              <!-- -->
          <tr><td><b>arc-mode</b>                   <td><b>:pie-slice</b>
          <tr><td><b>background</b>                 <td>1
          <tr><td><b>cap-style</b>                  <td><b>:butt</b>
          <tr><td><b>clip-mask</b>                  <td><b>:none</b>
          <tr><td><b>clip-ordering</b>              <td><b>:unsorted</b>
          <tr><td><b>clip-x</b>                     <td>0
          <tr><td><b>clip-y</b>                     <td>0
          <tr><td><b>dash-offset</b>                <td>0
          <tr><td><b>dashes</b>                     <td>4 (that is, the list '(4, 4))
          <tr><td><b>exposures</b>                  <td><b>:on</b>
          <tr><td><b>fill-rule</b>                  <td><b>:even-odd</b>
          <tr><td><b>fill-style</b>                 <td><b>:solid</b>
          <tr><td><b>font</b>                       <td>server dependent
          <tr><td><b>foreground</b>                 <td>0
          <tr><td><b>function</b>                   <td><b>boole-1</b>
          <tr><td><b>join-style</b>                 <td><b>:miter</b>
          <tr><td><b>line-style</b>                 <td><b>:solid</b>
          <tr><td><b>line-width</b>                 <td>0
          <tr><td><b>plane-mask</b>                 <td>A bit mask of all ones
          <tr><td><b>stipple</b>                    <td>Pixmap of unspecified size filled with ones
          <tr><td><b>subwindow-mode</b>             <td><b>:clip-by-children</b>
          <tr><td><b>tile</b>                       <td>Pixmap of an unspecified size filled with the
              foreground pixel (that is, the client-specified pixel
              if any, or else 0)
          <tr><td><b>ts-x</b>                       <td>0
          <tr><td><b>ts-y</b>                       <td>0
        </table>
        <p>
          Note that foreground and background do not default to any values that
          are likely to be useful on a color display. Since specifying a
          <b>nil</b> value means use the default, this implies for clip-mask
          that an empty rectangle sequence cannot be specified as an empty list;
          <b>:none</b> must be used instead. Specifying a <b>stringable</b> for
          font causes an implicit <b>open-font</b> call to occur.
      <args>
        <dt> <b>:cache-p</b>
        <dd>
          Specifies if this graphics context should be cached locally by CLX. If
          <b>nil</b> then the state is not cached, otherwise a local cache is
          kept.
        <dt> <b>:drawable</b>
        <dd>
          The <b>drawable</b> whose root and depth are to be associated with
          this graphics context. This is a required keyword argument.
        <dt>
          <b>:arc-mode</b>, <b>:background</b>, <b>:cap-style</b>,
          <b>:clip-mask</b>, <b>:clip-ordering</b>, <b>:clip-x</b>,
          <b>:clip-y</b>, <b>:dash-offset</b>, <b>:dashes</b>,
          <b>:exposures</b>, <b>:fill-rule</b>, <b>:fill-style</b>,
          <b>:font</b>, <b>:foreground</b>, <b>:function</b>,
          <b>:join-style</b>, <b>:line-style</b>, <b>:line-width</b>,
          <b>:plane-mask</b>, <b>:stipple</b>, <b>:subwindow-mode</b>,
          <b>:tile</b>, <b>:ts-x</b>, <b>:ts-y</b> 
        <dd>
          Initial attribute values for the graphics context.
    </defun>
    
    <h2>5.3 Graphics Context Attributes</h2>
    <p>
      The following paragraphs describe the CLX functions used to return or
      change the attributes of a <b>gcontext</b>. Functions that return the
      contents of a <b>gcontext</b> return <b>nil</b> if the last value stored
      is unknown (for example, if the <b>gcontext</b> was not cached or if the
      <b>gcontext</b> was not created by the inquiring client).
      
    <defun>
      <name> gcontext-arc-mode
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>arc-mode</i> <dd> Either <b>:chord</b> or <b>:pie-slice</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the arc-mode attribute of the specified graphics context.
        <p>
          The arc-mode attribute of a graphics context controls the kind of filling, if any, to be
          done by the <b>draw-arcs</b> function. A value of <b>:chord</b> specifies that arcs are filled inward
          to the chord between the end points of the arc. <b>:pie-slice</b> specifies that arcs are filled
          inward to the center point of the arc, creating a pie slice effect.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-background
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>background</i> <dd> Type <b>card32</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the background attribute of the
          specified graphics context.
        <p>
          The background attribute specifies the pixel value drawn for pixels
          that are not set in a bitmap and for pixels that are cleared by a
          graphics operation, such as the gaps in dashed lines.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-cache-p
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>cache-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the local cache mode for the <i>gcontext</i>. If true, the state of
          the <i>gcontext</i> is cached by CLX and changes to its attributes have no effect unless the new
          value differs from its cached value.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-cap-style
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>cap-style</i> <dd> One of <b>:butt</b>, <b>:not-last</b>, <b>:projecting</b>, or <b>:round</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the cap-style attribute of the
          specified graphics context.
        <p>
          The cap-style attribute of a graphics context defines how the end
          points of a path are drawn. The possible values and their
          interpretations are as follows:
        <table border=0 align=center>
          <tr>
            <th align=left width='20%'>Cap-Style
            <th align=left width='80%'>Interpretation
          <tr>    
            <td colspan=2><hr size=1 noshade>
          <tr>
            <td width='20%' valign=baseline align=left><b>:butt</b>                        
            <td width='80%' valign=baseline align=left>
              Square at the end point (perpendicular to the slope of the line)
              with no projection beyond.
          <tr>
            <td width='20%' valign=baseline align=left><b>:not-last</b>
            <td width='80%' valign=baseline align=left>
              Equivalent to <b>:butt</b>, except that for a line-width of zero
              or one the final end point is not drawn.
          <tr>
            <td width='20%' valign=baseline align=left><b>:projecting</b>
            <td width='80%' valign=baseline align=left>
              Square at the end, but the path continues beyond the end point for
              a distance equal to half the line-width. This is equivalent to
              <b>:butt</b> for line-width zero or one.
          <tr>
            <td width='20%' valign=baseline align=left><b>:round</b>
            <td width='80%' valign=baseline align=left>
              A circular arc with the radius equal to 1/2 of the line-width,
              centered on the end point. This is equivalent to <b>:butt</b> for
              line-width zero or one.
        </table>
        <p>
          The following table describes what happens when the end points of a
          line are identical.  The effect depends on both the cap style and line
          width.
        <table border=0 align=center>
          <tr>
            <th align=left valign=baseline width='20%'>Cap-Style
            <th align=left valign=baseline width='20%'>Line-Width
            <th align=left valign=baseline width='80%'>Effect
          <tr> <td colspan=3><hr size=1 noshade>
          <tr>
            <td align=left valign=baseline width='20%'><b>:butt</b>                   
            <td align=left valign=baseline width='20%'>thin
            <td align=left valign=baseline width='80%'>
              Device dependent, but the desired effect is that a single pixel is
              drawn.
          <tr>
            <td align=left valign=baseline width='20%'><b>:butt</b>                   
            <td align=left valign=baseline width='20%'>wide
            <td align=left valign=baseline width='80%'>
              Nothing is drawn.
          <tr>
            <td align=left valign=baseline width='20%'><b>:not-last</b>               
            <td align=left valign=baseline width='20%'>thin
            <td align=left valign=baseline width='80%'>
              Device dependent, but the desired effect is that nothing is drawn.
          <tr>
            <td align=left valign=baseline width='20%'><b>:projecting</b>             
            <td align=left valign=baseline width='20%'>thin
            <td align=left valign=baseline width='80%'>
              Same as <b>:butt</b> with thin line-width.
          <tr>
            <td align=left valign=baseline width='20%'><b>:projecting</b>             
            <td align=left valign=baseline width='20%'>wide
            <td align=left valign=baseline width='80%'>
              The closed path is a square, aligned with the coordinate axes,
              centered at the end point, with sides equal to the line-width.
          <tr>
            <td align=left valign=baseline width='20%'><b>:round</b>                  
            <td align=left valign=baseline width='20%'>wide
            <td align=left valign=baseline width='80%'>
              The closed path is a circle, centered at the end point, with
              diameter equal to the line-width.
          <tr>
            <td align=left valign=baseline width='20%'><b>:round</b>                  
            <td align=left valign=baseline width='20%'>thin
            <td align=left valign=baseline width='80%'>
              Same as <b>:butt</b> with thin line-width.
        </table>
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-clip-mask
      <ll>   <i>gcontext</i> &amp;optional <i>ordering</i>
      <kind> Function
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the clip-mask attribute of the
          graphics context.
        <p>
          When changing the clip-mask attribute, the new clip-mask can be
          specified as a pixmap or a <b>rect-seq</b> or as the values
          <b>:none</b> or <b>nil</b>. The ordering argument can be specified
          only with <b>setf</b> when the new clip-mask is a <b>rect-seq</b>.
        <p>
          The clip-mask attribute of a graphics context affects all graphics
          operations and is used to restrict output to the destination
          drawable. The clip-mask does not clip the source of a graphics
          operation. A value of <b>:none</b> for clip-mask indicates that no
          clipping is to be done.
        <p>
          If a pixmap is specified as the clip-mask, it must have depth one and
          the same root as the specified graphics context. Pixels where the
          clip-mask has a one bit are drawn. Pixels outside the area covered by
          the clip-mask or where the clip-mask has a zero bit are not drawn.
        <p>
          If a sequence of rectangles is specified as the clip-mask, the output
          is clipped to remain contained within the rectangles. The rectangles
          should be non-intersecting, or the results of graphics operations will
          be undefined. The rectangle coordinates are interpreted relative to
          the clip origin. Note that the sequence of rectangles can be empty,
          which effectively disables output. This is the opposite of setting the
          clip-mask to <b>:none</b>.
        <p>
          If known by the client, the ordering of clip-mask rectangles can be
          specified to provide faster operation by the server. A value of
          <b>:unsorted</b> means the rectangles are in arbitrary order. A value
          of <b>:y-sorted</b> means that the rectangles are non-decreasing in
          their Y origin. A <b>:yx-sorted</b> value is like <b>:y-sorted</b>
          with the additional constraint that all rectangles with an equal Y
          origin are non-decreasing in their X origin. A <b>:yx-banded</b> value
          additionally constrains <b>:yx-sorted</b> by requiring that, for every
          possible Y scan line, all rectangles that include that scan line have
          an identical Y origins and Y extents. If incorrect ordering is
          specified, the X server may generate an error, but it is not required
          to do so. If no error is generated, the results of the graphics
          operations are undefined.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
        <dt> <i>ordering</i> <dd> One of <b>:unsorted</b>, <b>:y-sorted</b>, <b>:yx-banded</b>, <b>:yx-sorted</b>, or <b>nil</b>.
    </defun>
    
    <defun>
      <name> gcontext-clip-x
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>clip-x</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the clip-x attribute of the
          specified graphics context.
        <p>
          The clip-x and clip-y attributes specify the origin for the clip-mask,
          whether it is a pixmap or a sequence of rectangles. These coordinates
          are interpreted relative to the origin of whatever destination
          drawable is specified in a graphics operation.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-clip-y
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>clip-y</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the clip-y attribute of the
          specified graphics context.
        <p>
          The clip-x and clip-y attributes specify the origin for the clip-mask,
          whether it is a pixmap or a sequence of rectangles. These coordinates
          are interpreted relative to the origin of whatever destination
          drawable is specified in a graphics operation.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-dash-offset
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>dash-offset</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the dash-offset attribute of
          the specified graphics context.
        <p>
          The dash-offset attribute of a graphics context defines the phase of
          the pattern contained in the dashes attribute. This phase specifies
          how many elements (pixels) into the path the pattern should actually
          begin in any single graphics operation. Dashing is continuous through
          path elements combined with a join-style, but is reset to the
          dash-offset each time a cap-style is applied at a line end point.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-dashes
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>dashes</i> <dd> Type <b>sequence</b> or <b>card8</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the dashes attribute of the
          specified graphics context.  The sequence must be non-empty and the
          elements must be non-zero <b>card8</b> values.
        <p>
          The dashes attribute in a graphics context specifies the pattern that
          is used for graphics operations which use the dashed line styles. It
          is a non-<b>nil</b> sequence with each element representing the length
          of a single dash or space. The initial and alternating elements of the
          dashes are the even dashes, while the others are the odd dashes. An
          odd length sequence is equivalent to the same sequence concatenated
          with itself to produce an even length sequence. All of the elements of
          a dashes sequence must be non-zero.
        <p>
          Specifying a single integer value, <i>N</i>, for the dashes attribute
          is an abbreviated way of specifying a two element sequence with both
          elements equal to the specified value [<i>N</i>, <i>N</i>].
        <p>
          The unit of measure for dashes is the same as in the ordinary
          coordinate system. Ideally, a dash length is measured along the slope
          of the line, but server implementations are only required to match
          this ideal for horizontal and vertical lines.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-display
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>display</i> <dd> Type <b>display</b>.
      <desc>
        <p>
          Returns the <b>display</b> object associated with the specified
          <i>gcontext</i>.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-equal
      <ll>   <i>gcontext-1 gcontext-2</i>
      <kind> Function
      <returns>
        <dt> <i>equal-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns true if the two arguments refer to the same server resource,
          and <b>nil</b> if they do not.
      <args>
        <dt> <i>gcontext-1</i>, <i>gcontext-2</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-exposures
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>exposures</i> <dd> Either <b>:off</b> or <b>:on</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the exposures attribute of the
          specified graphics context.
        <p>
          The exposures attribute in a graphics context controls the generation
          of <b>:graphics-exposure</b> events for calls to the <b>copy-area</b>
          and <b>copy-plane</b> functions. If <b>:on</b>,
          <b>:graphics-exposure</b> events will be reported when calling the
          <b>copy-area</b> and <b>copy-plane</b> functions with this graphics
          context. Otherwise, if <b>:off</b>, the events will not be reported.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-fill-rule
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>fill-rule</i> <dd> Either <b>:even-odd</b> or <b>:winding</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the fill-rule attribute of the
          specified graphics context.
        <p>
          The fill-rule attribute in a graphics context specifies the rule used
          to determine the interior of a filled area. It can be specified as
          either <b>:even-odd</b> or <b>:winding</b>.
        <p>
          The <b>:even-odd</b> rule defines a point to be inside if any infinite
          ray starting at the point crosses the border an odd number of
          times. Tangencies do not count as a crossing.
        <p>
          The <b>:winding</b> rule defines a point to be inside if any infinite
          ray starting at the point crosses an unequal number of clockwise and
          counterclockwise directed border segments. A clockwise directed border
          segment crosses the ray from left to right as observed from the
          point. A counterclockwise segment crosses the ray from right to left
          as observed from the point. The case where a directed line segment is
          coincident with the ray is uninteresting because you can simply choose
          a different ray that is not coincident with a segment.
        <p>
          For both <b>:even-odd</b> and <b>:winding</b>, a point is infinitely small, and the border is an
          infinitely thin line. A pixel is inside if the center point of the pixel is inside, and the center
          point is not on the border. If the center point is on the border, the pixel is inside if, and
          only if, the polygon interior is immediately to its right (x increasing direction). Pixels
          with centers along a horizontal edge are a special case and are inside if, and only if, the
          polygon interior is immediately below (y increasing direction).
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-fill-style
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>fill-style</i> <dd> One of <b>:opaque-stippled</b>, <b>:solid</b>, <b>:stippled</b>, or <b>:tiled</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the fill-style attribute of the
          specified graphics context.
        <p>
          The fill-style attribute of a graphics context defines the contents of
          the source for line, text, and fill graphics operations. It determines
          whether the source image is drawn with a solid color, a tile, or a
          stippled tile. The possible values and their meanings are as follows:
        <table border=1>
          <tr>
            <th><b>Fill-Style</b>
            <th><b>Meaning</b>
          <tr>
            <td><b>:opaque-stippled</b>
            <td>Filled with a tile with the same width and height as
              stipple, but with the background value used everywhere
              stipple has a zero and the foreground pixel value used
              everywhere stipple has a one.
          <tr>
            <td><b>:solid</b>
            <td>Filled with the foreground pixel value.
          <tr>
            <td><b>:stippled</b>
            <td>Filled with the foreground pixel value masked by
              stipple.
          <tr>
            <td><b>:tiled</b>
            <td>Filled with tile.
        </table>
        <p>
          When drawing lines with line-style <b>:double-dash</b>, the filling of
          the odd dashes are controlled by the fill-style in the following
          manner:
        <table border=1>
          <tr>
            <th><b>Fill-Style</b>
            <th><b>Effect</b>
          <tr>
            <td><b>:opaque-stippled</b>
            <td>Same as for even dashes.
          <tr>
            <td><b>:solid</b>
            <td>Filled with the background pixel value.
          <tr>
            <td><b>:stippled</b>
            <td>Filled with the background pixel value masked by stipple.
          <tr>
            <td><b>:tiled</b>
            <td>Filled the same as the even dashes.
        </table>
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-font
      <ll>   <i>gcontext</i> &amp;optional <i>metrics-p</i>
      <kind> Function
      <returns>
        <dt> <i>font</i> <dd> Type <b>font</b> or <b>null</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the <i>font</i> attribute of
          the specified graphics context. If the stored font is known, it is
          returned. If it is not known and the <i>metrics-p</i> argument is
          <b>nil</b>, then <b>nil</b> is returned. If the font is not known and
          <i>metrics-p</i> is true, then a pseudo-font is constructed and
          returned. For a constructed pseudo-font, full metric and property
          information can be obtained, but it does not have a name or a resource
          ID, and attempts to use it where a resource ID is required results in
          an invalid-font error.
        <p>
          The font attribute in a graphics context defines the default text font
          used in text drawing operations. When setting the value of the font
          attribute, either a <b>font</b> object or a font name can be used. If
          a font name is passed, <b>open-font</b> is call automatically to get
          the <b>font</b> object.
          
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
        <dt> <i>metrics-p</i>
        <dd>
          Specifies whether a pseudo-font is returned when the real font stored
          in the graphics context is not known. The default is <b>nil</b>, which
          means do not return a pseudo-font.
    </defun>
    
    
    <defun>
      <name> gcontext-foreground
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>foreground</i> <dd> Type <b>card32</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the foreground attribute of the specified graphics
          context.
        <p>
          The foreground attribute of a graphics context specifies the pixel
          value drawn for set bits in a bitmap and for bits set by a graphics
          operation.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-function
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>function</i> <dd> Type <b>boole-constant</b>.
      <desc>
        <p>
          Returns the <i>function</i> of the specified graphics context.
        <p>
          In all graphic operations, given a source pixel and a corresponding
          destination pixel, the resulting pixel drawn is computed bitwise on
          the bits of the source and destination pixels. That is, a logical
          operation is used to combine each bit plane of corresponding source
          and destination pixels. The graphics context function attribute
          specifies the logical operation used via one of the 16 operation codes
          defined by Common Lisp for the <b>boole</b> function.
        <p>
          The following table shows each of the logical operation codes that can
          be given by the function attribute. For each operation code, its
          result is shown as a logical function of a source pixel <i>S</i> and a
          destination pixel <i>D</i>.
        <table>
          <tr><th><b>Symbol</b>                     <th><b>Result</b>
          <tr><td><b>boole-1</b>                    <td><i>S</i>
          <tr><td><b>boole-2</b>                    <td><i>D</i>
          <tr><td><b>boole-andc1</b>                <td>(logandc1 <i>S D</i>)
          <tr><td><b>boole-andc2</b>                <td>(logandc2 <i>S D</i>)
          <tr><td><b>boole-and</b>                  <td>(logand <i>S D</i>)
          <tr><td><b>boole-c1</b>                   <td>(lognot <i>S</i>)
          <tr><td><b>boole-c2</b>                   <td>(lognot <i>D</i>)
          <tr><td><b>boole-clr</b>                  <td>0
          <tr><td><b>boole-eqv</b>                  <td>(logeqv <i>S D</i>)
          <tr><td><b>boole-ior</b>                  <td>(logior <i>S D</i>)
          <tr><td><b>boole-nand</b>                 <td>(lognand <i>S D</i>)
          <tr><td><b>boole-nor</b>                  <td>(lognor <i>S D</i>)
          <tr><td><b>boole-orc1</b>                 <td>(logorc1 <i>S D</i>)
          <tr><td><b>boole-orc2</b>                 <td>(logorc2 <i>S D</i>)
          <tr><td><b>boole-set</b>                  <td>1
          <tr><td><b>boole-xor</b>                  <td>(logxor <i>S D</i>)
        </table>
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-id
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>id</i> <dd> Type <b>resource-id</b>.
      <desc>
        <p>
          Returns the unique ID that has been assigned to the specified graphics
          context.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-join-style
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>join-style</i> <dd> One of <b>:bevel</b>, <b>:miter</b>, or <b>:round</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the join-style attribute of the
          specified graphics context.
        <p>
          The join-style attribute of a graphics context defines how the segment
          intersections are drawn for wide polylines. The possible values and
          their interpretations are as follows:
        <table border=1>
          <tr><th><b>Join-Style</b>  <th><b>Interpretation</b>
          <tr><td><b>:bevel</b>      <th>Uses <b>:butt</b> end point styles with the triangular notch filled.
          <tr><td><b>:miter</b>      <th>The outer edges of two lines extend to meet at an angle.
          <tr><td><b>:round</b>      <th>A circular arc with diameter equal to the line-width, centered on the join point.
        </table>
        <p>
          When the end points of a polyline segment are identical, the effect is
          as if the segment was removed from the polyline. When a polyline is a
          single point, the effect is the same as when the cap-style is applied
          at both end points.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-line-style
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>line-style</i> <dd> One of <b>:dash</b>, <b>:double-dash</b>, or <b>:solid</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the line-style attribute of the specified graphics context.
        <p>
          The line-style attribute of a graphics context specifies how (which
          sections of) lines are drawn for a path in graphics operations. The
          possible values and their meanings are as follows:
        <table border=1>
          <tr><th><b>Line-Style</b>    <th><b>Meaning</b>
              
          <tr><td><b>:solid</b>        <td>The full path is drawn.
              
          <tr><td><b>:double-dash</b>  <td>The full path is drawn, but the even dashes are filled
              differently than the odd dashes. The <b>:butt</b> style is used
              where even and odd dashes meet
              (see <!--DEAD-->paragraph 5.4.7, Fill-Rule and Fill-Style).

          <tr><td><b>:on-off-dash</b>  <td>Only the even dashes are drawn, with cap-style applied
              to all internal ends of the individual dashes, except
              <b>:not-last</b> is treated as <b>:butt</b>.
        </table>
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-line-width
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>line-width</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the <i>line-width</i> of the specified graphics context.
        <p>
          The line-width is measured in pixels and can be greater than or equal
          to one (wide line) or can be the special value zero (thin line).
        <p>
          Wide lines are drawn centered on the path described by the graphics
          operation. Unless otherwise specified by the join-style or cap-style,
          the bounding box of a wide line with end points [x1, y1], [x2, y2],
          and width w is a rectangle with vertices at the following real
          coordinates:
        <p>
          [x1 - (w*<i>sin</i>/2), y1 + (w*<i>cos</i>/2)], [x1+ (w*<i>sin</i>/2), y1 - (w*<i>cos</i>/2)],<br>
          [x2 - (w*<i>sin</i>/2), y2 + (w*<i>cos</i>/2)], [x2 + (w*<i>sin</i>/2), y2 - (w*<i>cos</i>/2)]<br>
        <p>
          where <i>sin</i> is the sine of the angle of the line and <i>cos</i>
          is the cosine of the angle of the line. A pixel is part of the line
          and, hence, is drawn if the center of the pixel is fully inside the
          bounding box (which is viewed as having infinitely thin edges). If the
          center of the pixel is exactly on the bounding box, it is part of the
          line if, and only if, the interior is immediately to its right (x
          increasing direction). Pixels with centers on a horizontal edge are a
          special case and are part of the line if, and only if, the interior is
          immediately below (y increasing direction).
        <p>
          Thin lines (zero line-width) are always one pixel wide lines drawn
          using an unspecified, device dependent algorithm. There are only two
          constraints on this algorithm.
        <ol>
          <li>
            If a line is drawn unclipped from [x1,y1] to [x2,y2] and if another
            line is drawn unclipped from [x1+dx,y1+dy] to [x2+dx,y2+dy], a point
            [x,y] is touched by drawing the first line if, and only if, the
            point [x+dx,y+dy] is touched by drawing the second line.
          <li>
            The effective set of points comprising a line cannot be affected by
            clipping. That is, a point is touched in a clipped line if, and only
            if, the point lies inside the clipping region and the point would be
            touched by the line when drawn unclipped.
        </ol>
        <p>
          A wide line drawn from [x1,y1] to [x2,y2] always draws the same pixels
          as a wide line drawn from [x2,y2] to [x1,y1], not counting cap-style
          and join-style. Implementors are encouraged to make this property true
          for thin lines, but it is not required. A line-width of zero may
          differ from a line-width of one in which pixels are drawn. This
          permits the use of many manufacturer's line drawing hardware, which
          may run much faster than the more precisely specified wide lines.
        <p>
          In general, drawing a thin line is faster than drawing a wide line of
          width one. However, because of their different drawing algorithms,
          thin lines may not mix well, aesthetically speaking, with wide
          lines. If it is desirable to obtain precise and uniform results across
          all displays, a client should always use a line-width of one, rather
          than a line-width of zero.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-p
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>gcontext</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns non-<b>nil</b> if the argument is a graphics context and
          <b>nil</b> otherwise.
    </defun>
    
    <defun>
      <name> gcontext-plane-mask
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>plane-mask</i> <dd> Type <b>card32</b>.
      <desc>
        <p>
          Returns the <i>plane-mask</i> of the specified graphics context.
        <p>
          The plane-mask attribute of a graphics context specifies which bit
          planes of the destination drawable are modified during a graphic
          operation. The plane-mask is a pixel value in which a 1 bit means that
          the corresponding bit plane will be modified and a 0 bit means that
          the corresponding bit plane will not be affected during a graphic
          operations. Thus, the actual result of a graphic operation depends on
          both the function and plane-mask attributes of the graphics context
          and is given by the following expression:
        <pre>
(logior (logand
            (boole function source destination)
            plane-mask)

          (logandc2
            destination
             plane-mask))
        </pre>
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-plist
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>gcontext-p</i> <dd> Type <b>list</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the property list for the
          specified <i>gcontext</i>. This function provides a hook where
          extensions can add data.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-stipple
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>stipple</i> <dd> Type <b>pixmap</b>.
      <desc>
        <p>
          Returns the <i>stipple</i> of the specified graphics context.
        <p>
          The stipple attribute of a graphics context is a bitmap used to
          prevent certain pixels in the destination of graphics operations from
          being affected by tiling.
        <p>
          The stipple and tile have the same origin. This origin point is
          interpreted relative to the origin of whatever destination drawable is
          specified in a graphics request. The stipple pixmap must have depth
          one and must have the same root as the graphics context. The tile
          pixmap must have the same root and depth as the graphics context. For
          stipple operations where the fill-style is <b>:stippled</b> (but not
          <b>:opaque-stippled</b>), the stipple pattern is tiled in a single
          plane and acts as an additional clip mask to be <b>and</b>ed with the
          clip-mask.  Any size pixmap can be used for stipple or tile, although
          some sizes may be faster to use than others.
        <p>
          Specifying a pixmap for stipple or tile in a graphics context might or
          might not result in a copy being made. If the pixmap is later used as
          the destination for a graphics operation, the change might or might
          not be reflected in the graphics context. If the pixmap is used both
          as the destination for a graphics operation and as a stipple or tile,
          the results are not defined.
        <p>
          Some displays have hardware support for tiling or stippling with
          patterns of specific sizes. Tiling and stippling operations that
          restrict themselves to those sizes may run much faster than such
          operations with arbitrary size patterns. CLX provides functions to
          determine the best size for stipple or tile (see
          <b>query-best-stipple</b> and <b>query-best-tile</b>).
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-subwindow-mode
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>subwindow-mode</i> <dd> One of <b>:clip-by-children</b> or <b>:include-inferiors</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the subwindow-mode attribute of
          the specified graphics context.
        <p>
          The subwindow-mode attribute of a graphics context specifies whether
          subwindows obscure the contents of their parent window during a
          graphics operation. For a value of <b>:clip-by-children</b>, both
          source and destination windows are clipped by all viewable
          <b>:input-output</b> class children. This clipping is in addition to
          the clipping provided by the clip-mode attribute. For a value of
          <b>:include-inferiors</b>, neither the source nor destination window
          is clipped by its inferiors. This results in the inclusion of
          subwindow contents in the source and the drawing through of subwindow
          boundaries of the destination. The use of <b>:include-inferiors</b> on
          a window of one depth with mapped inferiors of differing depth is not
          illegal, but the semantics are not defined by the core protocol.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-tile
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>tile</i> <dd> Type <b>pixmap</b>.
      <desc>
        <p>
          Returns the <i>tile</i> of the specified graphics context.
        <p>
          The tile attribute is a pixmap used to fill in areas for graphics
          operations. It is so named because copies of it are laid out side by
          side to fill the area.
        <p>
          The stipple and tile have the same origin. This origin point is
          interpreted relative to the origin of whatever destination drawable is
          specified in a graphics request. The stipple pixmap must have depth
          one and must have the same root as the graphics context. The tile
          pixmap must have the same root and depth as the graphics context. For
          stipple operations where the fill-style is <b>:stippled</b> (but not
          <b>:opaque-stippled</b>), the stipple pattern is tiled in a single
          plane and acts as an additional clip mask to be <b>and</b>ed with the
          clip-mask.  Any size pixmap can be used for stipple or tile, although
          some sizes may be faster to use than others.
        <p>
          Specifying a pixmap for stipple or tile in a graphics context might or
          might not result in a copy being made. If the pixmap is later used as
          the destination for a graphics operation, the change might or might
          not be reflected in the graphics context. If the pixmap is used both
          as the destination for a graphics operation and as a stipple or tile,
          the results are not defined.
        <p>
          Some displays have hardware support for tiling or stippling with
          patterns of specific sizes. Tiling and stippling operations that
          restrict themselves to those sizes may run much faster than such
          operations with arbitrary size patterns. CLX provides functions to
          determine the best size for stipple or tile (see
          <b>query-best-stipple</b> and <b>query-best-tile</b>).
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-ts-x
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>ts-x</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the <i>ts-x</i> attribute of the specified graphics context.
        <p>
          The ts-x and ts-y attributes of a graphics context are the coordinates
          of the origin for tile pixmaps and the stipple.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> gcontext-ts-y
      <ll>   <i>gcontext</i>
      <kind> Function
      <returns>
        <dt> <i>ts-y</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the <i>ts-y</i> attribute of the specified graphics context.
        <p>
          The ts-x and ts-y attributes of a graphics context are the coordinates
          of the origin for tile pixmaps and the stipple.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> query-best-stipple
      <ll>   <i>width height drawable</i>
      <kind> Function
      <returns>
        <dt> <i>best-width</i>, <i>best-height</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the <i>best-width</i> and <i>best-height</i> for stipple pixmaps on the <i>drawable</i>.
        <p>
          The <i>drawable</i> indicates the screen and possibly the window class
          and depth. An <b>:input-only</b> window cannot be specified as the
          <i>drawable</i>. The size is returned as width and height values.
      <args>
        <dt> <i>width</i>, <i>height</i> <dd> Specifies the width and height of the desired stipple pattern.
        <dt> <i>drawable</i> <dd> A <b>drawable</b>.
    </defun>
    
    <defun>
      <name> query-best-tile
      <ll>   <i>width height drawable</i>
      <kind> Function
      <returns>
        <dt> <i>best-width</i>, <i>best-height</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the <i>best-width</i> and <i>best-height</i> for tile pixmaps
          on the <i>drawable</i>.
        <p>
          The <i>drawable</i> indicates the screen and possibly the window class
          and depth. An <b>:input-only</b> window cannot be specified as the
          <i>drawable</i>. The size is returned as width and height values.
      <args>
        <dt> <i>width</i>, <i>height</i> <dd> Specifies the width and height of the desired tile pattern.
        <dt> <i>drawable</i> <dd> A <b>drawable</b>.
    </defun>
    
    <h2>5.3 Copying Graphics Contexts</h2>
    <p>
      CLX provides functions to copy some or all attribute values from one
      graphics context to another. These functions are generally more
      efficient than using <b>setf</b> to copy <b>gcontext</b> attributes
      individually.
      
    <defun>
      <name> copy-gcontext
      <ll>   <i>source destination</i>
      <kind> Function
      <desc>
        <p>
          Copies all the values of the attributes of the source graphics context
          into the destination graphics context. The source and destination
          graphics contexts must have the same root and depth.
      <args>
        <dt> <i>source</i> <dd> The source <b>gcontext</b>.
        <dt> <i>destination</i> <dd> The destination <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> copy-gcontext-components
      <ll>   <i>source destination</i> &amp;rest <i>keys</i>
      <kind> Function
      <desc>
        <p>
          Copies the values of the specified attributes of the source graphics
          context to the destination graphics context. The source and
          destination graphics contexts must have the same root and depth.
      <args>
        <dt> <i>source</i> <dd> The source <b>gcontext</b>.
        <dt> <i>destination</i> <dd> The destination <b>gcontext</b>.
        <dt> <i>keys</i>
        <dd>
          The remaining arguments are keywords, of type <b>gcontext-key</b>,
          which specify which attributes of the graphics context are to be
          copied.
    </defun>
    
    <h2>5.5 Destroying Graphics Contexts</h2>
    <p>
      To destroy a graphics context, use <b>free-gcontext.</b>
      
    <defun>
      <name> free-gcontext
      <ll>   <i>gcontext</i>
      <kind> Function
      <desc>
        <p>
          Deletes the association between the assigned resource ID and the
          specified graphics context, and then destroys the graphics context.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <h2>5.6 Graphics Context Cache</h2>
    <p>
      CLX provides a set of functions to control the automatic graphics context
      caching mechanism.
      
      
    <defun>
      <name> force-gcontext-changes
      <ll>   <i>gcontext</i>
      <kind> Function
      <desc>
        <p>
          Forces any delayed changes to the specified graphics context to be
          sent out to the server.  Note that <b>force-gcontext-changes</b> is
          called by all of the graphics functions.
      <args>
        <dt> <i>gcontext</i> <dd> A <b>gcontext</b>.
    </defun>
    
    <defun>
      <name> with-gcontext
      <ll> 
        <i>gcontext</i> &amp;key <b>:arc-mode :background :cap-style :clip-mask</b>                       
        <b>:clip-ordering :clip-x :clip-y :dashes :dash-offset :exposures</b>
        <b>:fill-rule :fill-style :font :foreground :function :join-style</b>
        <b>:line-style :line-width :plane-mask :stipple :subwindow-mode</b>
        <b>:tile :ts-x :ts-y</b> &amp;allow-other-keys &amp;body <i>body</i>
      <kind> Macro
      <desc>
        <p>
          Changes the indicated graphics context components to the specified
          values only within the dynamic extent of the
          body. <b>with-gcontext</b> works on a per-process basis in a
          multiprocessing environment. The <i>body</i> is not surrounded by a
          <b>with-display</b> form. If there is no local cache for the specified
          graphics context, or if some of the component states are unknown,
          <b>with-gcontext</b> does the save and restore by creating a temporary
          graphics context and copying components to and from it using
          <b>copy-gcontext-components</b>.
      <args>
        <dt>
          <i>gcontext</i>
        <dd>
          A <b>gcontext</b>.
        <dt>
          <b>:arc-mode, :background</b>, <b>:cap-style</b>, <b>:clip-mask</b>,
          <b>:clip-ordering</b>, <b>:clip-x</b>, <b>:clip-y</b>, <b>:dashes</b>,
          <b>:dash-offset</b>, <b>:exposures</b>, <b>:fill-rule</b>,
          <b>:fill-style</b>, <b>:font</b>, <b>:foreground</b>,
          <b>:function</b>, <b>:join-style</b>, <b>:line-style</b>,
          <b>:line-width</b>, <b>:plane-mask</b>, <b>:stipple</b>,
          <b>:subwindow-mode</b>, <b>:tile</b>, <b>:ts-x</b>, <b>:ts-y</b>
        <dd>
          These keyword arguments and associated values specify which graphics
          context components are to be changed. Any components not specified are
          left unmodified. See <ref name=creating-GCs>, for
          more information.
        <dt>
          <i>body</i>
        <dd>
          The body of code which will have access to the altered graphics context.
    </defun>
    
    <h1>6 Graphic Operations</h1>
    
    <h2>6.1 Introduction</h2>
    <p>
      Once connected to an X server, a client can use CLX functions to perform
      graphic operations on drawables.
    <p>
      This section describes CLX functions to:
    <ul>
      <li> Operate on areas and planes
      <li> Draw points
      <li> Draw lines
      <li> Draw rectangles
      <li> Draw arcs
      <li> Draw text
    </ul>
    
    <h2 name='area-and-plane-operations'>6.2 Area and Plane Operations</h2>
    
    <p>
      <b>clear-area</b> clears an area or an entire window to the background.
      Since pixmaps do not have backgrounds, they cannot be filled by using
      the functions described in the following paragraphs. Instead, you should
      use <b>draw-rectangle</b>, which sets the pixmap to a known value. See
      <ref name=Drawing-Rectangles>, for information on
      <b>draw-rectangle</b>.
      
    <defun>
      <name> clear-area
      <ll>   <i>window</i> &amp;key (<b>:x</b> 0) (<b>:y</b> 0) <b>:width :height :exposures-p</b>
      <kind> Function
      <desc>
        <p>
          Draws a rectangular area in the specified <i>window</i> with the
          background pixel or pixmap of the <i>window</i>. The <b>:x</b> and
          <b>:y</b> coordinates are relative to the <i>window</i> origin, and
          specify the upper-left corner of the rectangular area that is to be
          cleared. A <b>nil</b> or zero value for <b>:height</b> or
          <b>:width</b> clears the remaining area (height - y or width - x). If
          the <i>window</i> has a defined background tile, the rectangle is
          tiled by using a plane-mask of all ones and a function of
          <b>:copy</b>. If the <i>window</i> has background <b>:none</b>, the
          contents of the <i>window</i> are not changed. In either case, if
          <b>:exposures-p</b> is non-<b>nil</b>, then one or more
          <b>:exposure</b> events are generated for regions of the rectangle
          that are either visible or are being retained in a backing store.
        <p>
          To clear the entire area in a specified <i>window</i>, use
          (<b>clear-area</b> <i>window</i>).
      <args>
        <dt>
          <i>window</i>
        <dd>
          A <b>window</b>.
        <dt>
          <b>:x</b>, <b>:y</b>
        <dd>
          Upper-left corner of the area to be cleared. These coordinates are
          relative to the <i>window</i> origin. Type is <b>int16</b>.
        <dt>
          <b>:width</b>
        <dd>
          The width of the area to clear or <b>nil</b> to clear to the remaining
          width of the window. Type is <b>card16</b> or <b>null</b>.
        <dt>
          <b>:height</b>
        <dd>
          The height of the area to clear or <b>nil</b> to clear to the
          remaining height of the window. Type is <b>card16</b> or <b>null</b>.
        <dt> 
          <b>:exposures-p</b>
        <dd>
          Specifies if <b>:exposure</b> events should be generated for the affected
          areas. Type <b>boolean</b>.
    </defun>
    
    
    <defun>
      <name> copy-area
      <ll>   <i>source gcontext source-x source-y width height destination destination-x destination-y</i>
      <kind> Function
      <desc>
        <p>
          Copies the specified rectangular area from the <i>source</i>
          <b>drawable</b> to the specified rectangular area of the
          <i>destination</i> <b>drawable</b>, combining them as specified in the
          supplied graphics context (<i>gcontext</i>). The <i>x</i> and <i>y</i>
          coordinates are relative to their respective drawable origin, with
          each pair specifying the upper left corner of the area.
        <p>
          If either regions of the <i>source</i> area are obscured and have not
          been retained in backing store, or regions outside the boundaries of
          the <i>source</i> <b>drawable</b> are specified, those regions are not
          copied. Instead, the following occurs on all corresponding
          <i>destination</i> regions that are either visible or are retained in
          backing store:
        <ul>
          <li>
            If the <i>destination</i> rectangle is a window with a background
            other than <b>:none</b>, these corresponding regions of the
            <i>destination</i> are tiled, using plane-mask of all ones and
            function of <b>boole-1</b> (copy source), with that background.
          <li>
            If the exposures attribute of the graphics context is <b>:on</b>,
            then <b>:graphics-exposure</b> events for all corresponding
            <i>destination</i> regions are generated (regardless of tiling or
            whether the <i>destination</i> is a window or a pixmap).
          <li>
            If exposures is <b>:on</b> but no regions are exposed, a
            <b>:no-exposure</b> event is generated.  Note that by default,
            exposures is <b>:on</b> for new graphics contexts. See <ref name=graphics-contexts>, for further information.
        </ul>
      <args>
        <dt>
          <i>source</i>
        <dd>
          Source <b>drawable</b>.
        <dt>
          <i>gcontext</i>
        <dd>
          The graphics context to use during the copy operation.
        <dt>
          <i>source-x</i>, <i>source-y</i> 
        <dd>
          The x and y coordinates of the upper-left corner of the area in the
          <i>source</i> <b>drawable</b>. These coordinates are relative to the
          <i>source</i> <b>drawable</b> origin.  Type is <b>int16</b>.
        <dt>
          <i>width</i>, <i>height</i>
        <dd>
          The width and height of the area being copied. These apply to both the
          <i>source</i> and <i>destination</i> areas. Type is <b>card16</b>.
        <dt>
          <i>destination</i>
        <dd>
          The destination <b>drawable</b>.
        <dt>
          <i>destination-x</i>, <i>destination-y</i>
        <dd>
          The x and y coordinates of the upper left corner of the area in the
          <i>destination</i> <b>drawable</b>. These coordinates are relative to
          the <i>destination</i> <b>drawable</b> origin. Type is <b>int16</b>.
    </defun>
    
    <defun>
      <name> copy-plane
      <ll>   <i>source gcontext plane source-x source-y width height destination destination-x destination-y</i>
      <kind> Function
      <desc>
        <p>
          Uses a single bit plane of the specified rectangular area of the
          <i>source</i> <b>drawable</b> along with the specified graphics
          context (<i>gcontext</i>) to modify the specified rectangle area of
          the <i>destination</i> <b>drawabl</b>e. The drawables specified by the
          <i>source</i> and <i>destination</i> arguments must have the same root
          but need not have the same depth.
        <p>
          Effectively, this operation forms a pixmap of the same depth as
          <i>destination</i> and with a size specified by the <i>source</i>
          area. It then uses the foreground and background from the graphics
          context (foreground where the bit-plane in <i>source</i> contains a
          one bit, background where the bit-plane in <i>source</i> contains a
          zero bit), and the equivalent of a <b>copy-area</b> operation is
          performed with all the same exposure semantics. This can also be
          thought of as using the specified region of the <i>source</i>
          bit-plane as a stipple with a fillstyle of <b>:opaque-stippled</b> for
          filling a rectangular area of the <i>destination</i>.
      <args>
        <dt> <i>source</i> <dd> The source <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context to use during the copy operation.
        <dt> <i>plane</i> <dd> Specifies the bit-plane of the <i>source</i> <b>drawable</b>. Exactly one bit must be set.
          Type is <b>pixel</b>.
        <dt> <i>source-x</i>, <i>source-y</i> 
        <dd>
          The <i>x</i> and <i>y</i> coordinates of the upper-left corner of the
          area in the <i>source</i> <b>drawable</b>. These coordinates are
          relative to the <i>source</i> <b>drawable</b> origin.  Type is
          <b>int16</b>.
        <dt> <i>width</i>, <i>height</i>
        <dd> The width and height of the area being copied. These apply to both the
          <i>source</i> and <i>destination</i> areas. Type is <b>card16</b>.
        <dt> <i>destination</i> <dd> The destination <b>drawable</b>.
        <dt> <i>destination-x</i>, <i>destination-y</i>
        <dd>
          The x and y coordinates of the upper-left corner of the destination
          area in the <i>destination</i> <b>drawable</b>. These coordinates are
          relative to the <i>destination</i> <b>drawable</b> origin. Type is
          <b>int16</b>.
    </defun>
    
    <h2>6.3 Drawing Points</h2>
    <p>
      The <b>draw-point</b> and <b>draw-points</b> functions make use of the following graphics
      context components: function, plane-mask, foreground, subwindow-mode, clip-x,
      clip-y, clip-ordering, clip-region and clip-mask.
    <p>
      The <b>draw-point</b> function uses the foreground pixel and function components of the
      graphics context to draw a single point into the specified drawable, while <b>draw-points</b>
      draws multiple points into the specified drawable. These functions are not affected by
      the tile or stipple in the graphics context.
      
      
    <defun>
      <name> draw-point
      <ll>   <i>drawable gcontext x y</i>
      <kind> Function
      <desc>
        <p>
          Combines the foreground pixel in the <i>gcontext</i> with the pixel in
          the <i>drawable</i> specified by the <i>x</i> and <i>y</i>
          coordinates.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context for drawing the point.
        <dt> <i>x</i>, <i>y</i> <dd> The <i>x</i> and <i>y</i> coordinates of the point drawn. Type is <b>int16</b>.
    </defun>
    
    <defun>
      <name> draw-points
      <ll>   <i>drawable gcontext points</i> &amp;optional <i>relative-p</i>
      <kind> Function
      <desc>
        <p>
          Combines the foreground pixels in the graphics context with the pixels
          at each point in the <i>drawable</i>. The points are drawn in the
          order listed.
        <p>
          <b>draw-points</b> requires a mode argument, <i>relative-p</i> that
          indicates whether the points are relative to the destination origin or
          to the previous point. In either case, the first point is always
          relative to the destination origin. The rest of the points are
          relative either to the <i>drawable</i>'s origin or to the previous
          point, depending on the value of <i>relative-p</i>.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context for drawing the points.
        <dt> <i>points</i> <dd> A list of points to be drawn in the order listed. The first point is always relative
          to the <i>drawable</i>'s origin; if <i>relative-p</i>, the rest of the points are drawn relative to the
          previous point, else they are drawn relative to the <i>drawable</i>'s origin. Type is
          <b>point-seq</b>.
        <dt> <i>relative-p</i> <dd> Specifies the coordinate mode used for drawing the pixels either relative to
          the origin or to the previous point. Type <b>boolean</b>.
    </defun>
    
    <h2>6.4 Drawing Lines</h2>
    
    <p>
      The <b>draw-line</b>, <b>draw-lines</b>, and <b>draw-segments</b> functions use the following
      graphics context components: background, cap-style, clip-x-origin, clip-y-origin,
      clip-mask, dash-list, dash-offset, fill-style, foreground, function, plane-mask, line-width,
      line-style, stipple, subwindow-mode, tile, ts-x-origin, and ts-y-origin.
    <p>
      The <b>draw-lines</b> function also uses the join-style graphics context component.
      
    <defun>
      <name> draw-line
      <ll>   <i>drawable gcontext x1 y1 x2 y2</i> &amp;optional <i>relative-p</i>
      <kind> Function
      <desc>
        <p>
          Draws a line from the point <i>x1</i>,<i>y1</i> to the point
          <i>x2</i>,<i>y2</i>. When <i>relative-p</i> is true, the first point
          is relative to the destination origin but the second point is relative
          to the first point.  When <i>relative-p</i> is <b>nil</b>, both points
          are relative to the destination origin.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context for drawing the line.
        <dt> <i>x1</i>, <i>y1</i>, <i>x2</i>, <i>y2</i> <dd> The end points of the line.
        <dt> <i>relative-p</i> <dd> Specifies the coordinate mode used for drawing the line either relative to
          the origin or the previous point. In either case, the first point is always drawn
          relative to the <i>drawable</i>'s origin.
    </defun>
    
    <defun>
      <name> draw-lines
      <ll>   <i>drawable</i> <i>gcontext</i> <i>points</i> &amp;key <b>:relative-p</b> <b>:fill-p</b> <b>(:shape&nbsp;:complex)</b>
      <kind> Function
      <desc>
        <p>
          Draws a line between each pair of <i>points</i> in the points
          list. The lines are drawn in the order listed and join correctly at
          all intermediate points. The join-style graphics context component
          defines the type of joint to use. When the first and last points
          coincide, the first and last lines also join correctly to produce a
          hollow polygon.
        <p>
          When <b>:relative-p</b> is true, the first point is always relative to
          the destination origin, but the rest are relative to the previous
          point. When <b>:relative-p</b> is <b>nil</b>, the rest of the points
          are drawn relative to the destination origin.
        <p>
          When <b>:fill-p</b> is true, the polygon defined by the <i>points</i>
          list is filled. The <b>:shape</b> keyword provides the server with a
          hint about how to fill the polygon. <b>:shape</b> can be either
          <b>:complex</b> (by default), <b>:convex</b>, or <b>:non-convex</b>.
        <p>
          The <b>:convex</b> operand is the simplest type of area and the
          fastest to fill. A fill area is convex if every straight line
          connecting any two interior points is entirely inside the area.  For
          example, triangles and rectangles are convex polygons.
        <p>
          The <b>:non-convex</b> operand is for filling an area that is not
          convex and is also not self-intersecting. Filling this type of area is
          harder than filling a convex area, but easier than filling one that is
          self-intersecting. For example, the shape of the letter "T" is
          non-convex and non-self-intersecting.
        <p>
          The <b>:complex</b> operand is the most general (and therefore the
          hardest) type of fill area. A complex fill area can be non-convex and
          self-intersecting. For example, draw the outline of a bow tie, without
          lifting your pencil or tracing over an edge twice. This shape is
          non-convex and intersects itself at the knot in the middle.
        <p>
          <b>NOTE:</b> Unless you are sure that a shape is <b>:convex</b> or
          <b>:non-convex</b>, it should always be drawn as a <b>:complex</b>
          shape. If <b>:convex</b> or <b>:non-convex</b> is specified
          incorrectly, the graphics result is undefined.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context for drawing the lines.
        <dt> <i>points</i> <dd> A list of points that define the lines. Type is <b>point-seq</b>.
        <dt> <b>:relative-p</b> <dd> The coordinate mode of the points.
        <dt> <b>:fill-p</b> <dd> When true, a filled polygon is drawn instead of a polyline.
        <dt> <b>:shape</b> <dd> A hint that allows the server to use the most efficient area fill algorithm.
          Either <b>:convex</b>, <b>:non-convex</b>, or <b>:complex</b>.
    </defun>
    
    <defun>
      <name> draw-segments
      <ll>   <i>drawable gcontext segments</i>
      <kind> Function
      <desc>
        <p>
          Draws multiple lines, not necessarily connected. <i>segments</i> is a
          sequence of the form {x1 y1 x2 y2}*, in which each subsequence
          specifies the end points of a line segment. Line segments are drawn in
          the order given by <i>segments</i>. Unlike <b>draw-lines</b>, no
          joining is performed at coincident end points.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b> to receive the line segments.
        <dt> <i>gcontext</i> <dd> Specifies the graphics context for drawing the lines.
        <dt> <i>segments</i> <dd> The points list for the segments to draw. Type is <b>seq</b>.
    </defun>
    
    <h2 name=Drawing-Rectangles>6.5 Drawing Rectangles</h2>
    
    <p>
      The <b>draw-rectangle</b> and <b>draw-rectangles</b> functions draw
      hollow or filled outlines of the specified rectangle or rectangles as if
      a five-point polyline were specified for each rectangle, as follows:
    <p align=center>
      [x,y,] [x+width,y] [x+width,y+height] [x,y+height] [x,y]
    <p>
      <b>draw-rectangle</b> and <b>draw-rectangles</b> use the following
      graphics context components: background, function, plane-mask,
      foreground, subwindow-mode, cap-style, clip-x, clip-y, clip-ordering,
      clip-region and clip-mask, dash-list, dash-offset, fill-style,
      join-style, line-width, line-style, stipple, tile, ts-x-origin, and
      ts-y-origin.
      
    <defun>
      <name> draw-rectangle
      <ll>   <i>drawable gcontext x y width height</i> &amp;optional <i>fill-p</i>
      <kind> Function
      <desc>
        <p>
          Draws a rectangle defined by the <i>x</i>, <i>y</i>, <i>width</i>, and
          <i>height</i> arguments.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context for drawing the rectangle.
        <dt> <i>x</i>, <i>y</i> <dd> The x and y coordinates that define the upper left corner of the rectangle. The
          coordinates are relative to the destination origin. Type is <b>int16</b>.
        <dt> <i>width</i>, <i>height</i> <dd> Specifies the width and height that define the outline of the rectangle.
          Type is <b>card16</b>.
        <dt> <i>fill-p</i> <dd> Specifies whether the rectangle is filled or not. Type <b>boolean</b>.
    </defun>
    
    <defun>
      <name> draw-rectangles
      <ll>   <i>drawable gcontext rectangles</i> &amp;optional <i>fill-p</i>
      <kind> Function
      <desc>
        <p>
          Draws the rectangles in the order listed in <i>rectangles</i>. For the
          specified <i>rectangle</i> or <i>rectangles</i>, no pixel is drawn
          more than once. The x and y coordinates of each rectangle are relative
          to the destination origin and define the upper left corner of the
          rectangle. If rectangles intersect, the intersecting pixels are drawn
          multiple times.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context.
        <dt> <i>rectangles</i> <dd> A list specifying the upper left corner x and y, width and height of the
          rectangles. Type is <b>rect-seq</b>.
        <dt> <i>fill-p</i> <dd> Specified if the rectangles are filled or not. Type is <b>boolean</b>.
    </defun>
    
    <h2>6.6 Drawing Arcs</h2>
    <p>
      <b>draw-arc</b> draws a single circular or an elliptical arc, while
      <b>draw-arcs</b> draws multiple circular or elliptical
      arcs. <b>draw-arc</b> and <b>draw-arcs</b> use the following graphics
      context components: arc-mode, background, cap-style, clip-x, clip-y,
      clip-mask, dash-list, dash-offset, fill-style, foreground, join-style,
      function, plane-mask, line-width, line-style, stipple, subwindow-mode,
      tile, ts-x-origin, and ts-y-origin.
      
    <defun>
      <name> draw-arc
      <ll>   <i>drawable gcontext x y width height angle1 angle2</i> &amp;optional <i>fill-p</i>
      <kind> Function
      <desc>
        <p>
          Draws either a circular or an elliptical arc. Also, outlined or filled
          arcs can be drawn.  Each arc is specified by a rectangle (<i>x</i>,
          <i>y</i>, <i>width</i>, and <i>height</i>) and two angles
          (<i>angle1</i> and <i>angle2</i>). The angles are signed integers in
          radians, with positive indicating counterclockwise motion and negative
          indicating clockwise motion. The start of the arc is specified by
          <i>angle1</i>, and the path and extent of the arc is specified by
          <i>angle2</i> relative to the start of the arc. If the magnitude of
          <i>angle2</i> is greater than 360 degrees, it is truncated to 360
          degrees. The <i>x</i> and <i>y</i> coordinates of the rectangle are
          relative to the <i>drawable</i>'s origin.
        <p>
          For example, an arc specified as
          [<i>x</i>,<i>y</i>,<i>width</i>,<i>height</i>,<i>angle1</i>,<i>angle2</i>]
          has the origin of the major and minor axes at:
        <p align=center>
          [<i>x</i>+(<i>width</i>/2),<i>y</i>+(<i>height</i>/2)]
        <p>
          The infinitely thin path describing the entire circle/ellipse
          intersects the horizontal axis at:
        <p align=center>
          [<i>x</i>,<i>y</i>+(<i>height</i>/2)] and [<i>x</i>+<i>width</i>,<i>y</i>+(<i>height</i>/2)]
        <p>
          The intersection of the vertical axis is at:
        <p align=center>
          [<i>x</i>+(<i>width</i>/2),<i>y</i>] and [<i>x</i>+(<i>width</i>/2),<i>y</i>+<i>height</i>]
        <p>
          These coordinates can be fractional; that is, they are not truncated
          to discrete coordinates. Note that the angle values are slightly
          different in CLX than in the X protocol specification.
        <p>
          If <i>fill-p</i> is <b>nil</b>, then only the outline of the arc is
          drawn. Otherwise, if <i>fill-p</i> is true, <b>draw-arc</b> fills the
          area bounded by the arc outline and one or two line segments,
          depending on the arc-mode. If the arc-mode is <b>:chord</b>, the
          filled area is bounded by the arc outline and the line segment joining
          the arc end points. If the arc-mode is <b>:pie-slice</b>, the filled
          area is bounded by the arc outline and the two line segments joining
          each arc end point with the center point.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context for drawing the arc.
        <dt> <i>x</i>, <i>y</i> <dd> The x and y coordinates of the arc rectangle relative to the origin of the <i>drawable</i>.
          Type is <b>int16</b>.
        <dt> <i>width</i>, <i>height</i> <dd> Specifies the width and height of the rectangle. These are the major and
          minor axes of the arc. Type is <b>card16</b>.
        <dt> <i>angle1</i> <dd> Specifies the start of the arc in radians. Type is <b>angle</b>.
        <dt> <i>angle2</i> <dd> Specifies the direction and end point of the arc. Type is <b>angle</b>.
        <dt> <i>fill-p</i> <dd> Specifies whether the arc is filled or not. Type <b>boolean</b>.
    </defun>
    
    <defun>
      <name> draw-arcs
      <ll>   <i>drawable gcontext arcs</i> &amp;optional <i>fill-p</i>
      <kind> Function
      <desc>
        <p>
          Draws circular or elliptical, outlined or filled arcs. Each arc is
          specified by a rectangle and two angles. For a more detailed
          description, see <b>draw-arc</b>.
        <p>
          The arcs are filled in the order listed. For any given arc, no pixel is drawn more than
          once. If regions intersect, the intersecting pixels are drawn multiple times.
      <args>
        <dt> <i>drawable</i> <dd> Specifies the <b>drawable</b> where you want the arcs drawn.
        <dt> <i>gcontext</i> <dd> Specifies the graphics context for drawing the arc.
        <dt> <i>arcs</i> <dd> A sequence containing the width, height, angle1, and angle2 arguments defining
          the arcs. See <b>draw-arc</b> for more detail. Type is <b>arc-seq</b>.
        <dt> <i>fill-p</i> <dd> Specifies whether the arcs are filled or not. Type is <b>boolean</b>.
    </defun>
    
    <h2 name=drawing-text>6.7 Drawing Text</h2>
    <p>
      CLX provides functions for drawing text using text fonts provided by the
      X server.  An X font is array of character bit maps indexed by integer
      codes. See <ref name=fonts-and-characters>for a complete discussion of the CLX functions used
      to manage fonts and characters.
    <p>
      Since Common Lisp programs typically represent text as sequences of
      characters (that is, strings), CLX text functions must be prepared to
      convert a Common Lisp character into the integer code used to index the
      appropriate character bitmap in a given font. The <b>:translate</b>
      argument to a text function is a function which performs this
      conversion. The default <b>:translate</b> function handles all
      characters that satisfy <b>graphic-char-p</b> by converting each
      character into its ASCII code. Note that the assumption made by the
      default <b>:translate</b> function--that is, that an X font indexes
      bitmaps by ASCII codes--is often valid, but other encodings are
      possible. In general, a <b>:translate</b> function can perform complex
      transformations. It can be used to convert non-character input, to
      handle non-ASCII character encodings, and to change the fonts used to
      access character bitmaps.  The complete behavior of a <b>:translate</b>
      function is given below by describing a prototypical
      <b>translate-function</b>.
    <p>
      CLX offers two different ways to draw text--filled text and block
      text. The <b>draw-glyph</b> and <b>draw-glyphs</b> functions create
      filled text, in which each character image is treated as an area to be
      filled according to the fill-style of the given graphics context,
      without otherwise disturbing the surrounding background. In addition,
      filled text sends a complex type of server request which allows a series
      of font indices, font changes, and horizontal position changes to be
      compiled into a single request. Filled text functions use the following
      graphics context attributes: background, clip-mask, clip-x-origin,
      clip-y-origin, fill-style, font, foreground, function, plane-mask,
      stipple, subwindow-mode, tile, ts-x-origin, ts-y-origin.
    <p>
      Block text is a rendering style commonly used by display terminals, in
      which each character image appears in the foreground pixel inside a
      rectangular character cell drawn in the graphics context background
      pixel. The <b>draw-image-glyph</b> and <b>draw-image-glyphs</b>
      functions create block text. Block text functions use the following
      graphics context attributes: background, clip-mask, clip-x-origin,
      clip-y-origin, font, foreground, plane-mask, stipple, subwindow-mode,
      tile, ts-x-origin, ts-y-origin.
      
      
    <defun>
      <name> draw-glyph
      <ll>   <i>drawable gcontext x y element</i> &amp;key <b>:translate :width</b> (<b>:size :default</b>)
      <kind> Function
      <returns>
        <dt> <i>output-p</i> <dd> Type <b>boolean</b>.
        <dt> <i>width</i> <dd> Type <b>int32</b> or <b>null</b>.
      <desc>
        <p>
          Draws a single character of filled text represented by the given
          <i>element</i>. The given <i>x</i> and <i>y</i> specify the left
          baseline position for the character. The first return value is true if
          the character is successfully translated and drawn, or <b>nil</b> if
          the <b>:translate</b> function did not translate it. The second return
          value gives the total pixel width of the character actually drawn, if
          known.
        <p>
          Specifying a <b>:width</b> is a hint to improve performance. The
          <b>:width</b> is assumed to be the total pixel width of the character
          actually drawn. Specifying <b>:width</b> permits appending the output
          of subsequent calls to the same protocol request, provided
          <i>gcontext</i> has not been modified in the interim. If <b>:width</b>
          is not specified, appending of subsequent output might not occur
          (unless <b>:translate</b> returns the character width).
        <p>
          The <b>:size</b> specifies the element size of the destination buffer
          given to <b>:translate</b> (either 8, 16, or <b>:default</b>). If
          <b>:default</b> is specified, the size is based on the current font,
          if known; otherwise, 16 is used.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context for drawing text.
        <dt> <i>x</i>, <i>y</i> <dd> The left baseline position for the character drawn.
        <dt> <i>element</i> <dd> A character or other object to be translated into a font index.
        <dt> <b>:translate</b> <dd> A function to translate text to font indexes. Default is <b>#'translate-default</b>.
        <dt> <b>:width</b> <dd> The total pixel width of the character actually drawn, if known.
        <dt> <b>:size</b> <dd> Specifies the element size of the destination buffer given to <b>:translate</b> (8, 16, or
          <b>:default</b>).
    </defun>
    
    <defun>
      <name> draw-glyphs
      <ll>   <i>drawable gcontext x y sequence</i> &amp;key (<b>:start</b> 0) <b>:end :translate :width</b> (<b>:size :default</b>)
      <kind> Function
      <returns>
        <dt> <i>new-start</i> <dd> Type <b>array-index</b> or <b>null</b>.
        <dt> <i>width</i> <dd> Type <b>int32</b> or <b>null</b>.
      <desc>
        <p>
          Draws the filled text characters represented by the given
          sequence. <b>:start</b> and <b>:end</b> define the elements of the
          sequence which are drawn. The given <i>x</i> and <i>y</i> specify the
          left baseline position for the first character. The first return value
          is <b>nil</b> if all characters are successfully translated and drawn;
          otherwise, the index of the first untranslated sequence element is
          returned. The second return value gives the total pixel width of the
          characters actually drawn, if known.
        <p>
          Specifying a <b>:width</b> is a hint to improve performance. The
          <b>:width</b> is assumed to be the total pixel width of the character
          sequence actually drawn. Specifying <b>:width</b> permits appending
          the output of subsequent calls to the same protocol request, provided
          <i>gcontext</i> has not been modified in the interim. If <b>:width</b>
          is not specified, appending of subsequent output might not occur
          (unless <b>:translate</b> returns the character width).
        <p>
          The <b>:size</b> specifies the element size of the destination buffer
          given to<b> :translate</b> (either 8, 16, or <b>:default</b>). If
          <b>:default</b> is specified, the size is based on the current font,
          if known; otherwise, 16 is used.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context for drawing text.
        <dt> <i>x</i>, <i>y</i> <dd> The left baseline position for the character drawn.
        <dt> <i>sequence</i> <dd> A sequence of characters or other objects to be translated into font indexes.
        <dt> <b>:start</b>, <b>:end</b> <dd> Start and end indexes defining the elements to draw.
        <dt> <b>:translate</b> <dd> A function to translate text to font indexes. Default is
          <b>#'translate-default</b>.
        <dt> <b>:width</b> <dd> The total total pixel width of the character actually drawn, if known.
        <dt> <b>:size</b> <dd> The element size of the destination buffer given to <b>:translate</b> (8, 16, or
          <b>:default</b>).
    </defun>
    
    <defun>
      <name> draw-image-glyph
      <ll>   <i>drawable gcontext x y element</i> &amp;key <b>:translate :width</b> (<b>:size :default</b>)
      <kind> Function
      <returns>
        <dt> <i>output-p</i> <dd> Type <b>boolean</b>.
        <dt> <i>width</i> <dd> Type <b>int32</b> or <b>null</b>.
      <desc>
        <p>
          Draws a single character of block text represented by the given
          <i>element</i>. The given <i>x</i> and <i>y</i> specify the left
          baseline position for the character. The first return value is true if
          the character is successfully translated and drawn, or <b>nil</b> if
          the <b>:translate</b> function did not translate it. The
          <b>:translate</b> function is allowed to return an initial font
          change. The second return value gives the total pixel width of the
          character actually drawn, if known.
        <p>
          The <b>:translate</b> function may not return a horizontal position
          change, since <b>draw-image-glyph</b> does not generate complex output
          requests.
        <p>
          Specifying a <b>:width</b> is a hint to improve performance. The
          <b>:width</b> is assumed to be the total pixel width of the character
          actually drawn. Specifying <b>:width</b> permits appending the output
          of subsequent calls to the same protocol request, provided
          <i>gcontext</i> has not been modified in the interim. If <b>:width</b>
          is not specified, appending of subsequent output might not occur
          (unless <b>:translate</b> returns the character width).
        <p>
          The <b>:size</b> specifies the element size of the destination buffer
          given to <b>:translate</b> (either 8, 16, or <b>:default</b>). If
          <b>:default</b> is specified, the size is based on the current font,
          if known; otherwise, 16 is used.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context for drawing text.
        <dt> <i>x</i>, <i>y</i> <dd> The left baseline position for the character drawn.
        <dt> <i>element</i> <dd> A character or other object to be translated into a font index.
        <dt> <b>:translate</b> <dd> A function to translate text to font indexes. Default is
          <b>#'translate-default</b>.
        <dt> <b>:width</b> <dd> The total pixel width of the character actually drawn, if known.
        <dt> <b>:size</b> <dd> Specifies the element size of the destination buffer given to <b>:translate</b> (8, 16, or
          <b>:default</b>).
    </defun>
    
    
    <defun>
      <name> draw-image-glyphs
      <ll>   
        <i>drawable gcontext x y sequence</i> &amp;key (<b>:start</b> 0) <b>:end</b> <b>:translate :width</b> 
        (<b>:size :default</b>)
      <kind> Function
      <returns>
        <dt> <i>new-start</i> <dd> Type <b>array-index</b> or <b>null</b>.
        <dt> <i>width</i> <dd> Type <b>int32</b> or <b>null</b>.
      <desc>
        <p>
          Draws the block text characters represented by the given
          <b>sequence</b>. <b>:start</b> and <b>:end</b> define the elements of
          the <i>sequence</i> which are drawn. The given <i>x</i> and <i>y</i>
          specify the left baseline position for the first character. The first
          return value is <b>nil</b> if all characters are successfully
          translated and drawn; otherwise, the index of the first untranslated
          sequence element is returned. The <b>:translate</b> function is
          allowed to return an initial font change. The second return value
          gives the total pixel width of the characters actually drawn, if
          known.
        <p>
          The <b>:translate</b> function may not return a horizontal position
          change, since <b>draw-image-glyphs</b> does not generate complex
          output requests.
        <p>
          Specifying a <b>:width</b> is a hint to improve performance. The
          <b>:width</b> is assumed to be the total pixel width of the character
          sequence actually drawn. Specifying <b>:width</b> permits appending
          the output of subsequent calls to the same protocol request, provided
          <i>gcontext</i> has not been modified in the interim. If <b>:width</b>
          is not specified, appending of subsequent output might not occur
          (unless <b>:translate</b> returns the character width).
        <p>
          The <b>:size</b> specifies the element size of the destination buffer
          given to <b>:translate</b> (either 8, 16, or <b>:default</b>). If
          <b>:default</b> is specified, the size will be based on the current
          font, if known; otherwise, 16 is used.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>x</i>, <i>y</i> <dd> The left baseline position for the character drawn.
        <dt> <i>gcontext</i> <dd> The graphics context for drawing text.
        <dt> <i>sequence</i> <dd> A sequence of characters or other objects to be translated into font indexes.
        <dt> <b>:start</b>, <b>:end</b> <dd> Start and end indexes defining the elements to draw.
        <dt> <b>:translate</b> <dd> A function to translate text to font indexes. Default is
          <b>#'translate-default</b>.
        <dt> <b>:width</b> <dd> The total total pixel width of the character actually drawn, if known.
        <dt> <b>:size</b> <dd> The element size of the destination buffer given to <b>:translate</b> (8, 16, or
          <b>:default</b>).
    </defun>      
    
    <defun>
      <name> translate-function
      <ll>   <i>source source-start source-end font destination destination-start</i>
      <kind> Function
      <returns>
        <dt> <i>first-not-done</i> <dd> Type <b>array-index</b>.
        <dt> <i>to-continue</i> <dd> Type <b>int16</b>, <b>font</b>, or <b>null</b>.
        <dt> <i>current-width</i> <dd> Type <b>int32</b> or <b>null</b>.
      <desc>
        <p>
          A function used as the <b>:translate</b> argument for text
          functions. Converts elements of the <i>source</i> (sub)sequence
          into font indexes for the given <i>font</i> and stores them into
          the <i>destination</i> vector.
        <p>
          The <i>destination</i> vector is created automatically by
          CLX. <i>destination</i> is guaranteed to have room for (-
          <i>source-end source-star</i>t) integer elements, starting at
          <i>destination-start</i>. Elements of <i>destination</i> can be
          either <b>card8</b> or <b>card16</b> integers, depending on the
          context. <i>font</i> is the current font, if known, or <b>nil</b>
          otherwise. Starting with the element at <i>source-start</i>,
          <b>translate-function</b> should translate as many elements of
          <i>source</i> as possible (up to the <i>source-end</i> element)
          into indexes in the current <i>font</i>, and store them into
          <i>destination</i>. The first return value should be the source
          index of the first untranslated element.
        <p>
          The second return value indicates the changes which should be made
          to the current text output request before translating the
          remaining <i>source</i> elements. If no further elements need to
          be translated, the second return value should be <b>nil</b>. If a
          horizontal motion is required before further translation, the
          second return value should be the change in x position. If a font
          change is required for further translation, the second return
          value should be the new font.
        <p>
          If known, the pixel width of the translated text can be returned as the third value; this can
          allow for appending of subsequent output to the same protocol request, if no overall
          width has been specified at the higher level.
      <args>
        <dt> <i>source</i> <dd> A sequence of characters or other objects to be translated.
        <dt> <i>source-start</i> <dd> An array-index specifying the first <i>source</i> element to be translated.
        <dt> <i>source-end</i> <dd> An array-index specifying the end of the <i>source</i> subsequence to be
          translated.
        <dt> <i>font</i> <dd> The font indexed by translated <i>source</i> elements.
        <dt> <i>destination</i> <dd> A vector where translated <i>source</i> elements are stored.
        <dt> <i>destination-start</i> <dd> An array-index specifying the position to begin storing
          translated <i>source</i> elements.
    </defun>
    
    
    <h1>7 Images</h1>
    
    <h2>7.1 Introduction</h2>
    
    <p>
      The X protocol provides for the transfer of images (two-dimensional
      arrays of pixel data) between a client program and a
      <b>drawable</b>. The format for image data can vary considerably. In
      order to present a uniform data representation for the manipulation of a
      variety of images, CLX defines a special <b>image</b> data
      type. Additional <b>image</b> subtypes -- <b>image-xy</b> and
      <b>image-z</b> -- allow for the representation of an image either as a
      sequence of bit planes or as an array of pixels. CLX includes functions
      for accessing <b>image</b> objects; for transferring image data between
      <b>image</b> objects, <b>drawables</b>, and files; and also for direct
      transfer of raw image data.
      
    <h2>7.2 Image Types</h2>
    
    <p>
      The <b>image</b> data type is the base type for all <b>image</b>
      objects. <b>image-xy</b> and <b>image-z</b> are subtypes of the
      <b>image</b> type which furnish accessors specialized for different
      image representations.
      
    <h3>7.2.1 Basic Images</h3>
    <p>
      The following paragraphs describe the CLX functions that can be used to
      access all types of <b>image</b> objects.
      
    <defun>
      <name> image-blue-mask
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>mask</i> <dd> Type <b>pixel</b> or <b>null</b>.
      <desc>
        <p>
          Returns (and with <b>setf</b>) changes the <i>mask</i> that
          selects the pixel subfield for blue intensity values. The
          <i>mask</i> is non-<b>nil</b> only for images for
          <b>:direct-color</b> or <b>:true-color</b> visual types.
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
    </defun>
    
    <defun>
      <name> image-depth
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>depth</i> <dd> Type <b>card8</b>.
      <desc>
        <p>
          Returns the <i>depth</i> (that is, the number of bits per pixel)
          for the <i>image</i>.
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
    </defun>
    
    <defun>
      <name> image-green-mask
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>mask</i> <dd> Type <b>pixel</b> or <b>null</b>.
      <desc>
        <p>
          Returns (and with <b>setf</b>) changes the mask that selects the
          pixel subfield for green intensity values. The mask is
          non-<b>nil</b> only for images for <b>:direct-color</b> or
          <b>:true-color</b> visual types.
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
    </defun>
    
    <defun>
      <name> image-height
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>height</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the <i>height</i> of the <i>image</i> in pixels.
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
    </defun>
    
    <defun>
      <name> image-name
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>name</i> <dd> Type <b>stringable</b> or <b>null</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the <i>name</i> string
          optionally associated with the <i>image</i>.
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
    </defun>
    
    <defun>
      <name> image-plist
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>plist</i> <dd> Type <b>list</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the <i>image</i> property
          list. The property list is a hook for added application
          extensions.
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
    </defun>
    
    <defun>
      <name> image-red-mask
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>mask</i> <dd> Type <b>pixel</b> or <b>null</b>.
      <desc>
        <p>
          Returns (and with <b>setf</b>) changes the <i>mask</i> which
          selects the pixel subfield for red intensity values. The
          <i>mask</i> is non-<b>nil</b> only for images for
          <b>:direct-color</b> or <b>:true-color</b> visual types.
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
    </defun>
    
    <defun>
      <name> image-width
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>width</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the <i>width</i> of the <i>image</i> in pixels.
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
    </defun>
    
    <defun>
      <name> image-x-hot
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>x-position</i> <dd> Type <b>card16</b> or <b>null</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the x position of the hot
          spot for an image used as a cursor glyph. The hot spot position is
          specified relative to the upper-left origin of the <i>image</i>.
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
    </defun>
    
    <defun>
      <name> image-y-hot
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>y-position</i> <dd> Type <b>card16</b> or <b>null</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the y position of the hot
          spot for an image used as a cursor glyph. The hot spot position is
          specified relative to the upper-left origin of the <i>image</i>.
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
    </defun>
    
    <h3>7.2.2 XY-Format Images</h3>
    
    <p>
      The <b>image-xy</b> subtype represents an image as a sequence of
      bitmaps, one for each plane of the image, in most-significant to
      least-significant bit order. The following paragraphs describe the
      additional CLX functions that can be used to access <b>image-xy</b>
      objects.
      
    <defun>
      <name> image-xy-bitmap-list
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>bitmaps</i> <dd> Type <b>list</b> of <b>bitmap</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the list of bitmap planes
          for the <i>image</i>.
      <args>
        <dt> <i>image</i> <dd> An <b>image-xy</b> object.
    </defun>
    
    <h3>7.2.3 Z-Format Images</h3>
    
    <p>
      The <b>image-z</b> subtype represents an image as a two-dimensional
      array of pixels, in scanline order. The following paragraphs describe
      the additional CLX functions that can be used to access <b>image-z</b>
      objects.
      
    <defun>
      <name> image-z-bits-per-pixel
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>pixel-data-size</i> <dd> One of 1, 4, 8, 16, 24, or 32.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the number of bits per data
          unit used to contain a pixel value for the <i>image</i>. Depending
          on the storage format for image data, this value can be larger
          than the actual <i>image</i> depth.
      <args>
        <dt> <i>image</i> <dd> An <b>image-z</b> object.
    </defun>
    
    <defun>
      <name> image-z-pixarray
      <ll>   <i>image</i>
      <kind> Function
      <returns>
        <dt> <i>pixarray</i> <dd> Type <b>pixarray</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the two-dimensional array
          of pixel data for the <i>image</i>.
      <args>
        <dt> <i>image</i> <dd> An <b>image-z</b> object.
    </defun>
    
    <h2>7.3 Image Functions</h2>
    <p> 
      The following paragraphs describe the CLX functions used to:
    <ul>
      <li> Create an <b>image</b> object.
      <li> Copy an image or a subimage.
      <li> Read an image from a <b>drawable</b>.
      <li> Display an image to a <b>drawable</b>.
    </ul>
    
    <defun>
      <name> create-image
      <ll>
        &amp;key <b>:bit-lsb-first-p :bits-per-pixel :blue-mask</b> 
        <b>:byte-lsb-first-p :bytes-per-line :data :depth :format</b>
        <b>:green-mask :height :name :plist :red-mask :width</b>
        <b>:x-hot :y-hot</b>  
      <kind> Function
      <returns>
        <dt> <i>image</i> <dd> Type <b>image</b>.
      <desc>
        <p>
          Creates an <b>image</b> object from the given <b>:data</b> and
          returns either an <b>image</b>, <b>image-xy</b>, or an
          <b>image-z</b>, depending on the type of image <b>:data</b>. If the
          <b>:data</b> is a list, it is assumed to be a <b>list</b> of
          <b>bitmaps</b> and an <b>image-xy</b> is created. If the
          <b>:data</b> is a <b>pixarray</b>, an <b>image-z</b> is
          created. Otherwise, the <b>:data</b> must be an array of bytes
          (<b>card8</b>), in which case a basic <b>image</b> object is
          created.
        <p>
          If the <b>:data</b> is a list, each element must be a bitmap of
          equal size. <b>:width</b> and <b>:height</b> default to the bitmap
          width -- (<b>array-dimension bitmap</b> 1) -- and the bitmap height
          -- (<b>array-dimension bitmap</b> 0) -- respectively. <b>:depth</b>
          defaults to the number of bitmaps.
        <p>
          If the <b>:data</b> is a <b>pixarray</b>, <b>:width</b> and
          <b>:height</b> default to the <b>pixarray</b> width --
          (<b>array-dimension pixarray</b> 1), and the pixarray height --
          (<b>array-dimension pixarray</b> 0), respectively. <b>:depth</b>
          defaults to (<b>pixarray-depth</b> <b>:data</b>). The
          <b>:bits-per-pixel</b> is rounded to a valid size, if necessary. By
          default, the <b>:bits-per-pixel</b> is equal to the <b>:depth</b>.
        <p>
          If the <b>:data</b> is an array of <b>card8</b>, the <b>:width</b>
          and <b>:height</b> are required to interpret the image data
          correctly. The <b>:bits-per-pixel</b> defaults to the <b>:depth</b>,
          and the <b>:depth</b> defaults to 1. <b>:bytes-per-line</b> defaults
          to:
        <p align=center>
          (<b>floor</b> (<b>length :data</b>) (* <b>:bits-per-pixel :height</b>))
        <p>
          The <b>:format</b> defines the storage format of image data bytes
          and can be one of the following values:
        <dl>
          <dt>
            <b>:xy-pixmap</b>
          <dd>
            The <b>:data</b> is organized as a set of bitmaps representing image bit
            planes, appearing in most-significant to least-significant bit order.
          <dt>
            <b>:z-pixmap</b>
          <dd>
            The <b>:data</b> is organized as a set of pixel values in scanline order.
          <dt>
            <b>:bitmap</b>
          <dd>
            Similar to <b>:xy-pixmap</b>, except that the <b>:depth</b> must be 1, and 1 and 0
            bits represent the foreground and background pixels, respectively.
        </dl>
        <p>
          By default, the <b>:format</b> is <b>:bitmap</b> if <b>:depth</b> is
          1; otherwise, <b>:z-pixmap</b>.
      <args>
        <dt> <b>:bit-lsb-first-p</b>
        <dd> For a returned image, true if the order of bits in each <b>:data</b> byte is
          least-significant bit first.
        <dt> <b>:bits-per-pixel</b> <dd> One of 1, 4, 8, 16, 24, or 32.
        <dt> <b>:blue-mask</b> <dd> For <b>:true-color</b> or <b>:direct-color</b> images, a pixel mask.
        <dt> <b>:byte-lsb-first-p</b> 
        <dd> For a returned <i>image</i>, true if the <b>:data</b> byte order is least-significant byte first.
        <dt> <b>:bytes-per-line</b> <dd> For a returned <i>image</i>, the number of <b>:data</b> bytes per scanline.
        <dt> <b>:data</b> <dd> Either a <b>list</b> of <b>bitmaps</b>, a <b>pixarray</b>, or an array of <b>card8</b> bytes.
        <dt> <b>:depth</b> <dd> The number of bits per displayed pixel.
        <dt> <b>:format</b> <dd> One of <b>:bitmap</b>, <b>:xy-format</b>, or <b>:z-format</b>.
        <dt> <b>:green-mask</b> <dd> For <b>:true-color</b> or <b>:direct-color</b> images, a pixel mask.
        <dt> <b>:height</b> <dd> A <b>card16</b> for the image height in pixels.
        <dt> <b>:name</b> <dd> An optional <b>stringable</b> for the image name.
        <dt> <b>:plist</b> <dd> An optional image property list.
        <dt> <b>:red-mask</b> <dd> For <b>:true-color</b> or <b>:direct-color</b> images, a pixel mask.
        <dt> <b>:width</b> <dd> A <b>card16</b> for the image width in pixels.
        <dt> <b>:x-hot</b> <dd> For a <b>cursor</b> image, the x position of the hot spot.
        <dt> <b>:y-hot</b> <dd> For a cursor image, the y position of the hot spot.
    </defun>
    
    <defun>
      <name> copy-image
      <ll>   <i>image</i> &amp;key (<b>:x</b> 0) (<b>:y</b> 0) <b>:width :height :result-type</b>
      <kind> Function
      <returns>
        <dt> <i>new-image</i> <dd> Type <b>image</b>.
      <desc>
        <p>
          Returns a new image, of the given <b>:result-type</b>, containing a
          copy of the portion of the <i>image</i> defined by <b>:x</b>,
          <b>:y</b>, <b>:width</b>, and <b>:height</b>. By default,
          <b>:width</b> is:
        <p align=center>
          (- (<b>image-width</b> <i>image</i>) <b>:x</b>)
        <p>
          and <b>:height</b> is:
        <p align=center>
          (- (<b>image-height</b> <i>image</i>) <b>:y</b>)
        <p>
          If necessary, the new image is converted to the <b>:result-type</b>,
          that can be one of the following values:
        <dl>
          <dt> <b>'image-x</b> <dd> A basic <b>image</b> object is returned.
          <dt> <b>'image-xy</b> <dd> An <b>image-xy</b> is returned.
          <dt> <b>'image-z</b> <dd> An <b>image-z</b> is returned.
        </dl>
      <args>
        <dt> <i>image</i> <dd> An <b>image</b> object.
        <dt> <b>:x</b>, <b>:y</b> <dd> <b>card16</b> values defining the position of the upper-left corner of the subimage
          copied.
        <dt> <b>:width</b>, <b>:height</b> <dd> <b>card16</b> values defining the size of subimage copied.
        <dt> <b>:result-type</b> <dd> One of <b>'image-x</b>, <b>'image-xy</b>, or <b>'image-z</b>.
    </defun>
    
    <defun>
      <name> get-image
      <ll>   
        <i>drawable</i> &amp;key <b>:x :y :width :height :plane-mask</b> 
        (<b>:format :z-format</b>) <b>:result-type</b>
      <kind> Function
      <returns>
        <dt> <i>image</i> <dd> Type <b>image</b>.
      <desc>
        <p>
          Returns an <i>image</i> containing pixel values from the region of
          the <i>drawable</i> given by <b>:x</b>, <b>:y</b>, <b>:width</b>,
          and <b>:height</b>. The bits for all planes selected by 1 bits in
          the <b>:plane-mask</b> are returned as zero; the default
          <b>:plane-mask</b> is all 1 bits. The <b>:format</b> of the returned
          pixel values may be either <b>:xy-format</b> or <b>:z-format</b>.
        <p>
          The <b>:result-type</b> defines the type of image object returned:
        <dl>
          <dt> <b>'image-x</b> <dd> A basic <b>image</b> object is returned.
          <dt> <b>'image-xy</b> <dd> An <b>image-xy</b> is returned.
          <dt> <b>'image-z</b> <dd> An <b>image-z</b> is returned.
        </dl>
        <p>
          By default, <b>:result-type</b> is <b>'image-z</b> if <b>:format</b>
          is <b>:z-format</b> and <b>'image-xy</b> if <b>:format</b> is
          <b>:xy-format</b>.
      <args>
        <dt> <i>drawable</i> <dd> A <b>drawable</b>.
        <dt> <b>:x</b>, <b>:y</b> <dd> <b>card16</b> values defining the upper-left <b>drawable</b> pixel returned. These
          arguments are required.
        <dt> <b>:width</b>, <b>:height</b> <dd> <b>card16</b> values defining the size of the <i>image</i> returned. These
          arguments are required.
        <dt> <b>:plane-mask</b> <dd> A pixel mask.
        <dt> <b>:format</b> <dd> Either <b>:xy-pixmap</b> or <b>:z-pixmap</b>.
        <dt> <b>:result-type</b> <dd> One of <b>'image-x</b>, <b>'image-xy</b>, or <b>'image-z</b>.
    </defun>
    
    <defun>
      <name> put-image
      <ll>
        <i>drawable gcontext image</i> &amp;key (<b>:src-x</b> 0) (<b>:src-y</b> 0) <b>:x :y</b>
        <b>:width :height :bitmap-p</b>
      <kind> Function
      <desc>
        <p>
          Displays a region of the <i>image</i> defined by <b>:src-x</b>,
          <b>:src-y</b>, <b>:width</b>, and <b>:height</b> on the destination
          d<i>rawable</i>, with the upper-left pixel of the <i>image</i>
          region displayed at the <i>drawable</i> position given by <b>:x</b>
          and <b>:y</b>. By default, <b>:width</b> is:
        <p align=center>
          (- (<b>image-width</b> <i>image</i>) <b>:src-x</b>)
        <p>
          and <b>:height</b> is:
        <p align=center>
          (- (<b>image-height</b> <i>image</i>) <b>:src-y</b>)
        <p>
          The following attributes of the <i>gcontext</i> are used to display
          the <b>image</b>: clip-mask, clip-x, clip-y, function, plane-mask,
          and subwindow-mode.
        <p>
          The <b>:bitmap-p</b> argument applies only to images of depth 1. In
          this case, if <b>:bitmap-p</b> is true or if the <i>image</i> is a
          basic <b>image</b> object created with <b>:format :bitmap</b>, the
          <i>image</i> is combined with the foreground and background pixels
          of the <b>gcontext</b>. 1 bits of the <i>image</i> are displayed in
          the foreground pixel and 0 bits are displayed in the background
          pixel.
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context used to display the <i>image</i>.
        <dt> <i>image</i> <dd> An <b>image</b> object.
        <dt> <b>:src-x</b>, <b>:src-y</b>
        <dd> 
          <b>card16</b> values defining the upper-left position of the <i>image</i> region to
          display.
        <dt>
          <b>:x</b>, <b>:y</b>
        <dd> 
          The position in the <i>drawable</i> where the <i>image</i> region is displayed. These
          arguments are required.
        <dt>
          <b>:width</b>, <b>:height</b> 
        <dd> 
          <b>card16</b> values defining the size of the <i>image</i> region displayed.
        <dt>
          <b>:bitmap-p</b> 
        <dd> 
          If <i>image</i> is depth 1, then if true, foreground and background pixels are
          used to display 1 and 0 bits of the <i>image</i>.
    </defun>
    
    <h2>7.4 Image Files</h2>
    
    <p>
      CLX provides functions that allow images to be written to a file in a standard X
      format. The following paragraphs describe the CLX functions used to:
    <ul>
      <li> Read an image from a file.
      <li> Write an image to a file.
    </ul>
    
    <defun>
      <name> read-bitmap-file
      <ll>   <i>pathname</i>
      <kind> Function
      <returns>
        <dt> <i>image</i> <dd> Type <b>image</b>.
      <desc>
        <p>
          Reads an image file in standard X format and returns an
          <b>image</b> object. The returned <i>image</i> can have
          depth greater than one.
      <args>
        <dt> <i>pathname</i> <dd> An image file pathname.
    </defun>
    
    <defun>
      <name> write-bitmap-file
      <ll>   <i>pathname image</i> &amp;optional <i>name</i>
      <kind> Function
      <desc>
        <p>
          Writes the <i>image</i> to an image file in standard X
          format. The <i>image</i> can have depth greater than
          one. The <i>name</i> is an image identifier written to the
          file; the default <i>name</i> is (<b>or</b>
          (<b>image-name</b> <i>image</i>) <b>'image</b>).
      <args>
        <dt> <i>pathname</i> <dd> An image file pathname.
        <dt> <i>image</i> <dd> An <b>image</b> object.
        <dt> <i>name</i> <dd> A <b>stringable</b> image name.
    </defun>
    
    <h2>7.5 Direct Image Transfer</h2>
    
    <p>
      For cases where the <b>image</b> representation is not needed,
      CLX provides functions to read and display image data
      directly.
    <defun>
      <name> get-raw-image
      <ll>
        <i>drawable</i> &amp;key <b>:data</b> (<b>:start</b> 0) <b>:x :y :width :height</b>
        <b>:plane-mask</b> (<b>:format :z-format</b>) (<b>:result-type '</b>(<b>vector card8</b>))
      <kind> Function
      <returns>
        <dt> <i>data</i> <dd> Type <b>sequence</b> or <b>card8</b>.
        <dt> <i>depth</i> <dd> Type <b>card8</b>.
        <dt> <i>visual</i> <dd> Type <b>card29</b>.
      <desc>
        <p>
          Returns a sequence of image data from the region of the
          <i>drawable</i> given by <b>:x</b>, <b>:y</b>,
          <b>:width</b>, and <b>:height</b>. If <b>:data</b> is
          given, it is modified beginning with the element at the
          <b>:start</b> index and returned. The <i>depth</i> and
          <i>visua</i>l type ID of the <i>drawable</i> are also
          returned.
        <p>
          The bits for all planes selected by 1 bits in the
          <b>:plane-mask</b> are returned as zero; the default
          <b>:plane-mask</b> is all 1 bits. The <b>:format</b> of
          the returned pixel values may be either
          <b>:xy-format</b> or <b>:z-format</b>. The
          <b>:result-type</b> defines the type of image data
          returned.
        <p>
          The calling program is responsible for handling the
          byte-order and bit-order returned by the server for the
          <i>drawable</i>'s display (see <b>display-byte-order</b>
          and <b>display-image-lsb-first-p</b>).
      <args>
        <dt> <i>drawable</i> <dd> A <b>drawable</b>.
        <dt> <b>:data</b> <dd> An optional <b>sequence</b> of <b>card8</b>.
        <dt> <b>:start</b> <dd> The index of the first <b>:data</b> element modified.
        <dt> <b>:x</b>, <b>:y</b> <dd> <b>card16</b> values defining the size of the <b>image</b> returned. These arguments are
          required.
        <dt> <b>:width</b>, <b>:height</b> <dd> <b>card16</b> values defining the size of the image returned.These
          arguments are required.
        <dt> <b>:plane-mask</b> <dd> A pixel mask.
        <dt> <b>:format</b> <dd> Either <b>:xy-pixmap</b> or <b>:z-pixmap</b>. This argument is required.
        <dt> <b>:result-type</b> <dd> The type of image data sequence to return.
    </defun>
    
    <defun>
      <name> put-raw-image
      <ll>
        <i>drawable gcontext data</i> &amp;key (<b>:start</b> 0) <b>:depth :x :y</b>
        <b>:width :height</b> (<b>:left-pad</b> 0) <b>:format</b>
      <kind> Function
      <desc>
        <p>
          Displays a region of the image data defined by <b>:start</b>,
          <b>:left-pad</b>, <b>:width,</b> and <b>:height</b> on the
          destination <i>drawable</i>, with the upper-left pixel of the image
          region displayed at the <i>drawable</i> position given by <b>:x</b>
          and <b>:y</b>.
        <p>
          The <b>:format</b> can be either <b>:xy-pixmap</b>,
          <b>:z-pixmap</b>, or <b>:bitmap</b>. If <b>:xy-pixmap</b> or
          <b>:z-pixmap</b> formats are used, <b>:depth</b> must match the
          depth of the destination <i>drawable</i>. For <b>:xy-pixmap</b>, the
          data must be in XY format. For <b>:z-pixmap</b>, the data must be in
          Z format for the given <b>:depth</b>.
        <p>
          If the <b>:format</b> is <b>:bitmap</b>, the <b>:depth</b> must be
          1. In this case, the image is combined with the foreground and
          background pixels of the <i>gcontext</i>. 1 bits of the image are
          displayed in the foreground pixel and 0 bits are displayed in the
          background pixel.
        <p>
          The <b>:left-pad</b> must be zero for <b>:z-pixmap</b> format. For
          <b>:bitmap</b> and <b>:xy-pixmap</b> formats, the <b>:left-pad</b>
          must be less than the bitmap-scanline-pad for the <i>drawable</i>'s
          display (see <b>display-bitmap-format</b>). The first
          <b>:left-pad</b> bits in every scanline are to be ignored by the
          server; the actual image begins that many bits into the data.
        <p>
          The following attributes of the <i>gcontext</i> are used to display
          the <b>image</b>: clip-mask, clip-x, clip-y, function, plane-mask,
          and subwindow-mode.
        <p>
          The calling program is responsible for handling the byte-order and
          bit-order required by the server for the <i>drawable</i>'s display
          (see <b>display-byte-order</b> and
          <b>display-image-lsb-first-p</b>).
      <args>
        <dt> <i>drawable</i> <dd> The destination <b>drawable</b>.
        <dt> <i>gcontext</i> <dd> The graphics context used to display the image.
        <dt> <i>data</i> <dd> A sequence of integers.
        <dt> <b>:start</b> <dd> The index of the first element of <i>data</i> displayed.
        <dt> <b>:depth</b> <dd> The number of bits per pixel displayed. This argument is required.
        <dt> <b>:x</b>, <b>:y</b> <dd> The position in the <i>drawable</i> where the image region is displayed. These
          arguments are required.
        <dt> <b>:width</b>, <b>:height</b> <dd> <b>card16</b> values defining the size of the image region displayed. These
          arguments are required.
        <dt> <b>:left-pad</b> <dd> A <b>card8</b> specifying the number of leading bits to discard for each image
          scanline.
        <dt> <b>:format</b> <dd> One of <b>:bitmap</b>, <b>:xy-pixmap</b>, or <b>:z-pixmap</b>.
    </defun>
    
    <h1 name=fonts-and-characters>8 Font and Characters</h1>
    <h2>8.1 Introduction</h2>
    
    <p>
      An X server maintains a set of fonts used in the text operations
      requested by client programs. An X font is an array of character bit
      maps (or <i>glyphs</i>) indexed by integer codes. In fact, font glyphs
      can also represent cursor shapes or other images and are not limited to
      character images. X supports both linear and matrix encoding of font
      indexes.  With linear encoding, a font index is interpreted as a single
      16-bit integer index into a one-dimensional array of glyphs. With matrix
      encoding, a font index is interpreted as a pair of 8-bit integer indexes
      into a two-dimensional array of glyphs. The type of index encoding used
      is font-dependent.
    <p>
      In order to access or use a font, a client program must first open it
      using the <b>open-font</b> function, sending a font name string as an
      identifier. <b>open-font</b> creates a CLX <b>font</b> object used to
      refer to the font in subsequent functions. Afterward, calling
      <b>open-font</b> with the same font name returns the same <b>font</b>
      object. When a font is no longer in use, a client program can call
      <b>close-font</b> to destroy the <b>font</b> object.
    <p>
      A font has several attributes which describe its geometry and its
      glyphs. CLX provides functions to return the attributes of a font, as
      well functions for accessing the attributes of individual font
      glyphs. Glyph attributes are referred to as <i>character attributes</i>,
      since characters are the most common type of font glyphs. A font also
      has a property list of values recorded by the X server. However, the set
      of possible font properties and their values are not standardized and
      are implementation-dependent. Typically, CLX maintains a cache of font
      and character attributes, in order to minimize server requests.
      However, the font cache mechanism is implementation-dependent and cannot
      be controlled by the client. In some cases, CLX may create a
      <i>pseudo-font</i> object solely for the purpose of accessing font
      attributes. A pseudo-font is represented by a special type of
      <b>font</b> object that cannot be used in a <b>gcontext</b>. If
      necessary, CLX can automatically convert a pseudo-font into a true font,
      if the name of the pseudo-font is known.
    <p>
      The set of available fonts is server-dependent; that is, font names are
      not guaranteed to be portable from one server to the next. However, the
      public X implementation from MIT includes a set of fonts that are
      typically available with most X servers.
    <p>
      The following paragraphs describe CLX functions to:
    <ul>
      <li> Open and close fonts.
      <li> List available fonts.
      <li> Access font attributes.
      <li> Access character attributes.
      <li> Return the size of a text string.
    </ul>
    
    <h2>8.2 Opening Fonts</h2>
    
    <p>
      The following paragraphs discuss the CLX functions for opening and
      closing fonts.
      
    <defun>
      <name> open-font
      <ll>   <i>display name</i>
      <kind> Function
      <returns>
        <dt> <i>font</i> <dd> Type <b>font</b>.
      <desc>
        <p>
          Opens the font with the given <i>name</i> and returns a
          <b>font</b> object. The name string should contain only ISO
          Latin-1 characters; case is not significant.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
        <dt> <i>name</i> <dd> A font name string.
    </defun>
    
    <defun>
      <name> close-font
      <ll>   <i>font</i>
      <kind> Function
      <desc>
        <p>
          Deletes the association between the resource ID and the
          <i>font</i>. The <i>font</i> is freed when no other server
          resource references it. The <i>font</i> can be unloaded by the X
          server if this is the last reference to the <i>font</i> by any
          client. In any case, the <i>font</i> should never again be
          referenced because its resource ID is destroyed. This might not
          generate a protocol request if the <i>font</i> is
          reference-counted locally or if it is a pseudo-font.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> discard-font-info
      <ll>   <i>fonts</i>
      <kind> Function
      <desc>
        <p>
          Discards any state that can be re-obtained with
          <b>open-font</b>. This is simply a performance hint for
          memory-limited systems.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <h2>8.3 Listing Fonts</h2>
    
    <p>
      The following paragraphs describe CLX functions that return fonts or
      font names that match a given pattern string. Such pattern strings
      should contain only ISO Latin-1 characters; case is not significant. The
      following pattern characters can be used for <i>wildcard</i> matching:
    <p>
    <dl>
      <dt><code>#\*</code><dd> Matches any sequence of zero or more characters.
      <dt><code>#\?</code><dd> Matches any single character.
    </dl>
    <p>
      For example, the pattern "T?mes Roman" matches the name "Times Roman"
      but not the name "Thames Roman". However, the pattern "T*mes Roman"
      matches both names.
      
    <defun>
      <name> font-path
      <ll>   <i>display</i> &amp;key (<b>:result-type 'list</b>)
      <kind> Function
      <returns>
        <dt> <i>paths</i> <dd> Type <b>sequence</b> of either <b>string</b> or <b>pathname</b>.
      <desc>
        <p>
          Returns a <b>list</b> (by default) of names containing the current
          search path for fonts. With <b>setf</b>, this function sets the
          search path for font lookup. There is only one search path per
          server, not one per client. The interpretation of the names is
          server-dependent, but they are intended to specify directories to be
          searched in the order listed.
        <p>
          Setting the path to the empty list restores the default path
          defined for the server. Note that as a side-effect of
          executing this request, the server is guaranteed to flush
          all cached information about fonts for which there are
          currently no explicit resource IDs allocated.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
        <dt> <b>:result-type</b> <dd> Specifies the type of resulting sequence.
    </defun>
    
    <defun>
      <name> list-font-names
      <ll>   <i>display pattern</i> &amp;key (<b>:max-fonts</b> 65535) (<b>:result-type 'list</b>)
      <kind> Function
      <returns>
        <dt> <i>font-name</i> <dd> Type <b>sequence</b> of <b>string</b>.
      <desc>
        <p>
          Returns a sequence of strings containing the font names that match
          the <i>pattern</i>. The fonts available are determined by the font
          search path; see <b>font-path</b>). The maximum number of font names
          returned is determined by <b>:max-fonts</b>.
          
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
        <dt> <i>pattern</i> <dd> A string used to match font names. Only font names that match the pattern are
          returned.
        <dt> <b>:max-fonts</b> <dd> The maximum number of font names returned. Default is 65535.
        <dt> <b>:result-type</b> <dd> The type of sequence to return. Default is '<b>list</b>.
    </defun>
    
    <defun>
      <name> list-fonts
      <ll>   <i>display pattern</i> &amp;key (<b>:max-fonts</b> 65535) (<b>:result-type 'list</b>)
      <kind> Function
      <returns>
        <dt> <i>font</i> <dd> Type <b>sequence</b> of <b>font</b>.
      <desc>
        <p>
          Returns a sequence of pseudo-fonts corresponding to the available
          fonts whose names match the <i>pattern</i>. The fonts available are
          determined by the font search path; see <b>font-path</b>). The
          maximum number of <b>font</b> objects returned is determined by
          <b>:max-fonts</b>.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
        <dt> <i>pattern</i> <dd> A string used to match font names. Only fonts whose name matches the
          pattern are returned.
        <dt> <b>:max-fonts</b> <dd> The maximum number of fonts returned. Default is 65535.
        <dt> <b>:result-type</b> <dd> The type of sequence to return. Default is <b>'list</b>.
    </defun>
    
    <h2>8.4 Font Attributes</h2>
    
    <p>
      The following paragraphs describe the CLX functions used to access font
      attributes.
      
    <defun>
      <name> font-all-chars-exist-p
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>exists-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns true if glyphs exist for all indexes in the range returned
          by <b>font-min-char</b> and <b>font-max-char</b>. Returns
          <b>nil</b> if an index in the range corresponds to empty glyph.
          
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-ascent
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>ascent</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the vertical <i>ascent</i> of the <i>font</i> used for
          interline spacing. The <i>ascent</i> defines the nominal distance
          in pixels from the baseline to the bottom of the previous line of
          text.  Some font glyphs may actually extend beyond the font
          <i>ascent</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-default-char
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>index</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the <i>index</i> of the glyph drawn when an invalid or
          empty glyph index is specified.  If the default index specifies an
          invalid or empty glyph, an invalid or empty index has no effect.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-descent
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>descent</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the vertical <i>descent</i> of the <i>font</i> used for
          interline spacing. The <i>descent</i> defines the nominal distance
          in pixels from the baseline to the top of the next line of
          text. Some font glyphs may actually extend beyond the font
          <i>descent</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-direction
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>direction</i> <dd> Type <b>draw-direction</b>.
      <desc>
        <p>
          Returns the nominal drawing <i>direction</i> for the
          <i>font</i>. The font drawing direction is only a hint that
          indicates whether the <i>char-width</i> of most font glyphs is
          positive (<b>:left-to-right</b> direction) or negative
          (<b>:right-to-left</b> direction). Note that X does not provide
          any direct support for vertical text.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-display
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>display</i> <dd> Type <b>display</b>.
      <desc>
        <p>
          Returns the <b>display</b> object associated with the specified
          <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-equal
      <ll>   <i>font-1 font-2</i>
      <kind> Function
      <desc>
        <p>
          Returns true if the two arguments refer to the same server
          resource and <b>nil</b> if they do not.
      <args>
        <dt> <i>font-1</i>, <i>font-2</i> <dd> The <b>font</b> objects.
    </defun>
    
    <defun>
      <name> font-id
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>id</i> <dd> Type <b>resource-id</b>.
      <desc>
        <p>
          Returns the unique resource ID assigned to the specified <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-max-byte1
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>max-byte1</i> <dd> Type <b>card8</b><i>.</i>
      <desc>
        <p>
          Returns zero if the <i>font</i> uses linear index
          encoding. Otherwise, if the <i>font</i> uses matrix index
          encoding, a value between 1 and 255 is returned that specifies the
          maximum value for the most significant byte of font indexes.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-max-byte2
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>max-byte2</i> <dd> Type <b>card8</b><i>.</i>
      <desc>
        <p>
          Returns zero if the <i>font</i> uses linear index
          encoding. Otherwise, if the <i>font</i> uses matrix index
          encoding, a value between 1 and 255 is returned that specifies the
          maximum value for the least significant byte of font indexes.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-max-char
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>index</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the maximum valid value used for linear encoded
          indexes. This function is not meaningful for fonts that use matrix
          index encoding.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-min-byte1
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>min-byte1</i> <dd> Type <b>card8</b>.
      <desc>
        <p>
          Returns zero if the <i>font</i> uses linear index
          encoding. Otherwise, if the <i>font</i> uses matrix index
          encoding, a value between 1 and 255 is returned that specifies the
          minimum value for the most significant byte of font indexes.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-min-byte2
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>min-byte2</i> <dd> Type <b>card8</b>.
      <desc>
        <p>
          Returns zero if the <i>font</i> uses linear index
          encoding. Otherwise, if the <i>font</i> uses matrix index
          encoding, a value between 1 and 255 is returned that specifies the
          minimum value for the least significant byte of font indexes.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-min-char
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>index</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the minimum valid value used for linear encoded
          indexes. This function is not meaningful for fonts that use matrix
          index encoding.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-name
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>name</i> <dd> Type <b>string</b> or <b>null</b>.
      <desc>
        <p>
          Returns the name of the <i>font</i>, or <b>nil</b> if <i>font</i>
          is a pseudo-font.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-p
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>font-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns true if the argument is a <b>font</b> object and
          <b>nil</b> otherwise.
    </defun>
    
    <defun>
      <name> font-plist
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>plist</i> <dd> Type <b>list</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the property list for the
          specified <i>font</i>. This function provides a hook where
          extensions can add data.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-properties
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>properties</i> <dd> Type <b>list</b>.
      <desc>
        <p>
          Returns the list of font <i>properties</i> recorded by the X
          server. The returned list is a property list of keyword/value
          pairs. The set of possible font property keywords is
          implementation-dependent.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> font-property
      <ll>   <i>font name</i>
      <kind> Function
      <returns>
        <dt> <i>property</i> <dd> Type <b>int32</b> or <b>null</b>.
      <desc>
        <p>
          Returns the value of the font <i>property</i> specified by the
          <i>name</i> keyword. The property value, if it exists, is returned
          as an uninterpreted 32-bit integer.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
        <dt> <i>name</i> <dd> A font property keyword.
    </defun>
    
    <defun>
      <name> max-char-ascent
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>ascent</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the maximum <b>char-ascent</b> value for all characters in
          <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> max-char-attributes
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>attributes</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the maximum <b>char-attributes</b> value for all
          characters in <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> max-char-descent
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>descent</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the maximum <b>char-descent</b> value for all characters
          in <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> max-char-left-bearing
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>left-bearing</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the maximum <b>char-left-bearing</b> value for all characters in <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> max-char-right-bearing
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>right-bearing</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the maximum <b>char-right-bearing</b> value for all
          characters in <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> max-char-width
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>width</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the maximum <b>char-width</b> value for all characters in
          <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> min-char-ascent
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>ascent</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the minimum <b>char-ascent</b> for all characters in
          <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> min-char-attributes
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>attributes</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the minimum <b>char-attributes</b> for all characters in <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> min-char-descent
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>descent</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the minimum <b>char-descent</b> for all characters in <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> min-char-left-bearing
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>left-bearing</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the minimum <b>char-left-bearing</b> for all characters in
          <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> min-char-right-bearing
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>right-bearing</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the minimum <b>char-right-bearing</b> for all characters
          in <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <defun>
      <name> min-char-width
      <ll>   <i>font</i>
      <kind> Function
      <returns>
        <dt> <i>width</i> <dd> Type <b>int16</b>.
      <desc>
        <p>
          Returns the minimum <b>char-width</b> for all characters in
          <i>font</i>.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
    </defun>
    
    <h2>8.5 Chracter Attributes</h2>
    
    <p>
      The following paragraphs describe the CLX functions used to access the
      attributes of individual font glyphs.
      
    <defun>
      <name> char-ascent
      <ll>   <i>font index</i>
      <kind> Function
      <returns>
        <dt> <i>ascent</i> <dd> Type <b>int16</b> or <b>null</b>.
      <desc>
        <p>
          Returns the vertical distance in pixels from the baseline to the top
          of the given font glyph. Returns <b>nil</b> if the index is invalid
          or specifies an empty glyph, or if the <i>font</i> is a pseudo-font.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
        <dt> <i>index</i> <dd> An <b>int16</b> font index.
    </defun>
    
    <defun>
      <name> char-attributes
      <ll>   <i>font index</i>
      <kind> Function
      <returns>
        <dt> <i>attributes</i> <dd> Type <b>int16</b> or <b>null</b>.
      <desc>
        <p>
          Returns font-specific <i>attributes</i> of the given glyph. The
          interpretation of such attributes is server-dependent. Returns
          <b>nil</b> if the <i>index</i> is invalid or specifies an empty
          glyph, or if the <i>font</i> is a pseudo-font.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
        <dt> <i>index</i> <dd> An <b>int16</b> font index.
    </defun>
    
    <defun>
      <name> char-descent
      <ll>   <i>font index</i>
      <kind> Function
      <returns>
        <dt> <i>descent</i> <dd> Type <b>int16</b> or <b>null</b>.
      <desc>
        <p>
          Returns the vertical distance in pixels from the baseline to the
          bottom of the given font glyph. Returns <b>nil</b> if the
          <i>index</i> is invalid or specifies an empty glyph, or if the
          <i>font</i> is a pseudo-font.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
        <dt> <i>index</i> <dd> An <b>int16</b> font index.
    </defun>
    
    <defun>
      <name> char-left-bearing
      <ll>   <i>font index</i>
      <kind> Function
      <returns>
        <dt> <i>left-bearing</i> <dd> Type <b>int16</b> or <b>null</b>.
      <desc>
        <p>
          Returns the left side bearing of the given font glyph. If
          <b>draw-glyph</b> is called with horizontal position <i>x</i>,
          the leftmost pixel of the glyph is drawn at the position
          (+&nbsp;<i>x&nbsp;left-bearing</i>). Returns <b>nil</b> if the
          <i>index</i> is invalid or specifies an empty glyph, or if the
          <i>font</i> is a pseudo-font.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
        <dt> <i>index</i> <dd> An <b>int16</b> font index.
    </defun>
    
    <defun>
      <name> char-right-bearing
      <ll>   <i>font index</i>
      <kind> Function
      <returns>
        <dt> <i>right-bearing</i> <dd> Type <b>int16</b> or <b>null</b>.
      <desc>
        <p>
          Returns the right side bearing of the given font glyph. If
          <b>draw-glyph</b> is called with horizontal position <i>x</i>,
          the rightmost pixel of the glyph is drawn at the position (+
          &nbsp;<i>x&nbsp;rightbearing</i>). Returns <b>nil</b> if the
          <i>index</i> is invalid or specifies an empty glyph, or if the
          <i>font</i> is a pseudo-font.
      <args>
        <dt> <i>font</i> <dd> A <i>font</i> object.
        <dt> <i>index</i> <dd> An <b>int16</b> font index.
    </defun>
    
    <defun>
      <name> char-width
      <ll>   <i>font index</i>
      <kind> Function
      <returns>
        <dt> <i>width</i> <dd> Type <b>int16</b> or <b>null</b>.
      <desc>
        <p>
          Returns the <i>width</i> of the given font glyph. The <i>width</i>
          is defined to be equal to (- <i>rightbearing
            left-bearing</i>). Returns <b>nil</b> if the <i>index</i> is invalid
          or specifies an empty glyph, or if the <i>font</i> is a pseudo-font.
      <args>
        <dt> <i>font</i> <dd> A <b>font</b> object.
        <dt> <i>index</i> <dd> An <b>int16</b> font index.
    </defun>
    
    <h2>8.6 Querying Text Size</h2>
    
    <p>
      CLX defines functions to return the size of text drawn in a specified
      font. See <ref name=drawing-text>, for a description of the
      <b>:translate</b> function used by the functions in the following
      paragraphs.
      
    <defun>
      <name> text-extents
      <ll>   <i>font sequence</i> &amp;key (<b>:start</b> 0) <b>:end :translate</b>
      <kind> Function
      <returns>
        <dt> <i>width</i> <dd> Type <b>int32</b>.
        <dt> <i>ascent</i> <dd> Type <b>int16</b>.
        <dt> <i>descent</i> <dd> Type <b>int16</b>.
        <dt> <i>left</i> <dd> Type <b>int32</b>.
        <dt> <i>right</i> <dd> Type <b>int32</b>.
        <dt> <i>font-ascent</i> <dd> Type <b>int16</b>.
        <dt> <i>direction</i> <dd> Type <b>draw-direction</b>.
        <dt> <i>first-not-done</i> <dd> Type <b>array-index</b> or <b>null</b>.
      <desc>
        <p>
          Returns the complete geometry of the given <i>sequence</i> when
          drawn in the given <i>fon</i>t. The <i>font</i> can be a
          <b>gcontext</b>, in which case the font attribute of the given
          graphics context is used. <b>:start</b> and <b>:end</b> define the
          elements of the <i>sequence</i> which are used.
        <p>
          The returned <i>width</i> is the total pixel width of the
          translated character sequence. The returned <i>ascent</i> and
          <i>descent</i> give the vertical ascent and descent for characters
          in the translated <i>sequence</i>. The returned <i>left</i> gives
          the left bearing of the leftmost character. The returned
          <i>right</i> gives the right bearing of the rightmost
          character. The returned <i>font-ascent</i> and <i>font-descent</i>
          give the maximum vertical ascent and descent for all characters in
          the <i>fon</i>t. If <b>:translate</b> causes font changes, then
          <i>font-ascent</i> and <i>font-descent</i> will be the maximums
          over all fonts used. The <i>direction</i> returns the preferred
          draw direction for the font. If <b>:translate</b> causes font
          changes, then the <i>direction</i> will be <b>nil</b>. The
          <i>first-not-done</i> value returned is <b>nil</b> if all elements
          of the <i>sequence</i> were successfully translated; otherwise the
          index of the first untranslated element is returned.
      <args>
        <dt> <i>font</i> <dd> The font (or <b>gcontext</b>) used for measuring characters.
        <dt> <i>sequence</i> <dd> A sequence of characters or other objects to be translated into font indexes.
        <dt> <b>:start</b>, <b>:end</b> <dd> Start and end indexes defining the elements to draw.
        <dt> <b>:translate</b> <dd> A function to translate text to font indexes. Default is
          <b>#'translate-default</b>.
    </defun>
    
    <defun>
      <name> text-width
      <ll>   <i>font sequence</i> &amp;key (<b>:start</b> 0) <b>:end :translate</b>
      <kind> Function
      <returns>
        <dt> <i>width</i> <dd> Type <b>int32</b>.
        <dt> <i>first-not-done</i> <dd> Type <b>array-index</b> or <b>null</b>.
      <desc>
        <p>
          Returns the total pixel width of the given <i>sequence</i> when
          drawn in the given <i>font</i>. The <i>font</i> can be a
          <b>gcontext</b>, in which case the font attribute of the given
          graphics context is used. <b>:start</b> and <b>:end</b> define the
          elements of the <i>sequence</i> which are used. The second value
          returned is <b>nil</b> if all elements of the <i>sequence</i> were
          successfully translated; otherwise the index of the first
          untranslated element is returned.
      <args>
        <dt> <i>font</i> <dd> The font (or <b>gcontext</b>) used for measuring characters.
        <dt> <i>sequence</i> <dd> A sequence of characters or other objects to be translated into font indexes.
        <dt> <b>:start</b>, <b>:end</b> <dd> Start and end indexes defining the elements to draw.
        <dt> <b>:translate</b> <dd> A function to translate text to font indexes. Default is
          <b>#'translate-default</b>.
    </defun>
    
    <h1>9 Colors</h1>
    
    <h2 name=colormaps-and-colors>9.1 Colormaps and Colors</h2>
    
    <p>
      In X, a <i>color</i> is defined by a set of three numeric values,
      representing intensities of red, green, and blue. Red, green, and blue
      are referred to as the <i>primary</i> hues. A <i>colormap</i> is a list
      of colors, each indexed by an integer <i>pixel</i> value. Each entry in
      a colormap is called a color <i>cell</i>. Raster graphics displays store
      pixel values in a special screen hardware memory. As the screen hardware
      scans this memory, it reads each pixel value, looks up the color in the
      corresponding cell of a colormap, and displays the color on its screen.
    <p>
      The colormap abstraction applies to all classes of visual types
      supported by X, including those for screens which are actually
      monochrome. For example, <b>:gray-scale</b> screens use colormaps in
      which colors actually specify the monochrome intensity. A typical
      black-and-white monochrome display has a <b>:static-gray</b> screen with
      a two-cell colormap.
    <p>
      The following list describes how pixel values and colormaps are handled
      for each visual class.
    <dl>
      <dt>
        <b>:direct-color</b>
      <dd>
        A pixel value is decomposed into separate red, green, and blue
        subfields. Each subfield indexes a separate colormap. Entries in all colormaps can
        be changed.
      <dt>
        <b>:gray-scale</b>
      <dd>
        A pixel value indexes a single colormap that contains monochrome
        intensities. Colormap entries can be changed.
      <dt>
        <b>:pseudo-color</b>
      <dd>
        A pixel value indexes a single colormap that contains color
        intensities. Colormap entries can be changed.
      <dt>
        <b>:static-color</b>
      <dd>
        Same as <b>:pseudo-color</b>, except that the colormap entries are
        predefined by the hardware and cannot be changed.
      <dt>
        <b>:static-gray</b>
      <dd>
        Same as <b>:gray-scale</b>, except that the colormap entries are
        predefined by the hardware and cannot be changed.
      <dt>
        <b>:true-color</b>
      <dd>
        Same as <b>:direct-color</b>, except that the colormap entries are
        predefined by the hardware and cannot be changed. Typically, each of
        the red, green, and blue colormaps provides a (near) linear ramp of
        intensity.
    </dl>
    <p>
      CLX provides functions to create colormaps, access and modify colors and
      color cells, and install colormaps in screen hardware.
      
    <h2 name=color-functions>9.2 Color Functions</h2>
    
    <p>
      A color is represented by a CLX color object, in which each of the red,
      green, and blue values is specified by an <b>rgb-val</b> -- a floating
      point number between 0.0 and 1.0.  (see <ref name=datatypes>). The
      value 0.0 represents the minimum intensity, while 1.0 represents the
      maximum intensity. CLX automatically converts <b>rgb-val</b> values into
      16-bit integers when sending colors to an X server. The X server, in
      turn, scales 16-bit color values to match the actual intensity range
      supported by the screen.
    <p>
      Colors used on <b>:gray-scale</b> screens must have the same value for
      each of red, green, and blue. Only one of these values is used by screen
      hardware to determine intensity; however, CLX does not define which of
      red, green, or blue is actually used.
    <p>
      The following paragraphs describe the CLX functions used to create,
      access, and modify colors.
      
    <defun>
      <name> make-color
      <ll>   &amp;key (<b>:blue</b> 1.0) (<b>:green</b> 1.0) (<b>:red</b> 1.0) &amp;allow-other-keys
      <kind> Function
      <returns>
        <dt> <i>color</i> <dd> Type <b>color</b>.
      <desc>
        <p>
          Creates, initializes, and returns a new <b>color</b> object with the
          specified values for red, green, and blue.
      <args>
        <dt> <b>:blue</b>, <b>:green</b>, <b>:red</b> <dd> <b>rgb-val</b> values that specify the saturation for each primary.
    </defun>
    
    <defun>
      <name> color-blue
      <ll>   <i>color</i>
      <kind> Function
      <returns>
        <dt> <i>blue-intensity</i> <dd> Type <b>rgb-val</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the value for blue in the
          <i>color</i>.
      <args>
        <dt> <i>color</i> <dd> A <b>color</b> object.
    </defun>
    
    <defun>
      <name> color-green
      <ll>   <i>color</i>
      <kind> Function
      <returns>
        <dt> <i>green-intensity</i> <dd> Type <b>rgb-val</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the value for green in the
          <i>color</i>.
      <args>
        <dt> <i>color</i> <dd> A <b>color</b> object.
    </defun>
    
    <defun>
      <name> color-p
      <ll>   <i>color</i>
      <kind> Function
      <returns>
        <dt> <i>color-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns non-<b>nil</b> if the argument is a <b>color</b> object and
          <b>nil</b> otherwise.
    </defun>
    
    <defun>
      <name> color-red
      <ll>   <i>color</i>
      <kind> Function
      <returns>
        <dt> <i>red-intensity</i> <dd> Type <b>rgb-val</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the value for red in the
          <i>color</i>.
      <args>
        <dt> <i>color</i> <dd> A <b>color</b> object.
    </defun>
    
    <defun>
      <name> color-rgb
      <ll>   <i>color</i>
      <kind> Function
      <returns>
        <dt> <i>red</i>, <i>green</i>, <i>blue</i> <dd> Type <b>rgb-val</b>.
      <desc>
        <p>
          Returns the values for red, green, and blue in the <i>color</i>.
      <args>
        <dt> <i>color</i> <dd> A <b>color</b> object.
    </defun>
    
    <h2 name=colormap-functions>9.3 Colormap Functions</h2>
    
    <p>
      A colormap is represented in CLX by a <b>colormap</b> object. A CLX
      program can create and manipulate several <b>colormap</b>
      objects. However, the colors contained in a <b>colormap</b> are made
      visible only when the <b>colormap</b> is <i>installed</i>. Each window
      is associated with a <b>colormap</b> that is used to translate window
      pixels into colors (see <b>window-colormap</b>). However, a window will
      appear in its true colors only if its associated <b>colormap</b> is
      installed.
    <p>
      The total number of colormaps that can be installed depends on the
      screen hardware.  Most hardware devices allow exactly one
      <b>colormap</b> to be installed at any time. That is,
      <b>screen-min-installed-maps</b> and <b>screen-max-installed-maps</b>
      are both equal to 1.  Installing a new <b>colormap</b> can cause a
      previously installed <b>colormap</b> to be uninstalled. It is important
      to remember that the set of installed <b>colormaps</b> is a hardware
      resource shared cooperatively among all client programs connected to an
      X server.
    <p>
      A CLX program can control the contents of <b>colormaps</b> by allocating
      color cells in one of two ways: read-only or read-write. Allocating a
      read-only color cell establishes a color value for a specified pixel
      value that cannot be changed. However, read-only color cells can be
      shared among all client programs. Read-only allocation is the best
      strategy for making use of limited <b>colormap</b> hardware in a
      multi-client environment.
    <p>
      Alternatively, allocating a read-write color cell allows a client the
      exclusive right to set the color value stored in the cell. A cell
      allocated read-write by one client cannot be allocated by another
      client, not even as a read-only cell. Note that read-write allocation is
      not allowed for screens whose visual type belongs to one of the
      <b>:static-gray</b>, <b>:static-color</b>, or <b>:true-color</b>
      classes. For screens of these classes, <b>colormap</b> cells cannot be
      modified.
    <p>
      Two entries of the default colormap, typically containing the colors
      black and white, are automatically allocated read-only. The pixel values
      for these entries can be returned by the functions
      <b>screen-black-pixel</b> and <b>screen-white-pixel</b>. Applications
      that need only two colors and also need to operate on both monochrome
      and color screens should always use these pixel values. The names
      <i>black</i> and <i>white</i> are intended to reflect relative intensity
      levels and need not reflect the actual colors displayed for these pixel
      values.
    <p>
      Each screen has a default <b>colormap</b>, which is initially
      installed. By conventions, clients should allocate only read-only cells
      from the default <b>colormap</b>.
      
    <h3>9.3.1 Creating Colormaps</h3>
    
    <p>
      CLX provides functions for creating and freeing new <b>colormap</b>
      objects.
      
    <defun>
      <name> create-colormap
      <ll>   <i>visual window</i> &amp;optional <i>alloc-p</i>
      <kind> Function
      <returns>
        <dt> <i>colormap</i> <dd> Type <b>colormap</b>.
      <desc>
        <p>
          Creates and returns a <i>colormap</i> of the specified
          <i>visual</i> type for the screen containing the
          <i>window</i>. The <i>visual</i> type must be one of those
          supported by the screen.
        <p>
          Initial color cell values are undefined for visual types belonging
          to the <b>:gray-scale</b>, <b>:pseudo-color</b>, and
          <b>:direct-color</b> classes. Color cell values for visual types
          belonging to the <b>:static-gray</b>, <b>:static-color</b>, and
          <b>:true-color</b> classes have initial values defined by the
          visual type. However, X does not define the set of possible visual
          types or their initial color cell values.
        <p>
          If <i>alloc-p</i> is true, all colormap cells are permanently
          allocated read-write and cannot be freed by <b>free-colors</b>. It
          is an error for <i>alloc-p</i> to be true when the visual type
          belongs to the <b>:static-gray</b>, <b>:static-color</b>, or
          <b>:true-color</b> classes.
      <args>
        <dt> <i>visual</i> <dd> A <b>visual</b> type ID.
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>alloc-p</i> <dd> Specifies whether <b>colormap</b> cells are permanently allocated read-write.
    </defun>
    
    <defun>
      <name> copy-colormap-and-free
      <ll>   <i>colormap</i>
      <kind> Function
      <returns>
        <dt> <i>new-colormap</i> <dd> Type <b>colormap</b>.
      <desc>
        <p>
          Creates and returns a new <b>colormap</b> by copying, then
          freeing, allocated cells from the specified <i>colormap</i>.
        <p>
          All color cells allocated read-only or read-write in the original
          <b>colormap</b> have the same color values and the same allocation
          status in the <i>new-colormap</i>. The values of unallocated color
          cells in the <i>new-colormap</i> are undefined. After copying, all
          allocated color cells in the original <b>colormap</b> are freed,
          as if <b>free-colors</b> was called. The unallocated cells of the
          original <b>colormap</b> are not affected.
        <p>
          If <i>alloc-p</i> was true when the original <b>colormap</b> was
          created, then all color cells of the <i>new-colormap</i> are
          permanently allocated read-write, and all the color cells of the
          original <b>colormap</b> are freed.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
    </defun>
    
    <defun>
      <name> free-colormap
      <ll>   <i>colormap</i>
      <kind> Function
      <desc>
        <p>
          Destroys the <i>colormap</i> and frees its server resource. If the
          <i>colormap</i> is installed, it is uninstalled. For any window
          associated with the <i>colormap</i>, the window is assigned a
          <b>nil</b> <b>colormap</b>, and a <b>:colormap-notify</b> event is
          generated. The colors displayed for a window with a <b>nil
            colormap</b> are undefined.
        <p>
          However, this function has no effect if the <i>colormap</i> is a
          screen default <b>colormap</b>.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
    </defun>
    
    <h3>9.3.2 Installing Colormaps</h3>
    
    <p>
      The following paragraphs describe the CLX functions to install and
      uninstall colormaps and to return the set of installed colormaps.
    <p>
      Initially, the default <b>colormap</b> for a screen is installed (but is
      not in the required list).
      
    <defun>
      <name> install-colormap
      <ll>   <i>colormap</i>
      <kind> Function
      <desc>
        <p>
          Installs the <i>colormap.</i> All windows associated with this
          <i>colormap</i> immediately display with true colors. As a
          side-effect, additional colormaps might be implicitly uninstalled by
          the server.
        <p>
          If the specified <i>colormap</i> is not already installed, a
          <b>:colormap-notify</b> event is generated on every window
          associated with this <i>colormap</i>. In addition, for every other
          colormap that is implicitly uninstalled, a <b>:colormap-notify</b>
          event is generated on every associated window.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
    </defun>
    
    <defun>
      <name> installed-colormaps
      <ll>   <i>window</i> &amp;key (<b>:result-type 'list</b>)
      <kind> Function
      <returns>
        <dt> <i>colormap</i> <dd> Type <b>sequence</b> of <b>colormap</b>.
      <desc>
        <p>
          Returns a sequence containing the installed <b>colormaps</b> for the
          screen of the specified <i>window</i>. The order of the colormaps is
          not significant.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <b>:result-type</b> <dd> A sub-type of <b>sequence</b> that indicates the type of sequence to return.
    </defun>
    
    <defun>
      <name> uninstall-colormap
      <ll>   <i>colormap</i>
      <kind> Function
      <desc>
        <p>
          Uninstalls the <i>colormap</i>. However, the <i>colormap</i> is not
          actually uninstalled if this would reduce the set of installed
          colormaps below the value of <b>screen-min-installed-maps</b>. If
          the <i>colormap</i> is actually uninstalled, a
          <b>:colormap-notify</b> event is generated on every associated
          window.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
    </defun>
    
    <h3>9.3.3 Allocating Colors</h3>
    
    <p>
      The following paragraphs describe the functions for allocating read-only
      and read-write color cells, allocating color planes, and freeing color
      cells.
      
    <defun>
      <name> alloc-color
      <ll>   <i>colormap color</i>
      <kind> Function
      <returns>
        <dt> <i>pixel</i> <dd> Type <b>pixel</b>.
        <dt> <i>screen-color</i>, <i>exact-color</i> <dd> Type <b>color</b>.
      <desc>
        <p>
          Returns a <i>pixel</i> for a read-only color cell in the
          <i>colormap</i>. The color in the allocated cell is the closest
          approximation to the requested <i>color</i> possible for the screen
          hardware. The other values returned give both the approximate color
          stored in the cell and the exact color requested.
        <p>
          The requested <i>color</i> can be either a <b>color</b> object or a
          <b>stringable</b> containing a color name.  If a color name is
          given, a corresponding color value is looked up (see
          <b>lookup-color</b>) and used. Color name strings must contain only
          ISO Latin-1 characters; case is not significant.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
        <dt> <i>color</i> <dd> A <b>color</b> object or a <b>stringable</b> containing a color name.
    </defun>
    
    <defun>
      <name> alloc-color-cells
      <ll>
        <i>colormap colors</i> &amp;key (<b>:planes</b> 0) <b>:contiguous-p</b>
        (<b>:result-type 'list</b>)
      <kind> Function
      <returns>
        <dt> <i>pixels, mask</i> <dd> Type <b>sequence</b> of <b>pixels</b>.
      <desc>
        <p>
          Returns a <b>sequence</b> of <i>pixels</i> for read-write color
          cells in the <i>colormap</i>. The allocated cells contain undefined
          color values. The visual type class of the <b>colormap</b> must be
          either <b>:gray-scale</b>, <b>:pseudo-color</b>, or
          <b>:direct-color</b>.
        <p>
          The <i>colors</i> argument and the <b>:planes</b> argument define
          the number of pixels and the number of masks returned,
          respectively. The number of colors must be positive, and the number
          of planes must be non-negative. A total of (* <i>colors</i>
          (<b>expt</b> 2 <i>planes</i>)) color cells are allocated. The pixel
          values for the allocated cells can be computed by combining the
          returned pixels and masks.
        <p>
          The length of the returned masks sequence is equal to
          <b>:planes</b>. Each mask of the returned masks sequence defines a
          single bitplane. None of the masks have any 1 bits in common. Thus,
          by selectively combining masks with <b>logior</b>, (<b>expt</b> 2
          <i>planes</i>) distinct combined plane masks can be computed.
        <p>
          The length of the returned <i>pixels</i> sequence is equal to
          <i>colors</i>. None of the pixels have any 1 bits in common with
          each other or with any of the returned masks. By combining pixels
          and plane masks with <b>logior</b>, (* <i>colors</i> (<b>expt</b> 2
          <i>planes</i>)) distinct pixel values can be produced.
        <p>
          If the <i>colormap</i> class is <b>:gray-scale</b> or
          <b>:pseudo-color</b>, each <i>mask</i> will have exactly one bit
          set. If the <b>colormap</b> class is <b>:direct-color</b>, each
          <i>mask</i> will have exactly three bits set.  If
          <b>:contiguous-p</b> is true, combining all masks with <b>logior</b>
          produces a plane mask with either one set of contiguous bits (for
          <b>:gray-scale</b> and <b>:pseudo-color</b>) or three sets of
          contiguous bits (for <b>:direct-color</b>).
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
        <dt> <i>colors</i> <dd> A positive number defining the length of the pixels sequence returned.
        <dt> <b>:planes</b> <dd> A non-negative number defining the length of the masks sequence returned.
        <dt> <b>:contiguous-p</b> <dd> If true, the masks form contiguous sets of bits.
        <dt> <b>:result-type</b> <dd> A subtype of <b>sequence</b> that indicates the type of sequences returned.
    </defun>
    
    <defun>
      <name> alloc-color-planes
      <ll>
        <i>colormap colors</i> &amp;key (<b>:reds</b> 0) (<b>:greens</b> 0) (<b>:blues</b> 0) 
        <b>:contiguous-p</b> (<b>:result-type 'list</b>)
      <kind> Function
      <returns>
        <dt> <i>pixels</i> <dd> Type <b>sequence</b> of <b>pixel</b>.
        <dt> <i>red-mask</i>, <i>green-mask</i>, <i>blue-mask</i> <dd> Type <b>pixel</b>.
      <desc>
        <p>
          Returns a <b>sequence</b> of <i>pixels</i> for read-write color
          cells in the <i>colormap</i>. The allocated cells contain undefined
          color values. The visual type class of the <i>colormap</i> must be
          either <b>:gray-scale</b>, <b>:pseudo-color</b>, or
          <b>:direct-color</b>.
        <p>
          The <i>colors</i> argument defines the number of pixels
          returned. The <b>:reds</b>, <b>:greens</b>, and <b>:blues</b>
          arguments define the number of bits set in the returned red, green,
          and blue masks, respectively. The number of colors must be positive,
          and the number of bits for each mask must be non-negative. A total
          of (* <i>colors</i> (<b>expt</b> 2 (+ <i>reds greens</i>
          <i>blues</i>))) color cells are allocated. The pixel values for the
          allocated cells can be computed by combining the returned
          <i>pixels</i> and masks.
        <p>
          Each mask of the returned masks defines a pixel subfield for the
          corresponding primary.  None of the masks have any 1 bits in
          common. By selectively combining subsets of the red, green, and blue
          masks with <b>logior</b>, (<b>expt</b> 2 (+ <i>reds greens
            blues</i>) distinct combined plane masks can be computed.
        <p>
          The length of the returned <i>pixels</i> <b>sequence</b> is equal to
          <i>colors</i>. None of the pixels have any 1 bits in common with
          each other or with any of the returned masks. By combining pixels
          and plane masks with <b>logior</b>, (* <i>colors</i> (<b>expt</b> 2
          (+ <i>reds greens blues</i>)) distinct pixel values can be produced.
        <p>
          If <b>:contiguous-p</b> is true, each of returned masks consists of
          a set of contiguous bits. If the <b>colormap</b> class is
          <b>:direct-color</b>, each returned mask lies within the pixel
          subfield for its primary.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
        <dt> <i>colors</i> <dd> A positive number defining the length of the pixels sequence returned.
        <dt> <b>:planes</b> <dd> A non-negative number defining the length of the masks sequence returned.
        <dt> <b>:contiguous-p</b> <dd> If true, then the masks form contiguous sets of bits.
        <dt> <b>:result-type</b> <dd> A subtype of <b>sequence</b> that indicates the type of sequences returned.
    </defun>
    
    <defun>
      <name> free-colors
      <ll>   <i>colormap pixels</i> &amp;optional (<i>plane-mask</i> 0)
      <kind> Function
      <desc>
        <p>
          Frees a set of allocated color cells from the <i>colormap</i>. The
          pixel values for the freed cells are computed by combining the given
          <i>pixels</i> sequence and <b>:plane-mask</b>. The total number of
          cells freed is:
        <p align=center>
          (* (<b>length</b> <i>pixels</i>) (<b>expt</b> 2 (<b>logcount</b> <i>plane-mask</i>)))
        <p>
          The <b>:plane-mask</b> must not have any bits in common with any of
          the given <i>pixels</i>. The pixel values for the freed cells are
          produced by using <b>logior</b> to combine each of the given pixels
          with all subsets of the <b>:plane-mask</b>.
        <p>
          Note that freeing an individual pixel allocated by
          <b>alloc-color-planes</b> may not allow it to be reused until all
          related pixels computed from the same plane mask are also freed.
        <p>
          A single error is generated if any computed pixel is invalid or if
          its color cell is not allocated by the client. Even if an error is
          generated, all valid pixel values are freed.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
        <dt> <i>pixels</i> <dd> A <b>sequence</b> of pixel values.
        <dt> <i>plane-mask</i> <dd> A pixel value with no bits in common with any of the <i>pixels</i>.
    </defun>
    
    <h3>9.3.4 Finding Colors</h3>
    
    <p>
      A CLX program can ask the X server to return the colors stored in
      allocated color cells. The server also maintains a dictionary of color
      names and their associated color values. CLX provides a function to look
      up the values for common colors by names such as "red", "purple", and so
      forth. The following paragraphs describe the CLX functions for returning
      the color values associated with color cells or with color names.
      
    <defun>
      <name> lookup-color
      <ll>   <i>colormap name</i>
      <kind> Function
      <returns>
        <dt> <i>screen-color</i>, <i>exact-color</i> <dd> Type <b>color</b>.
      <desc>
        <p>
          Returns the color associated by the X server with the given color
          <i>name</i>. The <i>name</i> must contain only ISO Latin-1
          characters; case is not significant. The first value returned is the
          closest approximation to the requested color possible on the screen
          hardware. The second value returned is the true color value for the
          requested color.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
        <dt> <i>name</i> <dd> A <b>stringable</b> color name.
    </defun>
    
    <defun>
      <name> query-colors
      <ll>   <i>colormap pixels</i> &amp;key (<b>:result-type 'list</b>)
      <kind> Function
      <returns>
        <dt> <i>colors</i> <dd> Type <b>sequence</b> of <b>color</b>.
      <desc>
        <p>
          Returns a <b>sequence</b> of the colors contained in the allocated
          cells of the <i>colormap</i> specified by the given
          <i>pixels</i>. The values returned for unallocated cells are
          undefined.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
        <dt> <i>pixels</i> <dd> A <b>sequence</b> of <b>pixel</b> values.
        <dt> <b>:result-type</b> <dd> A subtype of <b>sequence</b> that indicates the type of sequences returned.
    </defun>
    
    <h3>9.3.5 Changing Colors</h3>
    
    <p>
      The following paragraphs describe the CLX functions to change the colors
      in colormap cells.
      
    <defun>
      <name> store-color
      <ll>   <i>colormap pixel color</i> &amp;key (<b>:red-p t</b>) (<b>:green-p t</b>) (<b>:blue-p t</b>)
      <kind> Function
      <desc>
        <p>
          Changes the contents of the <i>colormap</i> cell indexed by the
          <i>pixel</i>. Components of the given <i>color</i> are stored in the
          cell. The <b>:red-p</b>, <b>:green-p</b>, and <b>:blue-p</b>
          arguments indicate which components of the given <i>color</i> are
          stored.
        <p>
          The <i>color</i> can be either a <b>color</b> object or a
          <b>stringable</b> containing a color name. If a color name is given,
          a corresponding color value is looked up (see <b>lookup-color</b>)
          and used.  Color name strings must contain only ISO Latin-1
          characters; case is not significant.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
        <dt> <i>pixel</i> <dd> A <b>pixel</b>.
        <dt> <i>color</i> <dd> A color <b>object</b> or a <b>stringable</b> containing a color name.
        <dt> <b>:red-p</b>, <b>:green-p</b>, <b>:blue-p</b> <dd> <b>boolean</b> values indicating which color components to
          store.
    </defun>
    
    <defun>
      <name> store-colors
      <ll>   <i>colormap pixel-colors</i> &amp;key (<b>:red-p t</b>) (<b>:green-p t</b>) (<b>:blue-p t</b>)
      <kind> Function
      <desc>
        <p>
          Changes the contents of multiple <i>colormap</i>
          cells. <i>pixel-colors</i> is a list of the form ({ <i>pixel
            color</i>}*), indicating a set of pixel values and the colors to
          store in the corresponding cells. The <b>:red-p</b>,
          <b>:green-p</b>, and <b>:blue-p</b> arguments indicate which
          components of the given colors are stored.
        <p>
          Each color can be either a <b>color</b> object or a
          <b>stringable</b> containing a color name. If a color name is given,
          a corresponding color value is looked up (see <b>lookup-color</b>)
          and used.  Color name strings must contain only ISO Latin-1
          characters; case is not significant.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
        <dt> <i>pixel-colors</i> <dd> A list of the form ({<i>pixel color</i>}*).
        <dt> <b>:red-p</b>, <b>:green-p</b>, <b>:blue-p</b> <dd> <b>boolean</b> values indicating which color components to
          store.
    </defun>
    
    <h3>9.3.6 Colormap Attributes</h3>
    
    <p>
      The complete set of colormap attributes is discussed in the following
      paragraphs.
      
    <defun>
      <name> colormap-display
      <ll>   <i>colormap</i>
      <kind> Function
      <returns>
        <dt> <i>display</i> <dd> Type <b>display</b>.
      <desc>
        <p>
          Returns the <b>display</b> object associated with the specified
          <i>colormap</i>.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
    </defun>
    
    <defun>
      <name> colormap-equal
      <ll>   <i>colormap-1 colormap-2</i>
      <kind> Function
      <desc>
        <p>
          Returns true if the two arguments refer to the same server resource
          and <b>nil</b> if they do not.
      <args>
        <dt> <i>colormap-1</i>, <i>colormap-2</i> <dd> A <b>colormap</b>.
    </defun>
    
    <defun>
      <name> colormap-id
      <ll>   <i>colormap</i>
      <kind> Function
      <returns>
        <dt> <i>id</i> <dd> Type <b>resource-id</b>.
      <desc>
        <p>
          Returns the unique ID assigned to the specified <i>colormap</i>.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
    </defun>
    
    <defun>
      <name> colormap-p
      <ll>   <i>colormap</i>
      <kind> Function
      <returns>
        <dt> <i>map-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns non-<b>nil</b> if the argument is a <b>colormap</b> and
          <b>nil</b> otherwise.
    </defun>
    
    <defun>
      <name> colormap-plist
      <ll>   <i>colormap</i>
      <kind> Function
      <returns>
        <dt> <i>colormap-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the property list for the
          specified <i>colormap</i>. This function provides a hook where
          extensions can add data.
      <args>
        <dt> <i>colormap</i> <dd> A <b>colormap</b>.
    </defun>
    
    <h1 name=cursors>10 Cursors</h1>
    
    <h2>10.1 Introduction</h2>
    
    <p>
      A <i>cursor</i> is a visible shape that appears at the current position
      of the pointer device. The cursor shape moves with the pointer to
      provide continuous feedback to the user about the current location of
      the pointer. Each window can have a cursor attribute that defines the
      appearance of the pointer cursor when the pointer position lies within
      the window. See <b>window-cursor</b>.
    <p>
      A cursor image is composed of a source bitmap, a mask bitmap, a <i>hot
        spot</i>, a foreground color, and a background color. Either 1-bit
      pixmaps or font glyphs can be used to specify source and mask
      bitmaps. The source bitmap identifies the foreground and background
      pixels of the cursor image; the mask bitmap identifies which source
      pixels are actually drawn. The mask bitmap thus allows a cursor to
      assume any shape. The hot spot defines the position within the cursor
      image that is displayed at the pointer position.
    <p>
      In CLX, a cursor is represented by a <b>cursor</b> object. This section
      describes the CLX functions to:
    <ul>
      <li> Create and free cursor objects
      <li> Change cursor colors
      <li> Inquire the best cursor size
      <li> Access cursor attributes
    </ul>
    
    <h2>10.2 Creating Cursors</h2>
    
    <p>
      The following paragraphs describe the CLX functions used to create and
      free <b>cursor</b> objects.
      
    <defun>
      <name> create-cursor
      <ll>   &amp;key <b>:source :mask :x :y :foreground :background</b>
      <kind> Function
      <returns>
        <dt> <i>cursor</i> <dd> Type <b>cursor</b>.
      <desc>
        <p>
          Creates and returns a cursor. <b>:x</b> and <b>:y</b> define the
          position of the hot spot relative to the origin of the
          <b>:source. :foreground</b> and <b>:background</b> colors must be
          specified, even if the server only has a <b>:static-gray</b> or
          <b>:gray-scale</b> screen. The <b>:source</b>, <b>:x</b>, and
          <b>:y</b> arguments must also be specified.
        <p>
          The cursor image is drawn by drawing a pixel from the <b>:source</b>
          bitmap at every position where the corresponding bit in the
          <b>:mask</b> bitmap is 1. If the corresponding <b>:source</b> bit is
          1, a pixel is drawn in the <b>:foreground</b> color; otherwise, a
          pixel is drawn in the <b>:back-ground</b> color. If the <b>:mask</b>
          is omitted, all <b>:source</b> pixels are drawn. If given, the
          <b>:mask</b> must be the same size as the <b>:source</b>.
        <p>
          An X server may not be able to support every cursor size. A server
          is free to modify any component of the cursor to satisfy hardware or
          software limitations.
        <p>
          The <b>:source</b> and <b>:mask</b> can be freed immediately after
          the cursor is created. Subsequent drawing in the <b>:source</b> or
          <b>:mask</b> pixmap has an undefined effect on the cursor.
      <args>
        <dt> <b>:source</b> <dd> The source pixmap. This argument is required.
        <dt> <b>:mask</b> <dd> The mask pixmap.
        <dt> <b>:x</b>, <b>:y</b> <dd> The hot spot position in the <b>:source</b>. This argument is required.
        <dt> <b>:foreground</b> <dd> A <b>color</b> object specifying the foreground color. This argument is required.
        <dt> <b>:background</b> <dd> A <b>color</b> object specifying the background color. This argument is required.
    </defun>
    
    <defun>
      <name> create-glyph-cursor
      <ll> 
        &amp;key <b>:source-font :source-char :mask-font</b>
        (<b>:mask-char</b> 0) <b>:foreground :background</b>
      <kind> Function
      <returns>
        <dt> <i>cursor</i> <dd> Type <b>cursor</b>.
      <desc>
        <p>
          Creates and returns a cursor defined by font glyphs. The source
          bitmap is defined by the <b>:source-font</b> and
          <b>:source-char</b>. The mask bitmap is defined by the
          <b>:mask-font</b> and <b>:mask-char</b>. It is an error if the
          <b>:source-char</b> and <b>:mask-char</b> are not valid indexes for
          the <b>:source-font</b> and <b>:mask-font</b>, respectively. The hot
          spot position is defined by the "character origin" of the source
          glyph, that is, the position [- <i>char-left-bearing</i>,
          <i>char-ascent</i>] relative to the upper left corner of the source
          glyph bitmap.
        <p>
          Source and mask bits are compared after aligning the character
          origins of the source and mask glyphs. The source and mask glyphs
          need not have the same size or character origin position. If the
          <b>:mask-font</b> is omitted, all source pixels are drawn.
        <p>
          An X server may not be able to support every cursor size. A server
          is free to modify any component of the cursor to satisfy hardware or
          software limitations.
        <p>
          Either of the <b>:source-font</b> or <b>:mask-font</b> can be closed
          after the cursor is created.
      <args>
        <dt> <b>:source-font</b> <dd> The source font. This is a required argument.
        <dt> <b>:source-char</b> <dd> An index specifying a glyph in the source font. This is a required argument.
        <dt> <b>:mask-font</b> <dd> The mask font.
        <dt> <b>:mask-char</b> <dd> An index specifying a glyph in the mask font.
        <dt> <b>:foreground</b> <dd> A <b>color</b> object specifying the foreground color. This is a required argument.
        <dt> <b>:background</b> <dd> A <b>color</b> object specifying the background color. This is a required argument.
    </defun>
    
    <defun>
      <name> free-cursor
      <ll>   <i>cursor</i>
      <kind> Function
      <desc>
        <p>
          Destroys the <b>cursor</b> object. Cursor server resources are freed
          when no other references remain.
      <args>
        <dt> <i>cursor</i> <dd> A <b>cursor</b> object.
    </defun>
    
    <h2>10.3 Cursor Functions</h2>
    
    <p>
      The following paragraphs describe the CLX functions used to operate on
      <b>cursor</b> objects.
      
    <defun>
      <name> query-best-cursor
      <ll>   <i>width height display</i>
      <kind> Function
      <returns>
        <dt> <i>width</i>, <i>height</i> <dd> Type <b>card16</b>.
      <desc>
        <p>
          Returns the cursor size closest to the requested <i>width</i> and
          <i>height</i> that is best suited to the display. The <i>width</i>
          and <i>height</i> returned define the largest cursor size supported
          by the X server. Clients should always be prepared to limit cursor
          sizes to those supported by the server.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
        <dt> <i>width</i>,<i> height</i> <dd> The requested cursor size.
    </defun>
    
    <defun>
      <name> recolor-cursor
      <ll>   <i>cursor foreground background</i>
      <kind> Function
      <desc>
        <p>
          Changes the color of the specified <i>cursor</i>. If the cursor is
          displayed on a screen, the change is visible immediately.
      <args>
        <dt> <i>cursor</i> <dd> A <b>cursor</b> object.
        <dt> <i>foreground</i> <dd> A <b>color</b> object specifying the new foreground color.
        <dt> <i>background</i> <dd> A <b>color</b> object specifying the new background color.
    </defun>
    
    <h2>10.4 Cursor Attributes</h2>
    
    <p>
      The complete set of cursor attributes is discussed in the following
      paragraphs.
      
    <defun>
      <name> cursor-display
      <ll>   <i>cursor</i>
      <kind> Function
      <returns>
        <dt> <i>display</i> <dd> Type <b>display</b>.
      <desc>
        <p>
          Returns the <b>display</b> object associated with the specified
          <i>cursor</i>.
      <args>
        <dt> <i>cursor</i> <dd> A <b>cursor</b> object.
    </defun>
    
    <defun>
      <name> cursor-equal
      <ll>   <i>cursor-1 cursor-2</i>
      <kind> Function
      <desc>
        <p>
          Returns true if the two arguments refer to the same server resource
          and <b>nil</b> if they do not.
      <args>
        <dt> <i>cursor-1</i>, <i>cursor-2</i> <dd> <b>cursor</b> objects.
    </defun>
    
    <defun>
      <name> cursor-id
      <ll>   <i>cursor</i>
      <kind> Function
      <returns>
        <dt> <i>id</i> <dd> Type <b>resource-id.</b>
      <desc>
        <p>
          Returns the unique resource ID that has been assigned to the
          specified <i>cursor</i>.
      <args>
        <dt> <i>cursor</i> <dd> A <b>cursor</b> object.
    </defun>
    
    <defun>
      <name> cursor-p
      <ll>   <i>cursor</i>
      <kind> Function
      <returns>
        <dt> <i>cursor-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Returns true if the argument is a <b>cursor</b> object and
          <b>nil</b> otherwise.
    </defun>
    
    <defun>
      <name> cursor-plist
      <ll>   <i>cursor</i>
      <kind> Function
      <returns>
        <dt> <i>plist</i> <dd> A property list.
      <desc>
        <p>
          Returns and (with <b>setf</b>) sets the property list for the
          specified <i>cursor</i>. This function provides a hook where
          extensions can add data.
      <args>
        <dt> <i>cursor</i> <dd> A <b>cursor</b> object.
    </defun>
    
    <h1>11 Atoms, Properties and Selections</h1>
    
    <h2>11.1 Atoms</h2>
    
    <p>
      In X, an <i>atom</i> is a unique ID used as the name for certain server
      resources -- properties and selections.
    <p>
      In CLX, an atom is represented by a keyword symbol. For convenience, CLX
      functions also allow atoms to be specified by strings and non-keyword
      symbols. <b>xatom</b> is a CLX data type that permits either string or
      symbol values. A string is equivalent to the <b>xatom</b> given by
      (<b>intern</b> <i>string</i> <b>'keyword</b>). A symbol is equivalent to
      the <b>xatom</b> given by ( <b>intern</b> (<b>symbol-name</b>
      <i>symbol</i>) <b>'keyword</b>). The symbol name string of an
      <b>xatom</b> must consist only of ISO Latin characters. Note that the
      case of <b>xatom</b> strings is important; the <b>xatom</b> "Atom" is
      not the same as the <b>xatom</b> "ATOM".
    <p>
      Certain atoms are already predefined by every X server. Predefined atoms
      are designed to represent common names that are likely to be useful for
      many client applications.  Note that these atoms are predefined only in
      the sense of having <b>xatom</b> and <b>card29</b> values, not in the
      sense of having required semantics. No interpretation is placed on the
      meaning or use of an atom by the server. The <b>xatom</b> objects
      predefined by CLX are listed below.
    <table border=0>
      <tr><td><b>:arc</b>                      <td><b>:italic_angle</b>                     <td><b>:string</b>
      <tr><td><b>:atom</b>                     <td><b>:max_space</b>                        <td><b>:subscript_x</b>
      <tr><td><b>:bitmap</b>                   <td><b>:min_space</b>                        <td><b>:subscript_y</b>
      <tr><td><b>:cap_height</b>               <td><b>:norm_space</b>                       <td><b>:superscript_x</b>
      <tr><td><b>:cardinal</b>                 <td><b>:notice</b>                           <td><b>:superscript_y</b>
      <tr><td><b>:colormap</b>                 <td><b>:pixmap</b>                           <td><b>:underline_position</b>
      <tr><td><b>:copyright</b>                <td><b>:point</b>                            <td><b>:underline_thickness</b>
      <tr><td><b>:cursor</b>                   <td><b>:point_size</b>                       <td><b>:visualid</b>
      <tr><td><b>:cut_buffer0</b>              <td><b>:primary</b>                          <td><b>:weight</b>
      <tr><td><b>:cut_buffer1</b>              <td><b>:quad_width</b>                       <td><b>:window</b>
      <tr><td><b>:cut_buffer2</b>              <td><b>:rectangle</b>                        <td><b>:wm_class</b>
      <tr><td><b>:cut_buffer3</b>              <td><b>:resolution</b>                       <td><b>:wm_client_machine</b>
      <tr><td><b>:cut_buffer4</b>              <td><b>:resource_manager</b>                 <td><b>:wm_command</b>
      <tr><td><b>:cut_buffer5</b>              <td><b>:rgb_best_map</b>                     <td><b>:wm_hints</b>
      <tr><td><b>:cut_buffer6</b>              <td><b>:rgb_blue_map</b>                     <td><b>:wm_icon_name</b>
      <tr><td><b>:cut_buffer7</b>              <td><b>:rgb_color_map</b>                    <td><b>:wm_icon_size</b>
      <tr><td><b>:drawable</b>                 <td><b>:rgb_default_map</b>                  <td><b>:wm_name</b>
      <tr><td><b>:end_space</b>                <td><b>:rgb_gray_map</b>                     <td><b>:wm_normal_hints</b>
      <tr><td><b>:family_name</b>              <td><b>:rgb_green_map</b>                    <td><b>:wm_size_hints</b>
      <tr><td><b>:font</b>                     <td><b>:rgb_red_map</b>                      <td><b>:wm_transient_for</b>
      <tr><td><b>:font_name</b>                <td><b>:secondary</b>                        <td><b>:wm_zoom_hints</b>
      <tr><td><b>:full_name</b>                <td><b>:strikeout_ascent :x_height</b>
      <tr><td><b>:integer</b>                  <td><b>:strikeout_descent</b>
    </table>
    <p>
      When creating a new atom, the following conventions should be obeyed in
      order to minimize the conflict between atom names:
    <ul>
      <li>
        Symbol names beginning with an underscore should be used for atoms
        that are private to a particular vendor or organization. An additional
        prefix should identify the organization.
      <li>
        Symbol names beginning with two underscores should be used for atoms
        that are private to a single application or end user.
    </ul>
    <p>
      CLX provides functions to convert between an <b>xatom</b> and its
      corresponding ID integer.  The data type of an atom ID is
      <b>card29</b>. The <b>xatom</b> representation is usually sufficient for
      most CLX programs. However, it is occasionally useful to be able to
      convert an atom ID returned in events or properties into its
      corresponding <b>xatom</b>.
      
    <defun>
      <name> atom-name
      <ll>   <i>display atom-id</i>
      <kind> Function
      <returns>
        <dt> <i>atom-name</i> <dd> Type <b>keyword</b>.
      <desc>
        <p>
          Returns the atom keyword for the <i>atom-id</i> on the given
          <i>display</i> server.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
        <dt> <i>atom-id</i> <dd> A <b>card29</b>.
    </defun>
    
    <defun>
      <name> find-atom
      <ll>   <i>display atom-name</i>
      <kind> Function
      <returns>
        <dt> <i>atom-id</i> <dd> Type <b>card29</b> or <b>null</b>.
      <desc>
        <p>
          Returns the atom ID for the given <i>atom-nam</i>e, if it exists. If
          no atom of that name exists for the display server, <b>nil</b> is
          returned.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
        <dt> <i>atom-name</i> <dd> An <b>xatom</b>.
    </defun>
    
    <defun>
      <name> intern-atom
      <ll>   <i>display atom-name</i>
      <kind> Function
      <returns>
        <dt> <i>atom-id</i> <dd> Type <b>card29</b> or <b>null</b>.
      <desc>
        <p>
          Creates an atom with the given name and returns its atom ID. The
          atom can survive the interning client; it exists until the last
          server connection has been closed and the server resets itself.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b> object.
        <dt> <i>atom-name</i> <dd> An <b>xatom</b>.
    </defun>
    
    <h2>11.2 Properties</h2>
    
    <p>
      For each window, an X server can record a set of
      <i>properties</i>. Properties are a general mechanism for clients to
      associate arbitrary data with a window, and for clients to communicate
      window data to each other via the server. No interpretation is placed on
      property data by the server itself.
    <p>
      A property consists of a name, a type, a data format, and data. The name
      of a property is given by an atom. The property type is another atom
      used to denote the intended interpretation of the property data. The
      property formats specifies whether the property data should be treated
      as a set of 8-, 16-, or 32-bit elements. The property format must be
      specified so that the X server can communicate property data with the
      correct byte order.
    <p>
      CLX provides functions to:
    <ul>
      <li> Create or change a property
      <li> Return property data
      <li> List window properties
      <li> Delete a property
    </ul>
    
    <defun>
      <name> change-property
      <ll>   <i>window property data type format</i> &amp;key (<b>:mode :replace</b>)
        (<b>:start</b> 0) <b>:end :transform</b>
      <kind> Function
      <desc>
        <p>
          Creates a new window property or changes an existing property. A
          <b>:property-notify</b> event is generated for the <i>window</i>.
        <p>
          If the <b>:mode</b> is <b>:replace</b>, the new <i>data</i>,
          <i>type</i>, and <i>format</i> replace any previous values.  The
          subsequence of previous data elements that are replaced is defined
          by the <b>:start</b> and <b>:end</b> indexes.
        <p>
          If the <b>:mode</b> is <b>:prepend</b> or <b>:append</b>, no
          previous data is changed, but the new <i>data</i> is added at the
          beginning or the end, respectively. For these modes, if the
          <i>property</i> already exists, the new <i>type</i> and
          <i>format</i> must match the previous values.
        <p>
          The <b>:transform</b>, if given, is a function used to compute the
          actual property data stored.  The <b>:transform</b>, which must
          accept a single data element and return a single transformed data
          element, is called for each data element. If the <i>data</i> is a
          string, the default <b>:transform</b> function transforms each
          character into its ASCII code; otherwise, the default is to store
          the <i>data</i> unchanged.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>property</i> <dd> A property name <b>xatom</b>.
        <dt> <i>data</i> <dd> A sequence of property data elements.
        <dt> <i>type</i> <dd> The property type <b>xatom</b>.
        <dt> <i>format</i> <dd> One of 8, 16, or 32.
        <dt> <b>:mode</b> <dd> One of <b>:replace</b>, <b>:append</b>, or <b>:prepend</b>.
        <dt> <b>:start, :end</b> <dd> Specify the subsequence of previous data replaced when <b>:mode</b> is <b>:replace</b>.
        <dt> <b>:transform</b> <dd> A function that transforms each data element into a data value to store.
    </defun>
    
    <defun>
      <name> delete-property
      <ll>   <i>window property</i>
      <kind> Function
      <desc>
        <p>
          Deletes the <i>window property</i>. If the <i>property</i> already
          exists, a <b>:property-notify</b> event is generated for the
          <i>window</i>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>property</i> <dd> A property name <b>xatom</b>.
    </defun>
    
    <defun>
      <name> get-property
      <ll>
        <i>window property</i> &amp;key <b>:type</b> (<b>:start</b> 0) <b>:end :delete-p</b>
        (<b>:result-type 'list</b>) <b>:transform</b>
      <kind> Function
      <returns>
        <dt> <i>data</i> <dd> Type <b>sequence</b>.
        <dt> <i>type</i> <dd> Type <b>xatom</b>.
        <dt> <i>format</i> <dd> Type (<b>member 8 16 32</b>).
        <dt> <i>bytes-after</i> <dd> Type <b>card32</b>.
      <desc>
        <p>
          Returns a subsequence of the data for the window property. The
          <b>:start</b> and <b>:end</b> indexes specify the property
          <i>data</i> elements returned. The <b>:transform</b> function is
          called for elements of the specified subsequence to compute the
          <i>data</i> sequence returned. The property <i>type</i> and
          <i>format</i> are also returned. The final return value gives the
          actual number of data bytes (not elements) following the last data
          element returned.
        <p>
          If the <i>property</i> does not exist, the returned <i>data</i> and
          <i>type</i> are <b>nil</b> and the returned <i>format</i> and
          <i>bytes-after</i> are zero.
        <p>
          If the given <b>:type</b> is non-<b>nil</b> but does not match the
          actual property type, then the <i>data</i> returned is <b>nil</b>,
          the <i>type</i> and <i>format</i> returned give the actual property
          values, and the <i>bytes-after</i> returned gives the total number
          of bytes (not elements) in the property data.
        <p>
          If the given <b>:type</b> is <b>nil</b> or if it matches the actual
          property type, then:
        <ul>
          <li>
            The <i>data</i> returned is the transformed subsequence of the
            property data.
          <li>
            The <i>type</i> and <i>format</i> returned give the actual
            property values.
          <li>
            The <i>bytes-after</i> returned gives the actual number of data
            bytes (not elements) following the last data element returned.
        </ul>
        <p>
          In this case, the <b>:delete-p</b> argument is also examined. If
          <b>:delete-p</b> is true and <i>bytes-after</i> is zero, the
          property is deleted and a <b>:property-notify</b> event is generated
          for the <i>window</i>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>property</i> <dd> A property name <b>xatom</b>.
        <dt> <b>:type</b> <dd> The requested type <b>xatom</b> or <b>nil</b>.
        <dt> <b>:start</b>, <b>:end</b> <dd> Specify the subsequence of property <i>data</i> returned.
        <dt> <b>:transform</b> <dd> A function that transforms each data element into a data value to return.
        <dt> <b>:delete-p</b> <dd> If true, the existing <i>property</i> can be deleted.
        <dt> <b>:result-type</b> <dd> The t<i>ype</i> of data sequence to return. Default is <b>'list</b>.
    </defun>
    
    <defun>
      <name> list-properties
      <ll>   <i>window</i> &amp;key (<b>:result-type 'list</b>)
      <kind> Function
      <returns>
        <dt> <i>properties</i> <dd> Type <b>sequence</b> of <b>keyword</b>.
      <desc>
        <p>
          Returns a sequence containing the names of all <i>window
            properties</i>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <b>:result-type</b> <dd> The type of sequence to return. Default is <b>'list</b>.
    </defun>
    
    <defun>
      <name> rotate-properties
      <ll>   <i>window properties</i> &amp;optional (<i>delta</i> 1)
      <kind> Function
      <desc>
        <p>
          Rotates the values of the given <i>window properties</i>. The value
          of property <i>i</i> in the given sequence is changed to the value
          of the property at index (<b>mod</b> (+ <i>i delta</i>)
          (<b>length</b> <i>properties</i>)). This function operates much like
          the <b>rotatef</b> macro in Common Lisp.
        <p>
          If (<b>mod</b> <i>delta</i> (<b>length</b> <i>properties</i>)) is
          non-zero, a <b>:property-notify</b> event is generated on the window
          for each property, in the same order as they appear in the
          <i>properties</i> sequence.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>properties</i> <dd> A sequence of <b>xatom</b> values.
        <dt> <i>delta</i> <dd> The index interval between source and destination elements of <i>properties</i>.
    </defun>
    
    <h2>11.3 Selections</h2>
    
    <p>
      A selection is an atom used to identify data that can be shared among
      all client programs connected to an X server. Unlike properties, the
      data represented by a selection is stored by some client program, not by
      the server.
    <p>
      The data named by a selection is associated with a client window, which
      is referred to as the <i>selection owner</i>. The server always knows
      which window is the owner of a selection.  Selections can be created
      freely by clients using <b>intern-atom</b> to create an atom. CLX
      provides functions to inquire or change the owner of a selection and to
      <i>convert</i> a selection.
    <p>
      Conversion is the key to the use of selections for inter-client
      communication. Suppose Client A wants to paste the contents of the data
      named by selection <i>S</i> into his window <i>WA</i>. Client A calls
      <b>convert-selection</b> on selection atom <i>S</i>, sending a
      conversion request to the server. The server, in turn, sends a
      <b>:selection-request</b> event to the current owner of <i>S</i>, which
      is window <i>WB</i> belonging to Client B. The <b>:selection-request</b>
      event contains the <i>requestor</i> window (<i>WA</i>), the selection
      atom (<i>S</i>), an atom identifying a requested data type, and the name
      of a property of <i>WA</i> into which the value of <i>S</i> will be
      stored.
    <p>
      Since <i>WB</i> is the owner of <i>S</i>, it must be associated with the
      data defined by Client B as the value of <i>S</i>. When <i>WB</i> gets
      the <b>:selection-request</b> event, Client B is expected to convert the
      value of <i>S</i> to the requested data type (if possible) and store the
      converted value in the given requestor property. Client B is then
      expected to send a <b>:selection-notify</b> event to the requestor
      window <i>WA</i>, informing the requestor that the converted value for
      <i>S</i> is ready. Upon receiving the <b>:selection-notify</b> event,
      Client A can call <b>get-property</b> to retrieve the converted value
      and to paste it into <i>WA</i>.
    <p>
      <b>NOTE:</b> Clients using selections must always be prepared to handle
      <b>:selection-request</b> events and/or <b>:selection-notify</b>
      events. There is no way for a client to ask not to receive these types
      of events.
    <p>
      Type atoms used in selection conversion can represent arbitrary
      client-defined interpretations of the selection data. For example, if
      the value of selection <i>S</i> is a text string, Client A might request
      its typeface by requesting conversion to the <b>:font</b> type. A type
      <b>atom</b> can also represent a request to the selection owner to
      perform some action as a side-effect of conversion (for example,
      <b>:delete</b>). Some of the predefined atoms of an X server are
      intended to be used as selection types (for example, <b>:colormap</b>,
      <b>:bitmap</b>, <b>:string</b>, and so forth) However, X does not impose
      any requirements on the interpretation of type atoms.
    <p>
      When multiple clients negotiate for ownership of a selection, certain
      race conditions might be possible. For example, two clients might each
      receive a user command to assert ownership of the <b>:primary</b>
      selection, but the order in which the server processes these client
      requests is unpredictable. As a result, the ownership request initiated
      most recently by the user might be incorrectly overridden by the other
      earlier ownership request. To prevent such anomalies, the server records
      a <i>last-changed</i> timestamp for each change of selection ownership.
    <p>
      Although inter-client communication via selections is rather complex, it
      offers important benefits. Since selection communication is mediated by
      an X server, clients can share data even though they are running on
      different hosts and using different networking protocols. Data storage
      and conversion is distributed among clients so that the server is not
      required to provide all possible data types or to store multiple forms
      of selection data.
    <p>
      Certain predefined atoms are used as standard selections, as described
      in the X11 Inter-client Communications Conventions Manual. Some of the
      standard selections covered by these conventions are:
    <dl>
      <dt>
        <b>:primary</b>
      <dd>
        The <i>primary selection</i>. The main vehicle for inter-client cut
        and paste operations.
      <dt>
        <b>:secondary</b>
      <dd>
        The <i>secondary selection</i>. In some environments, clients can use
        this as an auxiliary to <b>:primary</b>.
      <dt>
        <b>:clipboard</b>
      <dd>
        Analogous to akill ring. Represents the most recently deleted data
        item.
    </dl>
    
    <defun>
      <name> convert-selection
      <ll>   <i>selection type requestor</i> &amp;optional <i>property time</i>
      <kind> Function
      <desc>
        <p>
          Requests that the value of the <i>selection</i> be converted to the
          specified <i>type</i> and stored in the given <i>property</i> of the
          <i>requestor</i> window.
        <p>
          If the <i>selection</i> has an owner, the X server sends a
          <b>:selection-request</b> event to the owner window. Otherwise, if
          no owner exists, the server generates on the requestor a
          <b>:selection-notify</b> event containing a <b>nil</b>
          <i>property</i> atom.
        <p>
          The given <i>property</i> specifies the requestor property that will
          receive the converted value. If the <i>property</i> is omitted, the
          <i>selection</i> owner will define a property to use. The
          <i>time</i> furnishes a timestamp representing the time of the
          conversion request; by default, the current server time is used.
        <p>
          <b>NOTE:</b> Standard conventions for inter-client communication
          require that both the requestor property and the time must be
          specified. If possible, the time should be the time of a user event
          which initiated the conversion. Alternatively, a timestamp can be
          obtained by calling <b>change-property</b> to append zero-length
          data to some property; the timestamp in the resulting
          <b>:property-notify</b> event can then be used.
      <args>
        <dt> <i>selection</i> <dd> The <b>xatom</b> for the selection name.
        <dt> <i>type</i> <dd> The <b>xatom</b> for the requested data type.
        <dt> <i>requestor</i> <dd> The <b>window</b> to receive the converted <i>selection</i> value.
        <dt> <i>property</i> <dd> The <b>xatom</b> for the requestor property to receive the converted value.
        <dt> <i>time</i> <dd> A <b>timestamp</b>.
    </defun>
    
    <defun>
      <name> selection-owner
      <ll>   <i>display selection</i> &amp;optional <i>time</i>
      <kind> Function
      <returns>
        <dt> <i>owner</i> <dd> Type <b>window</b> or <b>null</b>.
      <desc>
        <p>
          Returns and (with <b>setf</b>) changes the owner and the
          last-changed <i>time</i> for the <i>selection</i>. If the owner is
          <b>nil</b>, no owner for the <i>selection</i> exists. When the owner
          window for a <i>selection</i> is destroyed, the <i>selection</i>
          owner is set to <b>nil</b> without affecting the last-changed
          <i>time</i>.
        <p>
          The <i>time</i> argument is used only when changing the
          <i>selection</i> owner. If the <i>time</i> is <b>nil</b>, the
          current server time is used. If the <i>time</i> is earlier than the
          current last-changed time of the <i>selection</i> or if the
          <i>time</i> is later than the current server time, the owner is not
          changed. Therefore, a client should always confirm successful change
          of ownership by immediately calling <b>selection-owner</b>. If the
          change in ownership is successful, the last-changed time of the
          <i>selection</i> is set to the specified <i>time</i>.
        <p>
          If the change in ownership is successful and the new owner is
          different from the previous owner, and if the previous owner is not
          <b>nil</b>, a <b>:selection-clear</b> event is generated for the
          previous owner window.
        <p>
          <b>NOTE:</b> Standard conventions for inter-client communication
          require that a non-nil time must be specified. If possible, the time
          should be the time of a user event which initiated the change of
          ownership. Alternatively, a timestamp can be obtained by calling
          change-property to append zero-length data to some property; the
          timestamp in the resulting <b>:property-notify</b> event can then be
          used.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <i>selection</i> <dd> The <b>xatom</b> for the selection name.
        <dt> <i>time</i> <dd> A <b>timestamp</b>.
    </defun>
    
    <h1 name=events-and-input>12 Events and Input</h1>
    
    <h2>12.1 Introductions</h2>
    
    <p>
      A client application uses CLX functions to send <i>requests</i> to an X
      server over a display connection returned by the <b>open-display</b>
      function. In return, the X server sends back <i>replies</i> and
      <i>events</i>. Replies are synchronized with specific requests and
      return requested server information. Events typically occur
      asynchronously. Device events are generated by user input from both the
      keyboard and pointer devices. Other events are side-effects of the
      requests sent by CLX functions. The types of events returned by an X
      server are summarized below.
    <table border=1>
      <tr><th><b>Device Events</b>                  <th><b>Events Returned</b>
      <tr><td rowspan=2>Keyboard                    <td><b>:key-press</b>
      <tr>                                          <td><b>:key-release</b>
      <tr><td rowspan=5>Pointer                     <td><b>:button-press</b>
      <tr>                                          <td><b>:button-release</b>
      <tr>                                          <td><b>:enter-notify</b>
      <tr>                                          <td><b>:leave-notify</b>
      <tr>                                          <td><b>:motion-notify</b>
      <tr><th><b>Side-Effect Events</b>             <th><b>Events Returned</b>
      <tr><td rowspan=5>Client communication        <td><b>:client-message</b>
      <tr>                                          <td><b>:property-notify</b>
      <tr>                                          <td><b>:selection-clear</b>
      <tr>                                          <td><b>:selection-notify</b>
      <tr>                                          <td><b>:selection-request</b>
      <tr><td rowspan=1>Color map state             <td><b>:colormap-notify</b>
      <tr><td rowspan=3>Exposure                    <td><b>:exposure</b>
      <tr>                                          <td><b>:graphics-exposure</b>
      <tr>                                          <td><b>:no-exposure</b>
      <tr><td rowspan=2>Input focus                 <td><b>:focus-in</b>
      <tr>                                          <td><b>:focus-out</b>
      <tr><td rowspan=2>Keyboard and pointer state  <td><b>:keymap-notify</b>
      <tr>                                          <td><b>:mapping-notify</b>
      <tr><td rowspan=3>Structure control           <td><b>:circulate-request</b>
      <tr>                                          <td><b>:configure-request</b>
      <tr>                                          <td><b>:map-request</b>
      <tr><td rowspan=10>Window state               <td><b>:resize-request</b>
      <tr>                                          <td><b>:circulate-notify</b>
      <tr>                                          <td><b>:configure-notify</b>
      <tr>                                          <td><b>:create-notify</b>
      <tr>                                          <td><b>:destroy-notify</b>
      <tr>                                          <td><b>:gravity-notify</b>
      <tr>                                          <td><b>:map-notify</b>
      <tr>                                          <td><b>:reparent-notify</b>
      <tr>                                          <td><b>:unmap-notify</b>
      <tr>                                          <td><b>:visibility-notify</b>
    </table>
    <p>
      Client programs can override the server's normal distribution of events
      by<i> grabbing</i> the pointer or the keyboard. Grabbing causes events
      from the pointer or keyboard device to be reported to a single specified
      window, rather than to their ordinary destinations. It can also cause
      the server to <i>freeze</i> the grabbed device, sending queued events
      only when explicitly requested by the grabbing client. Two kinds of
      grabs are possible:
    <ul>
      <li> Active -- Events are immediately grabbed.
      <li> Passive -- Events are grabbed later, as soon as a specified device event occurs.
    </ul>
    <p>
      Grabbing an input device is performed rarely and usually only by special
      clients, such as window managers.
    <p>
      This section describes the CLX functions used to:
    <ul>
      <li> <A HREF="#selecting-events">Select events</A>
      <li> <A HREF="#processing-events">Process an event on the event queue</A>
      <li> <A HREF="#event-queue">Manage the event queue</A>
      <li> <A HREF="#sending-events">Send events to other applications</A>
      <li> <A HREF="#pointer-position">Read and change the pointer position</A>
      <li> <A HREF="#managing-input-focus">Manage the keyboard input focus</A>
      <li> <A HREF="#grabbing-the-pointer">Grab pointer and keyboard events</A>
      <li> <A HREF="#releasing-queued-events">Release queued events</A>
    </ul>
    <p>
      This section also contains a detailed description of the content of each type of event.
      
    <h2 name=selecting-events>12.2 Selecting Events</h2>
    
    <p>
      A client <i>selects</i> which types of events it receives from a
      specific window. The window event-mask attribute, set by the client,
      determines which event types are selected (see <b>window-event-mask</b>
      in <ref name=winattr>). Most types of events are received
      by a client only if they are selected for some window.
    <p>
      In the X protocol, an event-mask is represented as a bit string. CLX
      also allows an event mask to be defined by a list of
      <b>event-mask-class</b> keywords. The functions <b>make-event-keys</b>
      and <b>make-event-mask</b> can be used to convert between these two
      forms of an event-mask. In general, including an <b>event-mask-class</b>
      keyword in an event-mask causes one or more related event types to be
      selected. The following table describes the event types selected by each
      <b>event-mask-class</b> keyword.
    <p>
    <table border=1>
      <tr><th><b>Event Mask Keyword</b>      <th><b>Event Types Selected</b>
      <tr><td><b>:button-1-motion</b>        <td><b>:motion-notify</b> when <b>:button-1</b> is down
      <tr><td><b>:button-2-motion</b>        <td><b>:motion-notify</b> when <b>:button-2</b> is down
      <tr><td><b>:button-3-motion</b>        <td><b>:motion-notify</b> when <b>:button-3</b> is down
      <tr><td><b>:button-4-motion</b>        <td><b>:motion-notify</b> when <b>:button-4</b> is down
      <tr><td><b>:button-5-motion</b>        <td><b>:motion-notify</b> when <b>:button-5</b> is down
      <tr><td><b>:button-motion</b>          <td><b>:motion-notify</b> when any pointer button is down
      <tr><td><b>:button-press</b>           <td><b>:button-press</b>
      <tr><td><b>:button-release</b>         <td><b>:button-release</b>
      <tr><td><b>:colormap-change</b>        <td><b>:colormap-notify</b>
      <tr><td><b>:enter-window</b>           <td><b>:enter-notify</b>
      <tr><td><b>:exposure</b>               <td><b>:exposure</b>
      <tr><td><b>:focus-change</b>           <td><b>:focus-in, :focus-out</b>
      <tr><td><b>:key-press</b>              <td><b>:key-press</b>
      <tr><td><b>:key-release</b>            <td><b>:key-release</b>
      <tr><td><b>:keymap-state</b>           <td><b>:keymap-notify</b>
      <tr><td><b>:leave-window</b>           <td><b>:leave-notify</b>
      <tr><td><b>:owner-grab-button</b>      <td>Pointer events while button is grabbed
      <tr><td><b>:pointer-motion</b>         <td><b>:motion-notify</b>
      <tr><td><b>:pointer-motion-hint</b>    <td>Single <b>:motion-notify</b> only
      <tr><td><b>:property-change</b>        <td><b>:property-notify</b>
      <tr><td><b>:resize-redirect</b>        <td><b>:resize-request</b>
      <tr><td><b>:structure-notify</b>       <td><b>:circulate-notify, :configure-notify, :destroy-notify, :gravity-notify, :map-notify, :reparent-notify, :unmap-notify</b>
      <tr><td><b>:substructure-redirect</b>  <td><b>:circulate-request, :configure-request, :map-request</b>
      <tr><td><b>:visibility-change</b>      <td><b>:visibility-notify</b>
    </table>
    <p>
      Some types of events do not have to be selected to be received and
      therefore are not represented in an event-mask. For example, the
      <b>copy-plane</b> and <b>copy-area</b> functions cause
      <b>:graphics-exposure</b> and <b>:no-exposure</b> events to be reported,
      unless exposures are turned <b>:off</b> in the graphics context (see
      <b>copy-area</b> and <b>copy-plane</b> in <ref name='area-and-plane-operations'>,
      and <b>gcontext-exposures</b> in <!--DEAD-->paragraph 5.4.6, Exposures).  Also, <b>:selection-clear</b>, <b>:selection-request</b>,
      <b>:selection-notify</b> and <b>:client-message</b> events can be
      received at any time, but they are generally sent only to clients using
      selections (see <ref name='client-communication-events'>). <b>:mapping-notify</b> is always sent to clients when the
      keyboard mapping is changed.
    <p>
      Any client can select events for any window. A window maintains a
      separate event-mask for each interested client. In general, multiple
      clients can select for the same events on a window. After the X server
      generates an event, it sends it to all clients which selected
      it. However, the following restrictions apply to sharing window events
      among multiple clients. For a given window:
    <ul>
      <li> Only one client at a time can include <b>:substructure-redirect</b> in its event-mask
      <li> Only one client at a time can can include <b>:button-press</b> in its event-mask
      <li> Only one client at a time can include <b>:resize-redirect</b> in its event-mask
    </ul>
    
    <h2 name='processing-events'>12.3 Processing Events</h2>
    
    <p>
      Events received by a CLX client are stored in an <i>event queue</i>
      until they are read and processed. Events are processed by <i>handler
        functions</i>.
      
    <defun>
      <name> handler-function
      <ll>
        &amp;rest <i>event-slots</i> &amp;key <b>:display :event-key :send-event-p</b>
        &amp;allow-other-keys
      <kind> Function
      <returns>
        <dt> <i>handled-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          The arguments to a handler function are keyword-value pairs that
          describe the contents of an event. The actual <i>event-slots</i>
          passed depend on the event type, except that <b>:display</b>,
          <b>:event-key</b>, and <b>:send-event-p</b> are given for all event
          types. The keyword symbols used for each event type are event slot
          names defined by the <b>declare-event</b> macro and are described in
          <ref name=declaring-event-types>.
        <p>
          If a handler returns non-<b>nil</b>, the event is considered
          <i>processed</i> and can be removed from the event queue. Otherwise,
          if a handler function returns <b>nil</b>, the event can remain in
          the event queue for later processing.
      <args>
        <dt> <b>:display</b> <dd> A <b>display</b> for the connection that returned the event.
        <dt> <b>:event-key</b> <dd> An <b>event-key</b> keyword specifying the event type.
        <dt> <b>:send-event-p</b> <dd> If true, the event was sent from another application using the
          <b>send-event</b> function.
    </defun>
    
    <defun>
      <name> process-event
      <ll>
        <i>display</i> &amp;key <b>:handler :timeout :peek-p :discard-p</b>
        <b>(:force-output-p t)</b>
      <kind> Function
      <returns>
        <dt> <i>handled-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Invokes <b>:handler</b> on each queued event until <b>:handler</b>
          returns non-<b>nil</b>. Then, the non-<b>nil :handler</b> value is
          returned by <b>process-event</b>. If <b>:handler</b> returns
          <b>nil</b> for each event in the event queue, <b>process-event</b>
          waits for another event to arrive. If timeout is non-<b>nil</b> and
          no event arrives within the specified timeout interval (given in
          seconds), <b>process-event</b> returns <b>nil</b>; if timeout is
          <b>nil</b>, <b>process-event</b> will not return until
          <b>:handler</b> returns non-<b>nil</b>. <b>process-event</b> may
          wait only once on network data, and therefore timeout prematurely.
        <p>
          If <b>:force-output-p</b> is true, <b>process-event</b> first
          invokes <b>display-force-output</b> to send any buffered
          requests. If <b>:peek-p</b> is true, a processed event is not
          removed from the queue. If <b>:discard-p</b> is true, unprocessed
          events are removed from the queue; otherwise, unprocessed events are
          left in place.
        <p>
          If <b>:handler</b> is a sequence, it is expected to contain handler
          functions for each event type.  The sequence index of the handler
          function for a particular event type is given by ( <b>position
            event-key *event-key-vector*</b>).
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <b>:handler</b> <dd> A handler function or a sequence of handler functions.
        <dt> <b>:timeout</b> <dd> Specifies the timeout delay in seconds.
        <dt> <b>:peek-p</b> <dd> If <b>nil</b>, events are removed from the event queue after processing.
        <dt> <b>:discard-p</b> <dd> If true, unprocessed events are discarded.
        <dt> <b>:force-output-p</b> <dd> If true, buffered output requests are sent.
    </defun>
    
    <defun>
      <name> event-case
      <ll>
        <i>display</i> &amp;key <b>:timeout :peek-p :discard-p (:force-output-p t)</b>
        &amp;body <i>clauses</i>
      <kind> Macro
      <returns>
        <dt> <i>handled-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Executes the matching clause for each queued event until a clause
          returns non-<b>nil</b>. The non-<b>nil</b> clause value is then
          returned. Each of the clauses is a list of the form
          (<i>event-match</i> [<i>event-slots</i>] &amp;rest <i>forms</i>),
          where:
        <ul>
          <li>
            <i>event-match</i> -- Either an <b>event-key</b>, a list of
            <b>event-keys</b>, otherwise, or <b>t</b>. It is an error for the
            same key to appear in more than one clause.
          <li>
            <i>event-slots</i> -- If given, a list of (non-keyword) event slot
            symbols defined for the specified event type(s). See <ref name=declaring-event-types>.
          <li>
            <i>forms</i> -- A list of forms that process the specified event
            type(s). The value of the last form is the value returned by the
            clause.
        </ul>
        <p>
          A clause matches an event if the <b>event-key</b> is equal to or a
          member of the <i>event-match</i>, or if the <i>event-match</i> is
          <b>t</b> or <b>otherwise</b>. If no <b>t</b> or <b>otherwise</b>
          clause appears, it is equivalent to having a final clause that
          returns <b>nil</b>. If <i>event-slots</i> is given, these symbols
          are bound to the value of the corresponding event slot in the clause
          forms. Each element of <i>event-slots</i> can also be a list of the
          form (<i>event-slot-keyword variable</i>), in which case the
          <i>variable</i> symbol is bound to the value of the event slot
          specified by the <i>event-slot-keyword</i>.
        <p>
          If every clause returns <b>nil</b> for each event in the event
          queue, <b>event-case</b> waits for another event to arrive. If
          <b>:timeout</b> is non-<b>nil</b> and no event arrives within the
          specified timeout interval (given in seconds), <b>event-case</b>
          returns <b>nil</b>; if <b>:timeout</b> is <b>nil</b>,
          <b>event-case</b> will not return until a clause returns
          non-<b>nil</b>. <b>event-case</b> may wait only once on network data
          and therefore timeout prematurely.
        <p>
          If <b>:force-output-p</b> is true, <b>event-case</b> first invokes
          <b>display-force-output</b> to send any buffered requests. If
          <b>:peek-p</b> is true, a processed event is not removed from the
          queue. If <b>:discard-p</b> is true, unprocessed events are removed
          from the queue; otherwise, unprocessed events are left in place.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <b>:handler</b> <dd> A handler function or a sequence of handler functions.
        <dt> <b>:timeout</b> <dd> Specifies the timeout delay, in seconds.
        <dt> <b>:peek-p</b> <dd> If <b>nil</b>, events are removed from the event queue after processing.
        <dt> <b>:discard-p</b> <dd> If true, unprocessed events are discarded.
        <dt> <b>:force-output-p</b> <dd> If true, buffered output requests are sent.
        <dt> <i>clauses</i> <dd> Code to process specified event types.
    </defun>
    
    <defun>
      <name> event-cond
      <ll>
        <i>display</i> &amp;key <b>:timeout :peek-p :discard-p (:force-output-p t)</b>
        &amp;body <i>clauses</i>
      <kind> Macro
      <returns>
        <dt> <i>handled-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Similar to <b>event-case</b> except that each of the clauses is a
          list of the form (<i>event-match</i> [<i>event-slots</i>]
          <i>test-form</i> &amp;rest <i>forms</i>). Executes the
          <i>test-form</i> of the clause that matches each queued event until
          a <i>test-form</i> returns non-<b>nil</b>. The body <i>forms</i> of
          the clause are then executed. The values returned by the last clause
          body form are then returned by <b>event-cond</b>.
        <p>
          When a <i>test-form</i> returns true and <b>:peek-p</b> is
          <b>nil</b>, or when a <i>test-form</i> returns <b>nil</b> and
          <b>:discard-p</b> is true, the matching event is removed from the
          event queue before the body <i>forms</i> are executed.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <b>:handler</b> <dd> A handler function or a sequence of handler functions.
        <dt> <b>:timeout</b> <dd> Specifies the timeout delay in seconds.
        <dt> <b>:peek-p</b> <dd> If <b>nil</b>, events are removed from the event queue after processing.
        <dt> <b>:discard-p</b> <dd> If true, unprocessed events are discarded.
        <dt> <b>:force-output-p</b> <dd> If true, buffered output requests are sent.
        <dt> <i>clauses</i> <dd> Code to process specified event types.
    </defun>
    
    <h2 name="event-queue">12.4 Managing the Event Queue</h2>
    
    <p>
      The following paragraphs describe CLX functions and macros used to:
    <ul>
      <li> Put a new event on the event queue
      <li> Discard the current event
      <li> Return the current length of the event queue
      <li> Gain exclusive access to the event queue for a client process
    </ul>
    
    <defun>
      <name> queue-event
      <ll>
        <i>display event-key</i> &amp;rest <i>event-slots</i> &amp;key <b>:append-p</b>
        &amp;allow-other-keys
      <kind> Function
      <desc>
        <p>
          Places an event of the type given by <i>event-key</i> into the event
          queue. When <b>:append-p</b> is true, the event is placed at the
          tail of the queue; otherwise, the event is placed at the head of the
          queue. The actual <i>event-slots</i> passed depend on the event
          type. The keyword symbols used for each event type are event slot
          names defined by the <b>declare-event</b> macro and are described in
          <ref name=declaring-event-types>.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <i>event-key</i> <dd> Specifies the type of event placed in the queue.
        <dt> <i>event-slots</i> <dd> Keyword-value pairs that describe the contents of an event.
        <dt> <b>:append-p</b> <dd> If true, the event is placed at the tail of the queue; otherwise, the event is
          placed at the head of the queue.
    </defun>
    
    <defun>
      <name> discard-current-event
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>discarded-p</i> <dd> Type <b>boolean</b>.
      <desc>
        <p>
          Discards the current event for the <i>display</i>. Returns
          <b>nil</b> when the event queue is empty; otherwise, returns
          <b>t</b>. This function provides extra flexibility for discarding
          events, but it should be used carefully; use <b>event-cond</b>
          instead, if possible. Typically, <b>discard-current-event</b> is
          called inside a handler function or a clause of an <b>event-case</b>
          form and is followed by another call to <b>process-event</b>,
          <b>event-case</b>, or <b>event-cond</b>.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
    </defun>
    
    <defun>
      <name> event-listen
      <ll>   <i>display</i> &amp;optional (<b>timeout</b> 0)
      <kind> Function
      <returns>
        <dt> <i>event-count</i> <dd> Type <b>(or null integer)</b>.
      <desc>
        <p>
          Returns the number of events queued locally. If the event queue is
          empty, <b>event-listen</b> waits for an event to arrive. If timeout
          is non-<b>nil</b> and no event arrives within the specified timeout
          interval (given in seconds), <b>event-listen</b> returns <b>nil</b>;
          if timeout is <b>nil</b>, <b>event-listen</b> will not return until
          an event arrives.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <i>timeout</i> <dd> The number of seconds to wait for events.
    </defun>
    
    <defun>
      <name> with-event-queue
      <ll>   <i>display</i> &amp;body <i>body</i>
      <kind> Macro
      <desc>
        <p>
          Executes the <i>body</i> in a critical region in which the executing
          client process has exclusive access to the event queue.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <i>body</i> <dd> Forms to execute.
    </defun>
    
    <h2 name=sending-events>12.5 Sending Events</h2>
    
    <p>
      A client can send an event to a window. Clients selecting this window
      event will receive it just like any other event sent by the X server.
      
    <defun>
      <name> send-event
      <ll> 
        <i>window event-key event-mask</i> &amp;rest <i>event-slots</i> &amp;key
        <b>:propagate-p :display</b> &amp;allow-other-keys
      <kind> Function
      <desc>
        <p>
          Sends an event specified by the <i>event-key</i> and
          <i>event-slots</i> to the given destination <i>window</i>. Any
          active grabs are ignored. The <i>event-slots</i> passed depend on
          the event type. The keyword symbols used for each event type are
          event slot names defined by the <b>declare-event</b> macro and are
          described in <ref name=declaring-event-types>.
        <p>
          If the <i>window</i> is <b>:pointer-window</b>, the destination
          <i>window</i> is replaced with the window containing the
          pointer. If the <i>window</i> is <b>:input-focus</b>, the
          destination <i>window</i> is replaced with the descendant of the
          focus window that contains the pointer or (if no such descendant
          exists) the focus window. The <b>:display</b> keyword is only
          required if the <i>window</i> is <b>:pointer-window</b> or
          <b>:input-focus</b>.
        <p>
          The <i>event-key</i> must be one of the core events, or one of the
          events defined by an extension, so the server can send the event
          with the correct byte-order. The contents of the event are
          otherwise unaltered and unchecked by the server, except that the
          <b>send-event-p</b> event slot is set to true.
        <p>
          If the <i>event-mask</i> is <b>nil</b>, the event is sent to the
          client that created the destination <i>window</i> with an
          <i>event-mask</i> of 0; if that client no longer exists, no event
          is sent. Otherwise, the event is sent to every client selecting
          any of the event types specified by <i>event-mask</i> on the
          destination <i>window</i>.
        <p>
          If <b>:propagate-p</b> is true and no clients have selected any of
          the event types in <i>event-mask</i> on the destination
          <i>window</i>, the destination is replaced with the closest
          ancestor of <i>window</i> for which some client has selected a
          type in <i>event-mask</i> and no intervening window has that type
          in its do-not-propagate mask. If no such window exists, or if the
          <i>window</i> is an ancestor of the focus window and
          <b>:input-focus</b> was originally specified as the destination,
          the event is not sent to any clients. Otherwise, the event is
          reported to every client selecting on the final destination any of
          the types specified in <i>event-mask</i>.
      <args>
        <dt> <i>window</i> <dd> The destination <b>window</b> for the event.
        <dt> <i>event-key</i> <dd> An <b>event-key</b> defining the type of event to send.
        <dt> <i>event-mask</i> <dd> Specifies the event types that receiving clients must select.
        <dt> <i>event-slots</i> <dd> Keyword-value pairs that describe the contents of an event.
        <dt> <b>:propagate-p</b> <dd> If true, the event can be propagated to ancestors of the destination window.
        <dt> <b>:display</b> <dd> A <b>display</b>.
    </defun>
    
    <h2 name=pointer-position>12.6 Pointer Position</h2>
    
    <p>
      The CLX functions affecting pointer position are discussed in the
      following paragraphs.
      
    <defun>
      <name> query-pointer
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>x</i> <dd> Type <b>int16</b>.
        <dt> <i>y</i> <dd> Type <b>int16</b>.
        <dt> <i>same-screen-p</i> <dd> Type <b>boolean</b>.
        <dt> <i>child</i> <dd> Type <b>window</b> or <b>null</b>.
        <dt> <i>state-mask</i> <dd> Type <b>card16</b>.
        <dt> <i>root-x</i> <dd> Type <b>int16</b>.
        <dt> <i>root-y</i> <dd> Type <b>int16</b>.
        <dt> <i>root</i> <dd> Type <b>window</b>.
      <desc>
        <p>
          Returns the current pointer coordinates relative to the given
          <i>window</i>. If <b>query-pointer</b> returns <b>nil</b> for
          <i>same-screen-p</i>, the pointer is not on the same screen as the
          <i>window</i>. In this case, <b>query-pointer</b> returns a value
          of <b>nil</b> for <i>child</i> and a value of zero for <i>x</i>
          and <i>y</i>. If <b>query-pointer</b> returns true for
          <i>same-screen-p</i>, the returned <i>x</i> and <i>y</i> are
          relative to the origin of window. The <i>child</i> is the child of
          the window containing the pointer, if any. The <i>state-mask</i>
          returned gives the current state of the modifier keys and pointer
          buttons. The returned <i>root</i> is the root window currently
          containing the pointer. The returned <i>root-x</i> and
          <i>root-y</i> specify the pointer coordinates relative to
          <i>root</i>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b> specifying the coordinate system for the returned position.
    </defun>
    
    <defun>
      <name> global-pointer-position
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>root-x</i> <dd> Type <b>int16</b>.
        <dt> <i>root-y</i> <dd> Type <b>int16</b>.
        <dt> <i>root</i> <dd> Type <b>window</b>.
      <desc>
        <p>
          Returns the <i>root</i> window currently containing the <i>display</i> pointer and the current
          position of the pointer relative to the <i>root</i>.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
    </defun>
    
    <defun>
      <name> pointer-position
      <ll>   <i>window</i>
      <kind> Function
      <returns>
        <dt> <i>x</i> <dd> Type <b>int16</b>.
        <dt> <i>y</i> <dd> Type <b>int16</b>.
        <dt> <i>same-screen-p</i> <dd> Type <b>boolean</b>.
        <dt> <i>child</i> <dd> Type <b>window</b> or <b>null</b>.
      <desc>
        <p>
          Returns the current pointer coordinates relative to the given
          <i>window</i>. If <b>pointer-position</b> returns <b>nil</b> for
          <i>same-screen-p</i>, the pointer is not on the same screen as the
          <i>window</i>.  In this case, <b>pointer-position</b> returns a
          value of <b>nil</b> for <i>child</i> and a value of zero for
          <i>x</i> and <i>y</i>. If <b>pointer-position</b> returns true for
          <i>same-screen-p</i>, the returned <i>x</i> and <i>y</i> are
          relative to the origin of <i>window</i>.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b> specifying the coordinate system for the returned position.
    </defun>
    
    <defun>
      <name> motion-events
      <ll>   <i>window</i> &amp;key <b>:start :stop</b> (<b>:result-type 'list</b>)
      <kind> Function
      <returns>
        <dt> <i>motion-events</i> <dd> Type <b>(repeat-seq (int16 x) (int16 y) (timestamp</b> <b>time))</b>.
      <desc>
        <p>
          Many X server implementations maintain a more precise history of
          pointer motion between event notifications. The pointer position
          at each pointer hardware interrupt can be stored into a buffer for
          later retrieval.This is called the <i>motion history buffer</i>. A
          paint program, for example, may want to have a precise history of
          where the pointer traveled, even though for most other
          applications this amount of detail is grossly excessive.
        <p>
          The <b>motion-events</b> function returns all events in the motion
          history buffer that fall between the specified <b>:start</b> and
          <b>:stop</b> timestamps (inclusive) and have coordinates that lie
          within the specified <i>window</i> (including borders) at its
          present placement. If the <b>:start</b> time is later than the
          <b>:stop</b> time or if the <b>:start</b> time is in the future,
          no events are returned.
      <args>
        <dt> <i>window</i> <dd> The <b>window</b> containing the returned motion events.
        <dt> <b>:start, :stop</b> <dd> <b>timestamp</b> values for the time interval for returned motion events.
        <dt> <b>:result-type</b> <dd> The form of the returned motion events.
    </defun>
    
    <defun>
      <name> warp-pointer
      <ll>   <i>destination destination-x destination-y</i>
      <kind> Function
      <desc>
        <p>
          Moves the pointer to the given coordinates relative to the
          <i>destination</i> window.  <b>warp-pointer</b> should be rarely be
          used since the user should normally be in control of the pointer
          position. <b>warp-pointer</b> generates events just as if the user
          had instantaneously moved the pointer from one position to another.
        <p>
          <b>warp-pointer</b> cannot move the pointer outside the confine-to
          window of an active pointer grab; an attempt to do so only moves the
          pointer as far as the closest edge of the confine-to window.
      <args>
        <dt> <i>destination</i> <dd> The <b>window</b> into which the pointer is moved.
        <dt> <i>destination-x, destination-y</i> <dd> The new position of the pointer relative to the destination.
    </defun>
    
    <defun>
      <name> warp-pointer-relative
      <ll>   <i>display x-offset y-offset</i>
      <kind> Function
      <desc>
        <p>
          Moves the pointer by the given offsets. This function should rarely
          be used since the user should normally be in control of the pointer
          position. <b>warp-pointer-relative</b> generates events just as if
          the user had instantaneously moved the pointer from one position to
          another.
        <p>
          <b>warp-pointer-relative</b> cannot move the pointer outside the
          confine-to window of an active pointer grab; an attempt to do so
          only moves the pointer as far as the closest edge of the confine-to
          window.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <i>x-offset, y-offset</i> <dd> The offsets used to adjust the pointer position.
    </defun>
    
    <defun>
      <name> warp-pointer-if-inside
      <ll>
        <i>destination destination-x destination-y</i>
        <i>source source-x source-y</i> &amp;optional (<i>source-width</i> 0)
        (<i>source-height</i> 0)
      <kind> Function
      <desc>
        <p>
          Moves the pointer to the given position relative to the
          <i>destination</i> window. However, the move can only take place if
          the pointer is currently contained in a visible portion of the
          specified rectangle of the <i>source</i> window. If
          <i>source-height</i> is zero, it is replaced with the current height
          of <i>source</i> window minus <i>source-y</i>. If
          <i>source-width</i> is zero, it is replaced with the current width
          of <i>source</i> window minus <i>source-x</i>.
        <p>
          <b>warp-pointer-if-inside</b> generates events just as if the user
          had instantaneously moved the pointer from one position to
          another. <b>warp-pointer-if-inside</b> cannot move the pointer
          outside the confine-to window of an active pointer grab; an attempt
          to do so only moves the pointer as far as the closest edge of the
          confine-to window.
      <args>
        <dt> <i>destination</i> <dd> The <b>window</b> into which the pointer is moved.
        <dt> <i>destination-x, destination-y</i> <dd> The new position of the pointer relative to the <i>destination</i>.
        <dt> <i>source</i> <dd> The <b>window</b> that must currently contain the pointer.
        <dt> <i>source-x, source-y, source-width, source-height</i> <dd>The source rectangle that must currently contain the pointer.
    </defun>
    
    <defun>
      <name> warp-pointer-relative-if-inside
      <ll>
        <i>x-offset y-offset source source-x source-y</i>
        &amp;optional (<i>source-width</i> 0) (<i>source-height</i> 0)
      <kind> Function
      <desc>
        <p>
          Moves the pointer by the given offsets. However, the move can only
          take place if the pointer is currently contained in a visible
          portion of the specified rectangle of the <i>source</i> window. If
          <i>source-height</i> is zero, it is replaced with the current height
          of <i>source-window</i> minus <i>source-y</i>. If
          <i>source-width</i> is zero, it is replaced with the current width
          of <i>source-window</i> minus <i>source-x</i>.
        <p>
          <b>warp-pointer-relative-if-inside</b> generates events just as if
          the user had instantaneously moved the pointer from one position to
          another. <b>warp-pointer-relative-if-inside</b> cannot move the
          pointer outside the confine-to window of an active pointer grab; an
          attempt to do so only moves the pointer as far as the closest edge
          of the confine-to window.
      <args>
        <dt> <i>x-offset, y-offset</i> <dd> The offsets used to adjust the pointer position.
        <dt> <i>source</i> <dd> The <b>window</b> that must currently contain the pointer.
        <dt> <i>source-x, source-y, source-width, source-height</i> <dd> The source rectangle that must currently contain the pointer.
    </defun>
    
    <h2 name="managing-input-focus">12.7 Managing Input Focus</h2>      
    
    <p>
      CLX provides the <b>set-focus-input</b> and <b>focus-input</b> functions
      to set and get the keyboard input focus window.
      
    <defun>
      <name> set-input-focus
      <ll>   <i>display focus revert-to</i> &amp;optional <i>time</i>
      <kind> Function
      <desc>
        <p>
          Changes the keyboard input focus and the last-focus-change
          time. The function has no effect if the specified <i>time</i> is
          earlier than the current last-focus-change time or is later than
          the current server time; otherwise, the last-focus-change time is
          set to the specified <i>time</i>. The <b>set-input-focus</b>
          function causes the X server to generate <b>:focus-in</b> and
          <b>:focus-out</b> events.
        <p>
          If <b>:none</b> is specified as the <i>focus</i>, all keyboard
          events are discarded until a new focus window is set. In this
          case, the <i>revert-to</i> argument is ignored.
        <p>
          If a window is specified as the <i>focus</i> argument, it becomes
          the keyboard's focus window.  If a generated keyboard event would
          normally be reported to this window or one of its inferiors, the
          event is reported normally; otherwise, the event is reported with
          respect to the focus window.
        <p>
          If <b>:pointer-root</b> is specified as the <i>focus</i> argument,
          the input focus window is set to the root window of the screen
          containing the pointer when each keyboard event occurs. In this
          case, the <i>revert-to</i> argument is ignored.
        <p>
          The specified <i>focus</i> window must be viewable at the time of
          the request. If the <i>focus</i> window later becomes not
          viewable, the new focus window depends on the <i>revert-to</i>
          argument. If <i>revert-to</i> is specified as <b>:parent</b>, the
          <i>focus</i> reverts to the parent (or the closest viewable
          ancestor) and the new <i>revert-to</i> value is take to be
          <b>:none</b>. If <i>revert-to</i> is <b>:pointer-root</b> or
          <b>:none</b>, the <i>focus</i> reverts to that value. When the
          <i>focus</i> reverts, <b>:focus-in</b> and <b>:focus-out</b>
          events are generated, but the last-focus-change time is not
          affected.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <i>focus</i> <dd> The new input focus <b>window</b>.
        <dt> <i>revert-to</i> <dd> The focus <b>window</b> when focus is no longer viewable.
        <dt> <i>time</i> <dd> A <b>timestamp</b>.
    </defun>
    
    <defun>
      <name> input-focus
      <ll>   <i>display</i>
      <kind> Function
      <returns>
        <dt> <i>focus</i> <dd> Type (<b>or window</b> (<b>member :none :pointer-root</b>)).
        <dt> <i>revert-to</i> <dd> Type (<b>or window</b> (<b>member :none :pointer-root :parent</b>)).
      <desc>
        <p>
          Returns the <i>focus</i> window, <b>:pointer-root</b>, or
          <b>:none</b>, depending on the current state of the focus
          window. <i>revert-to</i> returns the current focus revert-to
          state.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
    </defun>
    
    <h2 name="grabbing-the-pointer">12.8 Grabbing the Pointer</h2>
    
    <p>
      CLX provides the <b>grab-pointer</b> and <b>ungrab-pointer</b> functions
      for grabbing and releasing pointer control.
      
    <defun>
      <name> grab-pointer
      <ll>
        <i>window event-mask</i> &amp;key <b>:owner-p :sync-pointer-p</b>
        <b>:sync-keyboard-p :confine-to :cursor :time</b>
      <kind> Function
      <returns>
        <dt> <i>grab-status</i> <dd> One of <b>:already-grabbed</b>, <b>:frozen</b>, <b>:invalid-time</b>,
          <b>:not-viewable</b>, or <b>:success</b>.
      <desc>
        <p>
          Actively grabs control of the pointer. Further pointer events are
          only reported to the grabbing client. The request overrides any
          active pointer grab by this client.
        <p>
          If <b>:owner-p</b> is <b>nil</b>, all generated pointer events are
          reported with respect to <i>window</i>, and are only reported if
          selected by <i>event-mask</i>. If <b>:owner-p</b> is true, and if a
          generated pointer event would normally be reported to this client,
          it is reported normally; otherwise the event is reported with
          respect to the <i>window</i>, and is only reported if selected by
          <i>event-mask</i>. For either value of <b>:owner-p</b>, unreported
          events are simply discarded.
        <p>
          If <b>:sync-pointer-p</b> is <b>nil</b>, pointer event processing
          continues normally (asynchronously); if the pointer is currently
          frozen by this client, then processing of pointer events is
          resumed. If <b>:sync-pointer-p</b> is true (indicating a synchronous
          action), the pointer (as seen via the protocol) appears to freeze,
          and no further pointer events are generated by the server until the
          grabbing client issues a releasing <b>allow-events</b> request.
          Actual pointer changes are not lost while the pointer is frozen;
          they are simply queued for later processing.
        <p>
          If <b>:sync-keyboard-p</b> is <b>nil</b>, keyboard event processing
          is unaffected by activation of the grab. If <b>:sync-keyboard-p</b>
          is true, the keyboard (as seen via the protocol) appears to freeze,
          and no further keyboard events are generated by the server until the
          grabbing client issues a releasing <b>allow-events</b>
          request. Actual keyboard changes are not lost while the keyboard is
          frozen; they are simply queued for later processing.
        <p>
          If <b>:cursor</b> is specified, it is displayed regardless of what
          window the pointer is in.  Otherwise, the normal cursor for the
          <i>window</i> is displayed.
        <p>
          If a <b>:confine-to</b> window is specified, the pointer is
          restricted to stay within that window.  The <b>:confine-to</b>
          window does not need to have any relationship to the
          <i>window</i>. If the pointer is not initially in the
          <b>:confine-to</b> window, it is warped automatically to the closest
          edge (with <b>:enter</b>/<b>:leave-events</b> generated normally)
          just before the grab activates.  If the <b>:confine-to</b> window is
          subsequently reconfigured, the pointer is warped automatically as
          necessary to keep it contained in the window.
        <p>
          <b>grab-pointer</b> generates <b>:enter-notify</b> and
          <b>:leave-notify</b> events. <b>grab-pointer</b> can fail with a
          status of:
        <ul>
          <li>
            <b>:already-grabbed</b> if the pointer is actively grabbed by some
            other client
          <li>
            <b>:frozen</b> if the pointer is frozen by an active grab of
            another client
          <li>
            <b>:not-viewable</b> if the <i>window</i> or the
            <b>:confine-to</b> window is not viewable, or if the
            <b>:confine-to</b> window lies completely outside the boundaries
            of the root window.
          <li>
            <b>:invalid-time</b> if the specified time is earlier than the
            last-pointer-grab time or later than the current server
            time. Otherwise, the last-pointer-grab time is set to the
            specified time, with current-time replaced by the current server
            time, and a value of <b>:success</b> is returned by
            <b>grab-pointer</b>.
        </ul>
      <args>
        <dt> <i>window</i> <dd> The <b>window</b> grabbing the pointer.
        <dt> <i>event-mask</i> <dd> A <b>pointer-event-mask</b>.
        <dt> <b>:owner-p</b> <dd> If true, all client windows receive pointer events normally.
        <dt> <b>:sync-pointer-p</b> <dd> Indicates whether the pointer is in synchronous or asynchronous mode.
        <dt> <b>:sync-keyboard-p</b> <dd> Indicates whether the keyboard is in synchronous or asynchronous mode.
        <dt> <b>:confine-to</b> <dd> A <b>window</b> to which the pointer is confined.
        <dt> <b>:cursor</b> <dd> A <b>cursor</b>.
        <dt> <b>:time</b> <dd> A <b>timestamp</b>. A <b>nil</b> value means the current server time is used.
    </defun>
    
    <defun>
      <name> ungrab-pointer
      <ll>   <i>display</i> &amp;key <b>:time</b>
      <kind> Function
      <desc>
        <p>
          Releases the pointer if this client has it actively grabbed (from
          either <b>grab-pointer</b>, <b>grab-button</b>, or from a normal
          button press), and releases any queued events. The request has no
          effect if the specified <b>:time</b> is earlier than the
          last-pointer-grab time or is later than the current server time. An
          <b>ungrabpointer</b> is performed automatically if the event window
          or <b>:confine-to</b> window for an active pointer grab becomes not
          viewable.
        <p>
          This request generates <b>:enter-notify</b> and <b>:leave-notify</b>
          events.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <b>:time</b> <dd> A <b>timestamp</b>.
    </defun>
    
    <defun>
      <name> change-active-pointer-grab
      <ll>   <i>display event-mask</i> &amp;optional <i>cursor time</i>
      <kind> Function
      <desc>
        <p>
          Changes the specified dynamic parameters if the pointer is actively
          grabbed by the client and the specified <i>time</i> is no earlier
          than the last-pointer-grab time and no later than the current server
          time. The interpretation of <i>event-mask</i> and <i>cursor</i> are
          as in <b>grab-pointer</b>.  <b>change-active-pointer-grab</b> has no
          effect on the passive parameters of a <b>grab-button</b>.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <i>event-mask</i> <dd> A <b>pointer-event-mask</b>.
        <dt> <i>cursor</i> <dd> A <b>cursor</b> or <b>nil</b>.
        <dt> <i>time</i> <dd> A <b>timestamp</b>.
    </defun>
    
    <h2 name="grabbing-a-button">12.9 Grabbing a Button</h2>      
    
    <p>
      CLX provides the <b>grab-button</b> and <b>ungrab-button</b> functions
      for passively grabbing and releasing pointer control.
      
    <defun>
      <name> grab-button
      <ll>
        <i>window button event-mask</i> &amp;key (<b>:modifiers</b> 0) <b>:owner-p</b>
        <b>:sync-pointer-p :sync-keyboard-p :confine-to :cursor</b>
      <kind> Function
      <desc>
        <p>
          This request establishes a passive grab. If the specified
          <i>button</i> is pressed when the specified modifier keys are down
          (and no other buttons or modifier keys are down), and:
        <ul>
          <li> <i>window</i> contains the pointer
          <li> The <b>:confine-to</b> window (if any) is viewable
          <li> These constraints are not satisfied for any ancestor of <i>window</i>
        </ul>
        <p>
          then:
        <ul>
          <li>
            The pointer is actively grabbed as described with
            <b>grab-pointer</b>
          <li>
            The last-pointer-grab time is set to the time that the button was
            pressed (as transmitted in the <b>:button-press</b> event)
          <li>
            The <b>:button-press</b> event is reported
        </ul>
        <p>
          The interpretation of the remaining arguments is the same as with
          <b>grab-pointer</b>. The active grab is terminated automatically
          when all buttons are released (independent of the state of modifier
          keys).
        <p>
          A zero <i>modifier</i> mask is equivalent to issuing the request for
          all possible modifier-key combinations (including the combination of
          no modifiers). It is not required that all specified modifiers have
          currently assigned keycodes. A <i>button</i> of <b>:any</b> is
          equivalent to issuing the request for all possible
          buttons. Otherwise, it is not required that the specified
          <i>button</i> currently be assigned to a physical button.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>button</i> <dd> The button (type <b>card8</b>) pressed or <b>:any</b>.
        <dt> <i>event-mask</i> <dd> A <b>pointer-event-mask</b>.
        <dt> <b>:modifiers</b> <dd> A <b>modifier-mask</b>.
        <dt> <b>:owner-p</b> <dd> If true, all client windows receive pointer events normally.
        <dt> <b>:sync-pointer-p</b> <dd> Indicates whether the pointer is handled in a synchronous or asynchronous fashion.
        <dt> <b>:sync-keyboard-p</b> <dd> Indicates whether the keyboard is in synchronous or asynchronous mode.
        <dt> <b>:confine-to</b> <dd> A <b>window</b> to which the pointer is confined.
        <dt> <b>:cursor</b> <dd> A <b>cursor</b>.
    </defun>
    
    <defun>
      <name> ungrab-button
      <ll>   <i>window button</i> &amp;key (<b>:modifiers</b> 0)
      <kind> Function
      <desc>
        <p>
          Releases the passive button/key combination on the specified
          <i>window</i> if it was grabbed by this client. A zero
          <i>modifier</i> mask is equivalent to issuing the request for all
          possible modifier combinations including the combination of no
          modifiers. A <i>button</i> of <b>:any</b> is equivalent to issuing
          the request for all possible buttons. This has no effect on an
          active grab.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>button</i> <dd> The button (type <b>card8</b>) that is released or <b>:any</b>.
        <dt> <b>:modifiers</b> <dd> A <b>modifier-mask</b>.
    </defun>
    
    <h2>12.10 Grabbing the Keyboard</h2>
    
    <p>
      CLX provides the <b>grab-keyboard</b> and <b>ungrab-keyboard</b>
      functions for actively grabbing and releasing control of the keyboard.
      
    <defun>
      <name> grab-keyboard
      <ll> 
        <i>window</i> &amp;key <b>:owner-p :sync-pointer-p :sync-keyboard-p</b>
        <b>:time</b>
      <kind> Function
      <returns>
        <dt> <i>grab-status</i> <dd> One of <b>:already-grabbed</b>, <b>:frozen</b>, <b>:invalid-time</b>,
          <b>:not-viewable</b>, or <b>:success</b>.
      <desc>
        <p>
          Actively grabs control of the keyboard. Further key events are
          reported only to the grabbing client. The request overrides any
          active keyboard grab by this client.  <b>grab-keyboard</b> generates
          <b>:focus-in</b> and <b>:focus-out</b> events.
        <p>
          If <b>:owner-p</b> is <b>nil</b>, all generated key events are
          reported with respect to <i>window</i>. If <b>:owner-p</b> is true,
          then a generated key event that would normally be reported to this
          client is reported normally; otherwise the event is reported with
          respect to the <i>window</i>.  Both <b>:key-press</b> and
          <b>:key-release</b> events are always reported, independent of any
          event selection made by the client.
        <p>
          If <b>:sync-keyboard-p</b> is <b>nil</b>, keyboard event processing
          continues normally (asynchronously); if the keyboard is currently
          frozen by this client, then processing of keyboard events is
          resumed. If <b>:sync-keyboard-p</b> is true, the keyboard (as seen
          via the protocol) appears to freeze, and no further keyboard events
          are generated by the server until the grabbing client issues a
          releasing <b>allow-events</b> request. Actual keyboard changes are
          not lost while the keyboard is frozen; they are simply queued for
          later processing.
        <p>
          If <b>:sync-pointer-p</b> is <b>nil</b>, pointer event processing is
          unaffected by activation of the grab. If <b>:sync-pointer-p</b> is
          true, the pointer (as seen via the protocol) appears to freeze, and
          no further pointer events are generated by the server until the
          grabbing client issues a releasing <b>allow-events</b>
          request. Actual pointer changes are not lost while the pointer is
          frozen; they are simply queued for later processing.
        <p>
          The grab can fail with a status of:
        <ul>
          <li>
            <b>:already-grabbed</b> if the keyboard is actively grabbed by
            some other client
          <li>
            <b>:frozen</b> if the keyboard is frozen by an active grab from
            another client
          <li>
            <b>:not-viewable</b> if <i>window</i> is not viewable
          <li>
            <b>:invalid-time</b> if the specified time is earlier than the
            last-keyboard-grab time or later than the current server
            time. Otherwise, <b>grab-keyboard</b> returns a status of
            <b>:success</b> and last-keyboard-grab time is set to the
            specified time, with current-time replaced by current server time.
        </ul>
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <b>:owner-p</b> <dd> If true, all client windows receive keyboard input normally.
        <dt> <b>:sync-pointer-p</b> <dd> Indicates whether the pointer is in synchronous or asynchronous mode.
        <dt> <b>:sync-keyboard-p</b> <dd> Indicates whether the keyboard is in synchronous or asynchronous mode.
        <dt> <b>:time</b> <dd> A <b>timestamp</b>.
    </defun>
    
    <defun>
      <name> ungrab-keyboard
      <ll>   <i>display</i> &amp;key <b>:time</b>
      <kind> Function
      <desc>
        <p>
          Releases the keyboard if this client has it actively grabbed (from
          either <b>grab-keyboard</b> or <b>grab-key</b>), and releases any
          queued events. The request has no effect if the specified time is
          earlier than the last-keyboard-grab time or is later than the
          current server time.  An <b>ungrab-keyboard</b> is performed
          automatically if the event window for an active keyboard grab
          becomes not viewable.
      <args>
        <dt> <i>display</i> <dd> A <b>display</b>.
        <dt> <b>:time</b> <dd> A <b>timestamp</b>.
    </defun>
    
    <h2>12.11 Grabbing a Key</h2>
    
    <p>
      The following paragraphs describe the functions used for passively
      grabbing and releasing the keyboard.
      
    <defun>
      <name> grab-key
      <ll>
        <i>window key</i> &amp;key (<b>:modifiers</b> 0) <b>:owner-p :sync-pointer-p</b>
        <b>:sync-keyboard-p :time</b>
      <kind> Function
      <desc>
        <p>
          This request establishes a passive grab on the keyboard. If the
          specified <i>key</i> (which can also be a modifier key) is pressed
          (whether or not any specified modifier keys are down), and either of
          the following is true:
        <ul>
          <li>
            <i>window</i> is an ancestor of (or is) the focus window
          <li>
            <i>window</i> is a descendant of the focus window and contains the
            pointer
          <li>
            These constraints are not satisfied for any ancestor of
            <i>window</i>, then the following occurs:
            <ul>
              <li>
                The keyboard is actively grabbed as described in
                <b>grab-keyboard</b>
              <li>
                The last-keyboard-grab time is set to the time that the
                <i>key</i> was pressed (as transmitted in the
                <b>:key-press</b> event)
              <li>
                The <b>:key-press</b> event is reported
            </ul>
        </ul>
        The interpretation of the remaining arguments is as for
        <b>grab-keyboard</b>. The active grab is terminated automatically when
        the specified <i>key</i> has been released, independent of the state
        of the modifier keys.
        <p>
          A zero modifier mask is equivalent to issuing the request for all
          possible modifier combinations (including the combination of no
          modifiers). It is not required that all specified modifiers have
          currently assigned keycodes. A <i>key</i> of <b>:any</b> is
          equivalent to issuing the request for all possible
          keycodes. Otherwise, the <i>key</i> must be in the range specified
          by <b>display-min-keycode</b> and <b>display-max-keycode</b> in the
          connection setup.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>key</i> <dd> The key (type <b>card8</b>) to be grabbed or <b>:any</b>.
        <dt> <b>:modifiers</b> <dd> A <b>modifier-mask</b>.
        <dt> <b>:owner-p</b> <dd> If true, all client windows receive keyboard input normally.
        <dt> <b>:sync-pointer-p</b> <dd> Indicates whether the pointer is in synchronous or asynchronous mode.
        <dt> <b>:sync-keyboard-p</b> <dd> Indicates whether the keyboard is in synchronous or asynchronous mode.
        <dt> <b>:time</b> <dd> A <b>timestamp</b>.
    </defun>
    
    <defun>
      <name> ungrab-key
      <ll>   <i>window key</i> &amp;key (<b>:modifiers</b> 0)
      <kind> Function
      <desc>
        <p>
          Releases the <i>key</i> combination on the specified <i>window</i>
          if it was grabbed by this client. A zero modifier mask of
          <b>:any</b> is equivalent to issuing the request for all possible
          modifier combinations (including the combination of no modifiers). A
          <i>key</i> of <b>:any</b> is equivalent to issuing the request for
          all possible keycodes. <b>ungrab-key</b> has no effect on an active
          grab.
      <args>
        <dt> <i>window</i> <dd> A <b>window</b>.
        <dt> <i>key</i> <dd> The key (type <b>card8</b>) to be released or <b>:any</b>.
        <dt> <b>:modifiers</b> <dd> A <b>modifier-mask</b>.
    </defun>
    
    <h2>12.12 Event Types</h2>
    
    <p>
      The following paragraphs contain detailed descriptions of the contents
      of each event type. In CLX, events are not actually represented by
      structures, but rather by lists of keyword values passed to handler
      functions or by values bound to symbols within the clauses of
      <b>event-case</b> and <b>event-cond</b> forms. Nevertheless, it is
      convenient to describe event contents in terms of slots and to identify
      the components of events with slot name symbols. In fact, CLX uses the
      <b>declare-event</b> macro to define event slot symbols and to map these
      symbols to specific event data items returned by the X server (see
      <ref name=declaring-event-types>).
    <p>
      The following paragraphs describe each event type, listing its
      <b>event-key</b> keyword symbol and its slot name symbols. An event
      keyword symbol identifies a specific event type.  An event keyword
      symbol can be given as an argument to <b>send-event</b> or to an event
      handler function; it can also appear in the <i>event-match</i> form of
      an <b>event-case</b> clause. An event slot name symbol identifies a
      specific event data item. Event slot names appear as keywords with
      associated values among the arguments passed to <b>send-event</b> or to
      an event handler function; as non-keyword symbols, they can also be in
      the <i>event-slots</i> form of an <b>event-case</b> clause.
    <p>
      In certain cases, more than one name symbol is defined for the same
      event slot. For example, in <b>:key-press</b> events, the symbols
      <i>window</i> and <i>event-window</i> both refer to the same event data
      item.
      
    <h3>12.12.1 Keyboard and Pointer Events</h3>
    
    <p>
      The keyboard and pointer events are: <b>:key-press, :key-release,</b>
      <b>:button-press</b>, <b>:button-release</b>, <b>:motion-notify</b>,
      <b>:enter-notify</b>, and <b>:leave-notify.</b>
      
    <defun>
      <name> :key-press, :key-release, :button-press, :button-release
      <kind> Event Type
        
      <desc>
        <dl>
          <dt> <i>Selected by</i>: <dd> <b>:key-press</b>, <b>:key-release</b>, <b>:button-press</b>, or <b>:button-release</b>.
        </dl>
        <p>
          <b>:key-press</b>, and <b>:key-release</b> events are generated when
          a key or pointer button changes state. Note that <b>:key-press</b>
          and <b>:key-release</b> are generated for all keys, even those
          mapped to modifiers. All of these event types have the same
          slots. The window containing the pointer at the time of the event is
          referred to as the <i>source</i> window. The <i>event</i>
          <i>window</i> is the window to which the event is actually
          reported. The event window is found by starting with the source
          window and looking up the hierarchy for the first window on which
          any client has selected interest in the event (provided no
          intervening window prohibits event generation by including the event
          type in its do-not-propagate-mask). The actual window used for
          reporting can be modified by active grabs and, in the case of
          keyboard events, can be modified by the focus window.
        <p>
          A <b>:button-press</b> event has the effect of a temporary
          <b>grab-button</b>. When a pointer button is pressed and no active
          pointer grab is in progress, the ancestors of the source window are
          searched from the <i>root</i> down, looking for a passive grab to
          activate. If no matching passive grab on the button exists, then an
          active grab is started automatically for the client receiving the
          <b>:button-press</b> event, and the last-pointer-grab time is set to
          the current server time. The effect is essentially equivalent to
          calling <b>grab-button</b> with the following arguments:
        <table border=1>
          <tr><th><b>Argument</b>                     <th><b>Description</b>
          <!-- <tr> -->
          <tr><td><i>window</i>                       <td>The event window.
          <tr><td><i>button</i>                       <td>The button that was pressed.
          <tr><td><i>event-mask</i>                   <td>The client's selected pointer events on the event window.
          <tr><td><b>:modifiers</b>                   <td>0
          <tr><td><b>:owner-p</b>                     <td><b>t</b> if the client has <b>:owner-grab-button</b> selected on the event window; otherwise <b>nil</b>.
          <tr><td><b>:sync-pointer-p</b>              <td><b>nil</b>
          <tr><td><b>:sync-keyboard-p</b>             <td><b>nil</b>
          <tr><td><b>:confine-to</b>                  <td><b>nil</b>
          <tr><td><b>:cursor</b>                      <td><b>nil</b>
        </table>
        <p>
          The <b>:button-press</b> grab is terminated automatically when all
          buttons are released. The functions <b>ungrab-pointer</b> and
          <b>change-active-pointer-grab</b> can both be used to modify the
          <b>:button-press</b> grab.
        <dl>
          <dt> <i>window, event-window</i> <dd> Type <b>window</b>.
            
            The window receiving the event.
            
          <dt> <i>code</i> <dd> Type <b>card8</b>.
            
            The <i>code</i> argument varies with the event type. For <b>:key-press</b> and
            <b>:key-release</b>, <i>code</i> is the keycode (see <ref name=keyboard-encodings>). For
            <b>:button-press</b> and <b>:button-release</b>, <i>code</i> is the pointer button number.
            
          <dt> <i>x</i> <dd> Type <b>int16</b>.
            
            If <i>event-window</i> is on the same screen as root, then <i>x</i> and <i>y</i> are the pointer
            coordinates relative to the <i>event-window</i>; otherwise <i>x</i> and <i>y</i> are zero.
            
          <dt> <i>y</i> <dd> Type <b>int16</b>.
            
            If <i>event-window</i> is on the same screen as root, then <i>x</i> and <i>y</i> are the pointer
            coordinates relative to the <i>event-window</i>; otherwise <i>x</i> and <i>y</i> are zero.
            
          <dt> <i>state</i> <dd> Type <b>card16</b>.
            
            A mask that gives the state of the buttons and modifier keys just before the
            event.
            
          <dt> <i>time</i> <dd> Type <b>card32</b>.
            
            A timestamp for the moment when the event occurred.
            
          <dt> <i>root</i> <dd> Type <b>window</b>.
            
            The root window of the source window.
            
          <dt> <i>root-x</i> <dd> Type <b>int16</b>.
            
            The x coordinate of the pointer position relative to root at the time of the event.
            
          <dt> <i>root-y</i> <dd> Type <b>int16</b>.
            
            The y coordinate of the pointer position relative to root at the time of the event<i>.</i>
            
          <dt> <i>child</i> <dd> Type (<b>or null window</b>).
            
            If the source window is an inferior of the <i>event-window</i>, <i>child</i> is set to the child
            of <i>event-window</i> that is an ancestor of (or is) the source window; otherwise, it is
            set to <b>nil</b><i>.</i>
            
          <dt> <i>same-screen-p</i> <dd> Type <b>boolean</b>.
            
            True if <i>event-window</i> and root are on the same screen.
        </dl>
    </defun>
    
    <defun>
      <name> :motion-notify
      <kind> Event Type
      <desc>
        <p>
        <dl>
          <dt> <i>Selected by:</i> 
          <dd> <b>:button-1-motion</b>, <b>:button-2-motion</b>, <b>:button-3-motion</b>,
            <b>:button-4-motion</b>, <b>:button-5-motion</b>, <b>:button-motion</b>, or <b>:pointer-motion</b>.
        </dl>
        <p>
          The <b>:motion-notify</b> event is generated when the pointer
          moves. A <b>:motion-notify</b> event has the same slots as
          <b>:button-press, :button-release</b>, <b>:key-press</b>, and
          <b>:key-release</b> events, with the exception that the <i>code</i>
          slot is replaced by the <i>hint-p</i> slot. As with these other
          events, the event window for <b>:motion-notify</b> is found by
          starting with the source window and looking up the hierarchy for the
          first window on which any client has selected interest in the event
          (provided no intervening window prohibits event generation by
          including <b>:motion-notify</b> in its do-not-propagate-mask).The
          actual window used for reporting can be modified by active grabs.
        <p>
          <b>:motion-notify</b> events are generated only when the motion
          begins and ends in the window. The granularity of motion events is
          not guaranteed, but a client selecting for motion events is
          guaranteed to get at least one event when the pointer moves and
          comes to rest. Selecting <b>:pointer-motion</b> generates
          <b>:motion-notify</b> events regardless of the state of the pointer
          buttons. By selecting some subset of <b>:button[1-5]-motion</b>
          instead, <b>:motion-notify</b> events are only received when one or
          more of the specified buttons are pressed. By selecting
          <b>:button-motion</b>, <b>:motion-notify</b> events are only
          received when at least one button is pressed. If
          <b>:pointer-motion-hint</b> is also selected, the server is free to
          send only one <b>:motion-notify</b>, until either the key or button
          state changes, the pointer leaves the event window, or the client
          calls <b>query-pointer</b> or <b>motion-events</b>.
        <dl>
          <dt> <i>hint-p</i> <dd> Type <b>boolean</b>.
            
            True if the event is a hint generated by selecting <b>:pointer-motion-hint</b>.
        </dl>
    </defun>
    
    <defun>
      <name> :enter-notify, :leave-notify
      <kind> Event Type
      <desc>
        <dl>
          <dt> <i>Selected by:</i> 
          <dd> <b>:enter-window</b> or <b>:leave-window</b>.
        </dl>
        <p>
          If pointer motion or a window hierarchy change causes the pointer to
          be in a different window than before, <b>:enter-notify</b> and
          <b>:leave-notify</b> events are generated instead of a
          <b>:motion-notify</b> event. All <b>:enter-notify</b> and
          <b>:leave-notify</b> events caused by a hierarchy change are
          generated after any hierarchy event (<b>:unmap-notify</b>,
          <b>:map-notify</b>, <b>:configure-notify</b>,
          <b>:gravity-notify</b>, or <b>:circulate-notify</b>) caused by that
          change, but the ordering of <b>:enter-notify</b> and
          <b>:leave-notify</b> events with respect to <b>:focus-out</b>,
          <b>:visibility-notify</b>, and <b>:exposure</b> events is not
          constrained by the X protocol. An <b>:enter-notify</b> or
          <b>:leave-notify</b> event can also be generated when a client
          application calls <b>change-active-pointer-grab</b>,
          <b>grab-pointer</b>, or <b>ungrab-pointer</b>.
        <dl>
          <dt> <i>window, event-window</i> <dd> Type <b>window</b>.
            
            The window receiving the event.
            
          <dt> <i>x</i> <dd> Type <b>int16</b>.
            
            The final pointer position. If <i>event-window</i> is on the same screen as root, then <i>x</i>
                                      and <i>y</i> are the pointer coordinates relative to the <i>event-window</i>; otherwise <i>x</i> and
                                      <i>y</i> are zero.

            <dt> <i>y</i> <dd> Type <b>int16</b>.

                                      The final pointer position. If <i>event-window</i> is on the same screen as root, then <i>x</i>
                                      and <i>y</i> are the pointer coordinates relative to the <i>event-window</i>; otherwise <i>x</i> and
                                      <i>y</i> are zero.

            <dt> <i>mode</i> <dd> Type (<b>member :normal :grab :ungrab</b>).

                                      Events caused when the pointer is actively grabbed have mode <b>:grab</b>. Events
                                      caused when an active pointer grab deactivates have mode <b>:ungrab</b>. In all
                                      other cases, mode is <b>:normal</b>.

            <dt> <i>kind</i> <dd> Type (<b>member :ancestor :virtual :inferior :nonlinear</b> <b>:nonlinear-virtual</b>).

                                      When the pointer moves from window A to window B, and A is an inferior of
                                      B:
              <ul>
                <li>
                  <b>:leave-notify</b> with <i>kind</i> <b>:ancestor</b> is generated on A
                <li>
                  <b>:leave-notify</b> with <i>kind</i> <b>:virtual</b> is generated on each window between A
                  and B exclusive (in that order)
                <li>
                  <b>:enter-notify</b> with <i>kind</i> <b>:inferior</b> is generated on B
              </ul>
              <p>
                When the pointer moves from window A to window B, and
                B is an inferior of A:
              <ul>
                <li>
                  <b>:leave-notify</b> with <i>kind</i> <b>:inferior</b> is generated on A
                <li>
                  <b>:enter-notify</b> with <i>kind</i>
                  <b>:virtual</b> is generated on each window between
                  A and B exclusive (in that order)
                <li>
                  <b>:enter-notify</b> with <i>kind</i> <b>:ancestor</b> is generated on B
              </ul>
              <p>
                When the pointer moves from window A to window B, with
                window C being their least common ancestor:
              <ul>
                <li>
                  <b>:leave-notify</b> with <i>kind</i> <b>:nonlinear</b> is generated on A
                <li>
                  <b>:leave-notify</b> with <i>kind</i>
                  <b>:nonlinear-virtual</b> is generated on each
                  window between A and C exclusive (in that order)
                <li>
                  <b>:enter-notify</b> with <i>kind</i>
                  <b>:nonlinear-virtual</b> is generated on each
                  window between C and B exclusive (in that order)
                <li>
                  <b>:enter-notify</b> with <i>kind</i>
                  <b>:nonlinear</b> is generated on B
              </ul>
              <p>
                When the pointer moves from window A to window B, on different screens:
              <ul>
                <li>
                  <b>:leave-notify</b> with <i>kind</i> <b>:nonlinear</b> is generated on A
                <li>
                  If A is not a root window, <b>:leave-notify</b> with <i>kind</i> <b>:nonlinear-virtual</b> is
                  generated on each window above A up to and including its root (in order)
                <li>
                  If B is not a root window, <b>:enter-notify</b> with
                  <i>kind</i> <b>:nonlinear-virtual</b> is generated
                  on each window from B's root down to but not
                  including B (in order)
                <li>
                  <b>:enter-notify</b> with <i>kind</i> <b>:nonlinear</b> is generated on B
              </ul>
              <p>
                When a pointer grab activates (but after any initial warp into a
                confine-to window, and before generating any actual
                <b>:button-press</b> event that activates the grab), with
                <i>G</i> the <b>grab-window</b> for the grab and <i>P</i> the
                window the pointer is in, then <b>:enter-notify</b> and
                <b>:leave-notify</b> events with mode <b>:grab</b> are generated
                (as for <b>:normal</b> above) as if the pointer were to suddenly
                warp from its current position in <i>P</i> to some position in
                <i>G</i>. However, the pointer does not warp, and the pointer
                position is used as both the <i>initial</i> and <i>final</i>
                positions for the events.
              <p>
                When a pointer grab deactivates (but after generating any actual
                <b>:button-release</b> event that deactivates the grab), with
                <i>G</i> the <b>grab-window</b> for the grab and <i>P</i> the
                window the pointer is in, then <b>:enter-notify</b> and
                <b>:leave-notify</b> events with mode <b>:ungrab</b> are
                generated (as for <b>:normal</b> above) as if the pointer were
                to suddenly warp from from some position in <i>G</i> to its
                current position in <i>P</i>.  However, the pointer does not
                warp, and the current pointer position is used as both the
                <i>initial</i> and <i>final</i> positions for the events.

            <dt> <i>focus-p</i> <dd> Type <b>boolean</b>.

                                      If <i>event-window</i> is the focus window or an inferior of the focus window, then
                                      <i>focus-p</i> is <b>t</b>; otherwise, <i>focus-p</i> is <b>nil</b>.

            <dt> <i>state</i> <dd> Type <b>card16</b>.

                                      A mask that gives the state of the buttons and modifier keys just before the
                                      event.

            <dt> <i>time</i> <dd> Type <b>card32</b>.

                                      A timestamp for the moment when the event occurred.

            <dt> <i>root</i> <dd> Type <b>window</b>.

                                      The root window containing the final pointer position.

            <dt> <i>root-x</i> <dd> Type <b>int16</b>.

                                      The x coordinate of the pointer position relative to root at the time of the event.

            <dt> <i>root-y</i> <dd> Type <b>int16</b>.

                                      The y coordinate of the pointer position relative to root at the time of the event.

            <dt> <i>child</i> <dd> Type (<b>or null window</b>).

                                      In a <b>:leave-notify</b> event, if a child of the <i>event-window</i> contains the initial
                                      position of the pointer, the <i>child</i> slot is set to that child; otherwise, the <i>child</i> slot is
                                      <b>nil</b>. For an <b>:enter-notify</b> event, if a child of the <i>event-window</i> contains the final
                                      pointer position, the <i>child</i> slot is set to that child; otherwise, the <i>child</i> slot is <b>nil</b>.

            <dt> <i>same-screen-p</i> <dd> Type <b>boolean</b>.

                                      True if <i>event-window</i> and root are on the same screen.
          </dl>
      </defun>

<h3>12.12.2 Input Focus Events</h3>

      <p>
        The input focus events are <b>:focus-in</b> and <b>:focus-out</b>.

      <defun>
        <name> :focus-in, :focus-out
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i> 
            <dd> <b>:focus-change</b>.
          </dl>
          <p>
            <b>:focus-in</b> and <b>:focus-out</b> events are generated when the
            input focus changes. All <b>:focus-out</b> events caused by a window
            <b>:unmap</b> are generated after any <b>:unmap-notify</b> event,
            but the ordering of <b>:focus-out</b> with respect to generated
            <b>:enter-notify</b>, <b>:leave-notify</b>,
            <b>:visibility-notify</b>, and <b>:expose</b> events is not
            constrained.
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.

                                      For <b>:focus-in</b>, the new input focus window. For <b>:focus-out,</b> the previous input
                                      focus window.

            <dt> <i>mode</i> <dd> Type <b>(member :normal :while-grabbed :grab :ungrab)</b>.

                                      Events generated by <b>set-input-focus</b> when the keyboard is not grabbed have
                                      mode <b>:normal</b>. Events generated by <b>set-input-focus</b> when the keyboard is
                                      grabbed have mode <b>:while-grabbed</b>. Events generated when a keyboard grab
                                      activates have mode <b>:grab</b>, and events generated when a keyboard grab
                                      deactivates have mode <b>:ungrab</b>.
              
            <dt> <i>kind</i> <dd> Type (<b>member :ancestor :virtual :inferior :nonlinear :nonlinear-virtual :pointer :pointer-root :none</b>).

                                      When the focus moves from window A to window B, and A is an inferior of B,
                                      with the pointer in window P:
              <ul>
                <li>
                  <b>:focus-out</b> with <i>kind</i> <b>:ancestor</b> is
                  generated on A
                <li>
                  <b>:focus-out</b> with <i>kind</i> <b>:virtual</b> is
                  generated on each window between A and B exclusive (in that
                  order)
                <li>
                  <b>:focus-in</b> with <i>kind</i> <b>:inferior</b> is
                  generated on B
                <li>
                  If P is an inferior of B, but P is not A or an inferior of
                  A or an ancestor of A, <b>:focus-in</b> with <i>kind</i>
                  <b>:pointer</b> is generated on each window below B down
                  to and including P (in order)
              </ul>
              <p>
                When the focus moves from window A to window B, and B is an inferior of A,
                with the pointer in window P:
              <ul>
                <li>
                  If P is an inferior of A, but P is not A or an inferior of
                  B or an ancestor of B, <b>:focus-out</b> with <i>kind</i>
                  <b>:pointer</b> is generated on each window from P up to
                  but not including A (in order)
                <li>
                  <b>:focus-out</b> with <i>kind</i> <b>:inferior</b> is
                  generated on A
                <li>
                  <b>:focus-in</b> with <i>kind</i> <b>:virtual</b> is
                  generated on each window between A and B exclusive (in
                  that order)
                <li>
                  <b>:focus-in</b> with <i>kind</i> <b>:ancestor</b> is
                  generated on B
              </ul>
              <p>
                When the focus moves from window A to window B, with window C being
                their least common ancestor, and with the pointer in window P:
              <ul>
                <li>
                  If P is an inferior of A, <b>:focus-out</b> with
                  <i>kind</i> <b>:pointer</b> is generated on each window
                  from P up to but not including A (in order)
                <li>
                  <b>:focus-out</b> with <i>kind</i> <b>:nonlinear</b> is
                  generated on A
                <li>
                  <b>:focus-out</b> with <i>kind</i>
                  <b>:nonlinear-virtual</b> is generated on each window
                  between A and C exclusive (in that order)
                <li>
                  <b>:focus-in</b> with <i>kind</i>
                  <b>:nonlinear-virtual</b> is generated on each window
                  between C and B exclusive (in that order)
                <li>
                  :focus-in with <i>kind</i> <b>:nonlinear</b> is generated
                  on B
                <li>
                  If P is an inferior of B, <b>:focus-in</b> with
                  <i>kind</i> <b>:pointer</b> is generated on each window
                  below B down to and including P (in order)
              </ul>
              <p>
                When the focus moves from window A to window B, on different
                screens, with the pointer in window P:
              <ul>
                <li>
                  If P is an inferior of A, <b>:focus-out</b> with
                  <i>kind</i> <b>:pointer</b> is generated on each window
                  from P up to but not including A (in order)
                <li>
                  <b>:focus-out</b> with <i>kind</i> <b>:nonlinear</b> is
                  generated on A
                <li>
                  If A is not a root window, <b>:focus-out</b> with
                  <i>kind</i> <b>:nonlinear-virtual</b> is generated on each
                  window above A up to and including its root (in order)
                <li>
                  If B is not a root window, <b>:focus-in</b> with
                  <i>kind</i> <b>:nonlinear-virtual</b> is generated on each
                  window from B's root down to but not including B (in
                  order)
                <li>
                  <b>:focus-in</b> with <i>kind</i> <b>:nonlinear</b> is
                  generated on B
                <li>
                  If P is an inferior of B, <b>:focus-in</b> with
                  <i>kind</i> <b>:pointer</b> is generated on each window
                  below B down to and including P (in order)
              </ul>
              <p>
                When the focus moves from window A to <b>:pointer-root</b>
                (or <b>:none</b>), with the pointer in window P:
              <ul>
                <li>
                  If P is an inferior of A, <b>:focus-out</b> with
                  <i>kind</i> <b>:pointer</b> is generated on each window
                  from P up to but not including A (in order)
                <li>
                  <b>:focus-out</b> with <i>kind</i> <b>:nonlinear</b> is
                  generated on A
                <li>
                  If A is not a root window, <b>:focus-out</b> with
                  <i>kind</i> <b>:nonlinear-virtual</b> is generated on each
                  window above A up to and including its root (in order)
                <li>
                  <b>:focus-in</b> with <i>kind</i> <b>:pointer-root</b> (or
                  <b>:none</b>) is generated on all root windows
                <li>
                  If the new focus is <b>:pointer-root</b>, <b>:focus-in</b>
                  with <i>kind</i> <b>:pointer</b> is generated on each
                  window from P's root down to and including P (in order)
              </ul>
              <p>
                When the focus moves from <b>:pointer-root</b> (or
                <b>:none</b>) to window A, with the pointer in window P:
              <ul>
                <li>
                  If the old focus is <b>:pointer-root</b>,
                  <b>:focus-out</b> with <i>kind</i> <b>:pointer</b> is
                  generated on each window from P up to and including P's
                  root (in order)
                <li>
                  <b>:focus-out</b> with <i>kind</i> <b>:pointer-root</b>
                  (or <b>:none</b>) is generated on all root windows
                <li>
                  If A is not a root window, <b>:focus-in</b> with
                  <i>kind</i> <b>:nonlinear-virtual</b> is generated on each
                  window from A's root down to but not including A (in
                  order)
                <li>
                  <b>:focus-in</b> with <i>kind</i> <b>:nonlinear</b> is
                  generated on A
                <li>
                  If P is an inferior of A, <b>:focus-in</b> with
                  <i>kind</i> <b>:pointer</b> is generated on each window
                  below A down to and including P (in order)
              </ul>
              <p>
                When the focus moves from <b>:pointer-root</b> to
                <b>:none</b> (or vice versa), with the pointer in window P:
              <ul>
                <li>
                  If the old focus is <b>:pointer-root</b>,
                  <b>:focus-out</b> with <i>kind</i> <b>:pointer</b> is
                  generated on each window from P up to and including P's
                  root (in order)
                <li>
                  <b>:focus-out</b> with <i>kind</i> <b>:pointer-root</b>
                  (or <b>:none</b>) is generated on all root windows
                <li>
                  <b>:focus-in</b> with <i>kind</i> <b>:none</b> (or
                  <b>:pointer-root</b>) is generated on all root windows
                <li>
                  If the new focus is <b>:pointer-root</b>, <b>:focus-in</b>
                  with <i>kind</i> <b>:pointer</b> is generated on each
                  window from P's root down to and including P (in order)
              </ul>
          </dl>
          <p>
            When a keyboard grab activates (but before generating any actual
            <b>:key-press</b> event that activates the grab), with <i>G</i>
            the <b>grab-window</b> for the grab and <i>F</i> the current
            focus, then <b>:focus-in</b> and <b>:focus-out</b> events with
            mode <b>:grab</b> are generated (as for <b>:normal</b> above) as
            if the focus were to change from <i>F</i> to <i>G</i>.
          <p>
            When a keyboard grab deactivates (but after generating any
            actual <b>:key-release</b> event that deactivates the grab),
            with <i>G</i> the <b>grab-window</b> for the grab and <i>F</i>
            the current focus, then <b>:focus-in</b> and <b>:focus-out</b>
            events with mode <b>:ungrab</b> are generated (as for
            <b>:normal</b> above) as if the focus were to change from
            <i>G</i> to <i>F</i>.
      </defun>

<h3>12.12.3 Keyboard and Pointer State Events</h3>

      <p>
        The keyboard and pointer state events are <b>:keymap-notify</b> and <b>:mapping-notify</b>.
          
      <defun>
        <name> :keymap-notify
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i> <dd> <b>:keymap-state</b>.
          </dl>
          <p>
            The <b>:keymap-notify</b> event returns the current state of the
            keyboard. <b>:keymap-notify</b> is generated immediately after every
            <b>:enter-notify</b> and <b>:focus-in</b>.
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.

                                      The window receiving an <b>:enter-notify</b> or <b>:focus-in</b> event.

            <dt> <i>keymap</i> <dd> Type (<b>bit-vector 256</b>).

                                      A bit-vector containing the logical state of the keyboard. Each bit set to 1
                                      indicates that the corresponding key is currently pressed. The vector is represented
                                      as 32 bytes. For <i>n</i> from 0 to 7, byte <i>n</i> (from 0) contains the bits for keys 8<i>n</i> to
                                      8<i>n</i>+7, with the least significant bit in the byte representing key 8<i>n</i>.
          </dl>
      </defun>

      <defun>
        <name> :mapping-notify
                <kind> Event Type
        <desc>
          <p>
            The X server reports <b>:mapping-notify</b> events to all
            clients. There is no mechanism to express disinterest in this
            event. The X server generates this event type whenever a client
            application calls one of the following:
          <ul>
            <li>
              <b>set-modifier-mapping</b> to indicate which keycodes to use as
              modifiers (the status reply must be <b>:mapping-success</b>)
            <li>
              <b>change-keyboard-mapping</b> to change the keyboard mapping
            <li>
              <b>set-pointer-mapping</b> to set the pointer mapping (the status
              reply must be <b>:mapping-success</b>)
          </ul>
          <dl>
            <dt> <i>request</i> <dd> Type (<b>member :modifier :keyboard :pointer</b>).

                                      Indicates the kind of change that occurred--<b>:modifier</b> for a successful
                                      <b>set-modifier-mapping</b>, <b>:keyboard</b> for a successful <b>change-keyboard-mapping</b>,
                                      and <b>:pointer</b> for a successful <b>set-pointer-mapping</b>.

            <dt> <i>start</i> <dd> Type <b>card8</b>.

                                      If request is <b>:keyboard</b>, then <i>start</i> and <i>count</i> indicate the range of altered
                                      keycodes.

            <dt> <i>count</i> <dd> Type <b>card8</b>.

                                      If request is <b>:keyboard</b>, then <i>start</i> and <i>count</i> indicate the range of altered
                                      keycodes.
          </dl>
      </defun>

<h3>12.12.4 Exposure Events</h3>
    
      <p>
        The X server cannot guarantee that a window's content is preserved when
        the window is obscured or reconfigured. X requires client applications
        to be capable of restoring the contents of a previously-invisible window
        region whenever it is exposed.  Therefore, the X server sends events
        describing the exposed window and its exposed region. For a simple
        window, a client can choose to redraw the entire content whenever any
        region is exposed. For a complex window, a client can redraw only the
        exposed region.
      
      <defun>
        <name> :exposure
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i> <dd> <b>:exposure</b>.
          </dl>
          <p>
            An <b>:exposure</b> event is sent when redisplay is needed for a
            window region whose content has been lost. Redisplay is needed
            when one of the following occurs:
          <ul>
            <li>
              A region is exposed for a window and the X server has no backing
              store for the region
            <li>
              A region of a viewable window is obscured and the X server
              begins to honor the window's backing-store attribute of
              <b>:always</b> or <b>:when-mapped</b>
            <li>
              The X server begins to honor an unviewable window's
              backing-store attribute of <b>:always</b> or
              <b>:when-mapped</b>.
          </ul>
          <p>
            The regions needing redisplay are decomposed into an arbitrary set
            of rectangles, and an <b>:exposure</b> event is generated for each
            rectangle. For a given action causing <b>:exposure</b> events, the
            set of events for a given window are guaranteed to be reported
            contiguously.
          <p>
            <b>:exposure</b> events are never generated for <b>:input-only</b>
            windows.
          <p>
            All <b>:exposure</b> events caused by a hierarchy change are
            generated after any hierarchy event (<b>:unmap-notify</b>,
            <b>:map-notify</b>,
            <b>:configure-notify</b>,<b>:gravity-notify</b>, or
            <b>:circulate-notify</b>) caused by that change. All
            <b>:exposure</b> events on a given window are generated after any
            <b>:visibility-notify</b> event on that window, but it is not
            required that all <b>:exposure</b> events on all windows be
            generated after all visibility events on all windows. The ordering
            of <b>:exposure</b> events with respect to <b>:focus-out</b>,
            <b>:enter-notify</b>, and <b>:leave-notify</b> events is not
            constrained.
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.
              
                                      The window needing redisplay.

            <dt> <i>x</i> <dd> Type <b>card16</b>.

                                      The position of the left edge of the region to redisplay, relative to the
                                      <i>event-window</i>.

            <dt> <i>y</i> <dd> Type <b>card16</b>.

                                      The position of the top edge of the region to redisplay, relative to the
                                      <i>event-window</i>.

            <dt> <i>width</i> <dd> Type <b>card16</b>.

                                      The width of the region to redisplay.

            <dt> <i>height</i> <dd> Type <b>card16</b>.

                                      The height of the region to redisplay.

            <dt> <i>count</i> <dd> Type <b>card16</b>.

                                      If count is zero, then no more <b>:exposure</b> events for this window follow. If
                                      count is nonzero, then at least that many more <b>:exposure</b> events for this
                                      window follow (and possibly more).
          </dl>
      </defun>
    
      <defun>
        <name> :graphics-exposure
                <kind> Event Type
        <desc>
          <p>
            A <b>:graphics-exposure</b> event is generated by a call to
            <b>copy-area</b> or <b>copy-plane</b> when the exposures attribute
            of the graphics context is <b>:on</b>. A <b>:graphics-exposure</b>
            event reports a destination region whose content cannot be computed
            because the content of the corresponding source region has been
            lost. For example, the missing source region may be obscured or may
            lie outside the current source drawable size. For a given action
            causing <b>:graphics-exposure</b> events, the set of events for a
            given destination are guaranteed to be reported contiguously.
          <dl>
          <dt> <i>drawable, event-window</i> <dd> Type <b>drawable</b>.

                                      The destination drawable for the <b>copy-area</b> or <b>copy-plane</b> function.

          <dt> <i>x</i> <dd> Type <b>card16</b>.

                                      The position of the left edge of the destination region, relative to the <i>drawable</i>.

          <dt> <i>y</i> <dd> Type <b>card16</b>.

                                      The position of the top edge of the destination region, relative to the <i>drawable</i>.

          <dt> <i>width</i> <dd> Type <b>card16</b>.

                                      The width of the destination region.

          <dt> <i>height</i> <dd> Type <b>card16</b>.

                                      The height of the destination region.

          <dt> <i>count</i> <dd> Type <b>card16</b>.

                                      If count is zero then no more <b>:graphics-exposure</b> events for the <i>drawable</i>
                                      follow. If count is nonzero then at least that many more <b>:graphics-exposure</b>
                                      events for the <i>drawable</i> follow (and possibly more).

          <dt> <i>major</i> <dd> Type <b>card8</b>.

                                      The major opcode for the graphics request generating the event
                                      (62 for <b>copy-area</b>, 63 for <b>copy-plane</b>).

          <dt> <i>minor</i> <dd> Type <b>card16</b>.

                                      The minor opcode for the graphics request generating the event
                                      (0 for both <b>copy-area</b> and <b>copy-plane</b>).
          </dl>
      </defun>

  <defun>
        <name> :no-exposure
                <kind> Event Type
        <desc>
          <p>
            A <b>:no-exposure</b> event is generated by a call to
            <b>copy-area</b> or <b>copy-plane</b> when the exposures attribute
            of the graphics context is <b>:on</b>. If no
            <b>:graphics-exposure</b> events are generated, then a single
            <b>:no-exposure</b> event is sent.
          <dl>
            <dt> <i>drawable, event-window</i> <dd> Type <b>drawable</b>.

                                      The destination drawable for the <b>copy-area</b> or <b>copy-plane</b> function.

            <dt> <i>major</i> <dd> Type <b>card8</b>.

                                      The major opcode for the graphics request generating the event
                                      (62 for <b>copy-area</b>, 63 for <b>copy-plane</b>).

            <dt> <i>minor</i> <dd> Type <b>card16</b>.

                                      The minor opcode for the graphics request generating the event
                                      (0 for both <b>copy-area</b> and <b>copy-plane</b>).
          </dl>
      </defun>

<h3>12.12.5 Window State Events</h3>

      <p>
        The following paragraphs describe the events that can be received when a
        window becomes:
      <ul>
        <li> Created
        <li> Destroyed
        <li> Invisible
        <li> Mapped
        <li> Moved
        <li> Reparented
        <li> Resized
        <li> Restacked
        <li> Unmapped
        <li> Visible
      </ul>

      <defun>
        <name> :circulate-notify
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i>
            <dd> <b>:structure-notify</b> on a window or <b>:substructure-notify</b> on its parent.
          </dl>
          <p>
            A <b>:circulate-notify</b> event is generated whenever a window is
            actually restacked as a result of a client application calling
            <b>circulate-window-up</b> or <b>circulate-window-down</b>.
          <dl>
            <dt> <i>event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event.

            <dt> <i>window</i> <dd> Type <b>window</b>.

                                      The window that was restacked.

            <dt> <i>place</i> <dd> Type (<b>member :top :bottom</b>).

                                      If place is <b>:top</b>, the <i>window</i> is now on top of all siblings. Otherwise, it is below
                                      all siblings.
          </dl>
      </defun>

      <defun>
        <name> :configure-notify
                <kind> Event Type
        <desc>
          <dl>
            <dt><i>Selected by:</i>
            <dd> <b>:structure-notify</b> on a window or <b>:substructure-notify</b> on its parent.
          </dl>
          <p>
            The <b>:configure-notify</b> event is generated when the position or
            size of a window actually changes as a result of a client
            application setting its <i>x</i>, <i>y</i>, <i>width</i>,
            <i>height</i>, or <i>border-width</i> attributes.
          <dl>
            <dt> <i>event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event.

            <dt> <i>window</i> <dd> Type <b>window</b>.

                                      The window that was moved or resized.

            <dt> <i>x</i> <dd> Type <b>int16</b>.

                                      <i>x</i> and <i>y</i> specify the new upper-left corner position of the <i>window</i> relative to its
                                      parent.

            <dt> <i>y</i> <dd> Type <b>int16</b>.

                                      <i>x</i> and <i>y</i> specify the new upper-left corner position of the <i>window</i> relative to its
                                      parent.

            <dt> <i>width</i> <dd> Type <b>card16</b>.

                                      <i>width</i> and <i>height</i> specify the new size of the <i>window</i> interior.

            <dt> <i>height</i> <dd> Type <b>card16</b>.

                                      <i>width</i> and <i>height</i> specify the new size of the <i>window</i> interior.

            <dt> <i>border-width</i> <dd> Type <b>card16</b>.

                                      The new <i>window</i> border width.

            <dt> <i>above-sibling</i> <dd> Type (<b>or null window</b>).

                                      The sibling immediately below the <i>window</i>. If above-sibling is <b>nil</b>, then the
                                      <i>window</i> is below all of its siblings.

            <dt> <i>override-redirect-p</i> <dd> Type <b>boolean</b>.

                                      <i>override-redirect-p</i> is true if the override-redirect attribute of the <i>window</i> is
                                      <b>:on</b>; otherwise, it is <b>nil</b>. See <b>window-override-redirect</b> in <ref name=winattr>.
          </dl>
          <p>
            The X server can report <b>:create-notify</b> events to clients
            wanting information about creation of windows. The X server
            generates this event whenever a client application creates a window
            by calling <b>create-window</b>.
          <p>
            To receive this event type in a client application, you <b>setf</b>
            the <b>:substructure-notify</b> as the event-mask in the parent
            window's event-mask slot.
      </defun>

      <defun>
        <name> :create-notify
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i>
            <dd> <b>:substructure-notify</b>.
          </dl>
          <p>
            The <b>:create-notify</b> event is generated when a <i>window</i> is
            created and is sent to the <i>parent</i> window.
          <dl>  
          <dt> <i>parent, event-window</i> <dd> Type <b>window</b>.

                                      The parent window receiving the event.

          <dt> <i>window</i> <dd> Type <b>window</b>.

                                      The new window created.

          <dt> <i>x</i> <dd> Type <b>int16</b>.

                                      <i>x</i> and <i>y</i> specify the initial upper-left corner position of the <i>window</i> relative to
                                      the parent.

          <dt> <i>y</i> <dd> Type <b>int16</b>.

                                      <i>x</i> and <i>y</i> specify the initial upper-left corner position of the <i>window</i> relative to
                                      the parent.

          <dt> <i>width</i> <dd> Type <b>card16</b>.

                                      <i>width</i> and <i>height</i> specify the initial size of the <i>window</i> interior.

          <dt> <i>height</i> <dd> Type <b>card16</b>.

                                      <i>width</i> and <i>height</i> specify the initial size of the <i>window</i> interior.

          <dt> <i>border-width</i> <dd> Type <b>card16</b>.

                                      The initial <i>window</i> border width.

          <dt> <i>override-redirect-p</i> <dd> Type <b>boolean</b>.

                                      <i>override-redirect-p</i> is true if the override-redirect attribute of the <i>window</i> is
                                      <b>:on</b>; otherwise, it is <b>nil</b>. See <b>window-override-redirect</b> in <ref name=winattr>.
          </dl>
      </defun>

      <defun>
        <name> :destroy-notify
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by</i> 
            <dd> <b>:structure-notify</b> on a window or <b>:substructure-notify</b> on its parent.
          </dl>
          <p>
            The <b>:destroy-notify</b> event is generated when a <i>window</i>
            is destroyed. The ordering of the <b>:destroy-notify</b> events is
            such that for any given window, <b>:destroy-notify</b> is generated
            on all inferiors of a window before <b>:destroy-notify</b> is
            generated on the <i>window</i>. The ordering among siblings and
            across subhierarchies is not otherwise constrained.
          <dl>
            <dt> <i>event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event.

            <dt> <i>window</i> <dd> Type <b>window</b>.

                                      The window that was destroyed.
          </dl>
      </defun>

      <defun>
        <name> :gravity-notify
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i> 
            <dd> <b>:structure-notify</b> on a window or <b>:substructure-notify</b> on its parent.
          </dl>
          <p>
            The X server can report <b>:gravity-notify</b> events to clients
            wanting information about when a <i>window</i> is moved because of a
            change in the size of its parent. The X server generates this event
            whenever a client application actually moves a child window as a
            result of resizing its parent by calling <b>with-state</b> with the
            appropriate arguments set.
          <dl>
            <dt> <i>event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event.

            <dt> <i>window</i> <dd> Type <b>window</b>.

                                      The window that was moved.

            <dt> <i>x</i> <dd> Type <b>int16</b>.

                                      x and y specify the new upper-left corner position of the <i>window</i> relative to its
                                      parent.

            <dt> <i>y</i> <dd> Type <b>int16</b>.
              
                                      x and y specify the new upper-left corner position of the <i>window</i> relative to its
                                      parent.
          </dl>
      </defun>

      <defun>
        <name> :map-notify
                <kind> Event Type
        <desc>
          <p>
          <dl>
            <dt> <i>Selected by:</i> 
            <dd> <b>:structure-notify</b> on a window or <b>:substructure-notify</b> on its parent.
          </dl>
          <p>
            The X server can report <b>:map-notify</b> events to clients wanting
            information about which windows are mapped. The X server generates
            this event type whenever a client application changes the
            <i>window</i>'s state from unmapped to mapped by calling
            <b>map-window</b> or <b>map-subwindow</b>.
          <p>
            To receive this event type, you <b>setf :structure-notify</b> as the
            event-mask on the <i>window</i>'s <b>event-mask</b> slot. You can
            also receive this event type by <b>setf</b>ing the
            <b>:substructure-notify</b> event-mask on the parent window.
          <dl>
            <dt> <i>event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event.

            <dt> <i>window</i> <dd> Type <b>window</b>.
              
                                      The window that was mapped.

            <dt> <i>override-redirect-p</i> <dd> Type <b>boolean</b>.

                                      <i>override-redirect-p</i> is true if the override-redirect attribute of the <i>window</i> is
                                      <b>:on</b>; otherwise, it is <b>nil</b>. See <b>window-override-redirect</b> in <ref name=winattr>.
          </dl>
      </defun>

      <defun>
        <name> :reparent-notify
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i>
            <dd> <b>:structure-notify</b> on a window or <b>:substructure-notify</b> on its old or new parent.
          </dl>
          <p>
            The <b>:reparent-notify</b> event is generated when a <i>window</i>
            is reparented.
          <dl>
            <dt> <i>event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event.

            <dt> <i>window</i> <dd> Type <b>window</b>.

                                      The window that was reparented.

            <dt> <i>parent</i> <dd> Type <b>window</b>.

                                      The new parent of the <i>window</i>.

            <dt> <i>x</i> <dd> Type <b>int16</b>.

                                      x and y specify the upper-left corner position of the <i>window</i> relative to its new
                                      <i>parent</i>.

            <dt> <i>y</i> <dd> Type <b>int16</b>.

                                      x and y specify the upper-left corner position of the <i>window</i> relative to its new
                                      <i>parent</i>.
              
            <dt> <i>override-redirect-p</i> <dd> Type <b>boolean</b>.

                                      <i>override-redirect-p</i> is true if the override-redirect attribute of the <i>window</i> is
                                      <b>:on</b>; otherwise, it is <b>nil</b>. See <b>window-override-redirect</b> in <ref name=winattr>.
          </dl>
      </defun>

      <defun>
        <name> :unmap-notify
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i> 
            <dd> <b>:structure-notify</b> on a window or <b>:substructure-notify</b> on its parent.
          </dl>
          <p>
            The <b>:unmap-notify</b> event is generated when a mapped
            <i>window</i> is unmapped.
          <dl>
            <dt> <i>event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event.

            <dt> <i>window</i> <dd> Type <b>window</b>.

                                      The window that was unmapped.

            <dt> co<i>nfigure-p</i> <dd> Type <b>boolean</b>.

                                      <i>configure-p</i> is true if the <i>window</i> has a win-gravity attribute of <b>:unmap</b>, and the
                                      event was generated because <i>window</i>'s parent was resized.
          </dl>
      </defun>

      <defun>
        <name> :visibility-notify
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i> 
            <dd> <b>:visibility-change</b>.
          </dl>
          <p>
            The <b>:visibility-notify</b> event is sent when the visibility of a
            <i>window</i> changes.  <b>:visibility-notify</b> events are never
            generated on <b>:input-only</b> windows. For the purposes of this
            event, the visibility of the <i>window</i> is not affected by its
            subwindows.
          <p>
            All <b>:visibility-notify</b> events caused by a hierarchy change
            are generated after any hierarchy event caused by that change (for
            example, <b>:unmap-notify</b>, <b>:map-notify</b>,
            <b>:configure-notify</b>, <b>:gravity-notify</b>, or
            <b>:circulate-notify</b>). Any <b>:visibility-notify</b> event on a
            given window is generated before any <b>:exposure</b> events on that
            window, but it is not required that all <b>:visibility-notify</b>
            events on all windows be generated before all <b>:exposure</b>
            events on all windows. The ordering of <b>:visibility-notify</b>
            events with respect to <b>:focus-out</b>, <b>:enter-notify</b>, and
            <b>:leave-notify</b> events is not constrained.
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.

                                      The window that changed in visibility.

            <dt> <i>state</i> <dd> Type (<b>member :unobscured :partially-obscured</b> <b>:fully-obscured</b>).
              <p>
                When the <i>window</i> was either unviewable or it was viewable and at least
                partially obscured, and the <i>window</i> changed to viewable and completely
                unobscured, then <i>state</i> is <b>:unobscured</b>.
              <p>
                When the <i>window</i> was either unviewable or it was viewable and completely
                obscured, and the <i>window</i> changed to viewable and partially obscured, then
                <i>state</i> is <b>:partially-obscured</b>.
              <p>
                When the <i>window</i> was either unviewable or it was at least partially visible, and
                the <i>window</i> changed to viewable and completely obscured, then <i>state</i> is
                <b>:fully-obscured</b>.
          </dl>
      </defun>

<h3>12.12.6 Structure Control Events</h3>

      <p>
        The following paragraphs describe events used to <i>redirect</i> client
        requests that reconfigure, restack, or map a window. Structure control
        events are typically used only by window managers and not by ordinary
        client applications. Structure control events report redirected
        requests, allowing a window manager to modify the requests before they
        are actually performed. However, if the override-redirect attribute of a
        window is <b>:on</b>, then no requests are redirected and no structure
        control events are generated.

      <defun>
        <name> :circulate-request
                <kind> Event Type
        <desc>
          <p>
            The <b>:circulate-request</b> event is generated when a client
            application calls <b>circulate-window-up</b> or
            <b>circulate-window-down</b> with a window that has the
            override-redirect attribute <b>:off</b>. The <i>window</i> argument
            specifies the window to be restacked, and <i>place</i> specifies
            what the new position in the stacking order should be (either
            <b>:top</b> or <b>:bottom</b>).
          <dl>
            <dt> <i>Selected by:</i> <dd> <b>:substructure-redirect</b> on <i>parent</i>.
          </dl>
          <dl>

            <dt> <i>parent, event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event. The receiving client must have selected
                                      <b>:substructure-redirect</b> on this window.

            <dt> <i>window</i> <dd> Type <b>window</b>.

                                      The window to be restacked.

            <dt> <i>place</i> <dd> Type <b>(member :top :bottom)</b>.

                                      The new stacking priority requested for <i>window</i>.
          </dl>
      </defun>

      <defun>
        <name> :colormap-notify
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i> 
            <dd> <b>:colormap-change</b>.
          </dl>
          <p>
            The <b>:colormap-notify</b> event is generated with <i>new-p</i>
            <b>t</b> when the <i>colormap</i> associated with a <i>window</i> is
            changed, installed, or uninstalled.
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event.

            <dt> <i>colormap</i> <dd> Type <b>(or null colormap)</b>.
              
                                      The colormap attribute of the window.

            <dt> <i>new-p</i> <dd> Type <b>boolean</b>.

                                      If <i>new-p</i> is true, then the <i>window</i>'s colormap attribute has changed to the given
                                      <i>colormap</i>. Otherwise, the <i>window</i>'s colormap attribute has not, but the
                                      <i>colormap</i> has been installed or uninstalled.

            <dt> <i>installed-p</i> <dd> Type <b>boolean</b>.

                                      If <i>installed-p</i> is true, then the <i>colormap</i> is currently installed.
          </dl>
      </defun>

      <defun>
        <name> :configure-request
                <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i>
            <dd> <b>:substructure-redirect</b> on parent.
          </dl>
          <p>
            The <b>:configure-request</b> event is generated when a client
            program sets the <i>x</i>, <i>y</i>, <i>width</i>, <i>heigh</i>t,
            <i>border-width</i> or stacking priority attributes of a window that
            has the override-redirect attribute <b>:off</b>.
          <dl>
            <dt> <i>parent, event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event. The receiving client must have selected
                                      <b>:substructure-redirect</b> on this window.

            <dt> <i>window</i> <dd> Type <b>window</b>.

                                      The window to be reconfigured.

            <dt> <i>x</i> <dd> Type <b>int16</b>.

                                      <i>x</i> and <i>y</i> specify the requested upper-left corner position of the <i>window</i> relative
                                      to the parent. If either <i>x</i> or <i>y</i> is not specified in the value-mask, then it is set to
                                      the current window position.

            <dt> <i>y</i> <dd> Type <b>int16</b>.

                                      <i>x</i> and <i>y</i> specify the requested upper-left corner position of the <i>window</i> relative
                                      to the <i>parent</i>. If either <i>x</i> or <i>y</i> is not specified in the <i>value-mask</i>, then it is set to
                                      the current window position.

            <dt> <i>width, height</i> <dd> Type <b>card16</b>.

                                      <i>width</i> and <i>height</i> specify the requested size of the <i>window</i> interior. If either
                                      <i>width</i> or <i>height</i> is not specified in the <i>value-mask</i>, then it is set to the current
                                      window size.

            <dt> <i>border-width</i> <dd> Type <b>card16</b>

                                      The requested <i>window</i> border width. If <i>border-width</i> is not specified in the
                                      <i>value-mask</i>, then it is set to the current window <i>border-width</i>.

            <dt> <i>stack-mode</i> <dd> Type <b>(member :above :below :top-if :bottom-if</b> <b>:opposite)</b>.

                                      <i>stack-mode</i> and <i>above-sibling</i> specify the requested stacking priority of the
                                      <i>window</i>. If <i>stack-mode</i> is not specified in the <i>value-mask</i>, then it is set to
                                      <b>:above</b>.

            <dt> <i>above-sibling</i> <dd> Type (<b>or null window</b>).

                                      <i>stack-mode</i> and <i>above-sibling</i> specify the requested stacking priority of the
                                      <i>window</i>. If <i>above-sibling</i> is not specified in the <i>value-mask</i>, then it is set to <b>nil</b>.

            <dt> <i>value-mask</i> <dd> Type <b>mask16</b>.

                                      Specifies the changed <i>window</i> attributes contained in the redirected client
                                      request. Each 1 bit specifies that the corresponding attribute was changed.
          </dl>
      </defun>

      <defun>
        <name> :map-request
        <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i> <dd> <b>:substructure-redirect</b> on parent.
          </dl>
          <p>
            The <b>:map-request</b> event is generated when a client application
            maps a <i>window</i> that has the override-redirect attribute
            <b>:off</b>.
          <dl>
            <dt> <i>parent, event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event. The receiving client must have selected
                                      <b>:substructure-redirect</b> on this window.

            <dt> <i>window</i> <dd> Type <b>window</b>.

                                      The window to be mapped.
          </dl>
      </defun>

      <defun>
        <name> :resize-request
        <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i> <dd> <b>:resize-redirect</b>.
          </dl>
          <p>
            The <b>:resize-request</b> event is generated when a client program
            sets the <i>width</i> or <i>height</i> attributes of a <i>window</i>
            that has the override-redirect attribute <b>:off</b>.
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.

                                      The window to be resized.

            <dt> <i>width, height</i> <dd> Type <b>card16</b>.

                                      <i>width</i> and <i>height</i> specify the requested size of the wi<i>ndow</i> interior. If either
                                      <i>width</i> or <i>height</i> was unchanged in the client request, then it is set to the current
                                      window size.
          </dl>
      </defun>

<h3 name='client-communication-events'>12.12.7 Client Communications Events</h3>

      <p>
        The client communications events discussed in the following paragraphs
        are: <b>:client-message</b>, <b>:property-notify</b>,
        <b>:selection-clear</b>, <b>:selection-request</b>, and
        <b>:selection-notify</b>.

      <defun>
        <name> :client-message
        <kind> Event Type
        <desc>
          <p>
            The <b>:client-message</b> event is generated exclusively by client
            calls to <b>send-event</b>. The X server places no interpretation on
            the <i>type</i> or content of <i>data</i> sent in a
            <b>:client-message</b>. A client can neither select
            <b>:client-message</b> events nor avoid receiving them.
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event.

            <dt> <i>type</i> <dd> Type <b>keyword</b>.

                                      An xatom keyword that specifies the type of client message. Interpretation of
                                      the type is determined solely by agreement between the sending and receiving
                                      clients.

            <dt> <i>format</i> <dd> Type (<b>member 8 16 32</b>).

                                      An integer that specifies whether <i>data</i> should be viewed as a sequence of 8-bit,
                                      16-bit, or 32-bit quantities.

            <dt> <i>data</i> <dd> Type <b>(sequence integer)</b>.

                                      The data content of the client message. <i>data</i> always consists of 160 bytes --
                                      depending on format, either 20 8-bit values, 10 16-bit values or 5 32-bit values.
                                      The amount of this data actually used by a particular client message depends on
                                      the type.
          </dl>
      </defun>

      <defun>
        <name> :property-notify
        <kind> Event Type
        <desc>
          <dl>
            <dt> <i>Selected by:</i> <dd> <b>:property-change</b>.
          </dl>
          <p>
            The <b>:property-notify</b> event is generated when a window
            property is changed or deleted.
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.

                                      The window receiving the event.

            <dt> <i>atom</i> <dd> Type <b>keyword</b>.

                                      The property that was changed or deleted.

            <dt> <i>state</i> <dd> Type <b>(member :new-value :deleted)</b>.

                                      <i>state</i> is <b>:new-value</b> if the property was changed using <b>change-property</b> or
                                      <b>rotate-properties</b>, even if zero-length data was added or if all or part of the
                                      property was replaced with identical data. <i>state</i> is <b>:deleted</b> if the property was
                                      deleted using <b>delete-property</b> or <b>get-property</b>.

            <dt> <i>time</i> <dd> Type <b>timestamp</b>.

                                      The server time when the property was changed or deleted.
          </dl>
      </defun>
      
      <defun>
        <name> :selection-clear
        <kind> Event Type
        <desc>
          <p>
            The <b>:selection-clear</b> event is reported to the previous owner
            of a <i>selection</i> when the owner of the <i>selection</i> is
            changed. The selection owner is changed by a client using
            <b>setf</b>.  A client can neither select <b>:selection-clear</b>
            events nor avoid receiving them.
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.

                                      The window losing ownership of the <i>selection</i>.

            <dt> <i>selection</i> <dd> Type <b>keyword</b>.

                                      The name of the selection.

            <dt> <i>time</i> <dd> Type <b>timestamp</b>.

                                      The last-change time recorded for the <i>selection</i>.
          </dl>
      </defun>

      <defun>
        <name> :selection-notify
        <kind> Event Type
        <desc>
          <p>
            The <b>:selection-notify</b> event is sent to a client calling
            <b>convert-selection</b>.  <b>:selection-notify</b> reports the
            result of the client request to return the current value of a
            <i>selection</i> into a particular form. <b>:selection-notify</b> is
            sent using <b>send-event</b> by the owner of the selection or (if no
            owner exists) by the X server. A client can neither select
            <b>:selection-notify</b> events nor avoid receiving them.
          <p>
            <b>NOTE:</b> Standard conventions for inter-client communication require the following
            additional steps in processing a <b>:selection-notify</b> event:
          <ol>
            <li>
              The client receiving this event should call <b>get-property</b> to
              return the converted selection value.
            <li>
              After receiving the selection value, the property should then be
              deleted (either by using the <b>:delete-p</b> argument to
              <b>get-property</b> or by calling <b>delete-property</b>).
          </ol>
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.

                                      The requestor window given in the call to <b>convert-selection</b>.

            <dt> <i>selection</i> <dd> Type <b>keyword</b>.

                                      The selection to be converted.

            <dt> <i>target</i> <dd> Type <b>keyword</b>.

                                      An <b>xatom</b> specifying the type of the converted selection value. This is the same
                                      target type given in the call to <b>convert-selection</b>.

            <dt> <i>property</i> <dd> Type <b>(or null keyword)</b>.

                                      The window property containing the converted selection. If the property is <b>nil</b>,
                                      then either the <i>selection</i> has no owner or the owner could not perform the
                                      conversion to the <i>target</i> type.

            <dt> <i>time</i> <dd> Type <b>timestamp</b>.
              
                                      The timestamp from the client call to <b>convert-selection</b>.
          </dl>
      </defun>

      <defun>
        <name> :selection-request
        <kind> Event Type
        <desc>
          <p>
            The <b>:selection-request</b> event is reported to the owner of a
            selection when a client calls <b>convert-selection</b>. This event
            requests the selection owner to convert the current value of a
            <i>selection</i> into a specified form and to return it to the
            requestor. A client can neither select <b>:selection-request</b>
            events nor avoid receiving them.
          <p>
            The selection owner should respond to a <b>:selection-request</b> event by performing the
            following steps:
          <ol>
            <li>
              Convert the current <i>selection</i> value to the <i>target</i>
              type.
            <li>
              Store the converted selection value in the <i>property</i>. If
              <i>property</i> is <b>nil</b>, then the owner should choose the
              <i>property</i>.
            <li>
              Call <b>send-event</b> to send a <b>:selection-notify</b> event to
              the <i>requestor</i> containing the <i>property</i> with the
              converted value. If the <i>selection</i> could not be converted to
              the <i>target</i> type, then a <b>nil</b> <i>property</i> should
              be sent. The <b>:selection</b>, <b>:target</b>, and <b>:time</b>
              arguments to <b>send-event</b> should be the same as those
              received in the <b>:selection-request</b> event. The event-mask
              argument to <b>send-event</b> should be <b>nil</b>; that is, the
              <b>:selection-notify</b> event should be sent to client that
              created the <i>requestor</i>.
          </ol>
          <p>
            <b>NOTE:</b> Standard conventions for inter-client communication
            require the following additional steps in processing a
            <b>:selection-request</b> event:
          <ol>
            <li>
              The property used to store the selection value must belong to the
              requestor.
            <li>
              If the property is <b>nil</b>, the target type <b>atom</b> should
              be used as the property name.
            <li>
              If the window did not actually own the selection at the given
              time, the request should be refused, just as if it could not be
              converted to the target type.
          </ol>
          <dl>
            <dt> <i>window, event-window</i> <dd> Type <b>window</b>.

                                      The selection owner receiving the event.

            <dt> <i>requestor</i> <dd> Type <b>window</b>.

                                      The window requesting the converted <i>selection</i>.

            <dt> <i>selection</i> <dd> Type <b>keyword</b>.

                                      The selection to be converted.

            <dt> <i>target</i> <dd> Type <b>keyword</b>.

                                      An <b>xatom</b> specifying the type of the converted <i>selection</i> value.

            <dt> <i>property</i> <dd> Type <b>(or null keyword)</b>.

                                      A requestor window property.

            <dt> <i>time</i> <dd> Type <b>timestamp</b>.

                                      The timestamp sent in the client <b>convert-selection</b> request.
          </dl>
      </defun>

<h3 name=declaring-event-types>12.12.8 Declaring Event Types</h3>

      <p>
        CLX uses the <b>declare-event</b> macro to define the event slot symbols
        that access the contents of X events. Most client applications do not
        need to use <b>declare-event</b> because the declarations for all core X
        events are already defined by CLX.  Programmers using extensions to the
        X protocol can use <b>declare-event</b> to allow CLX to handle new event
        types returned by an extended X server.

      <defun>
        <name> declare-event
        <ll>   <i>event-codes</i> &amp;rest <i>slot-declarations</i>
        <kind> Macro
        <desc>
          <p>
            Defines a mapping between event slot symbols and the data items in
            event messages received from an X server.
          <p>
            The <i>event-codes</i> argument gives the event type keyword for the
            event described. If several event types share the same slots, then
            <i>event-codes</i> can be a list of event type
            keywords. <i>slot-declarations</i> is a list containing an element
            for each event data item. The order of <i>slot-declarations</i>
            corresponds to the order of event data items defined by the X
            protocol.
          <p>
            Each element of <i>slot-declarations</i> is a list of the form
            (<i>type slot-name</i>*), where <i>type</i> is a Common Lisp type
            specifier and <i>slot-name</i> is a slot name symbol. The effect of
            such a list is to declare that the next data items in the event have
            the given data <i>type</i> and are associated with the given
            <i>slot-name</i> symbols. <i>slot-name</i> can also be a list of
            slot name symbols; in this case, each symbol in the list is an alias
            that refers to the same event data item.
        <args>
          <dt> <i>event-codes</i> <dd> An event type keyword or a list of event type keywords.
          <dt> <i>slot-declarations</i> <dd> A list of clauses defining event slot symbols.
      </defun>

<h2 name="releasing-queued-events">12.13 Releasing Queued Events</h2>

      <p>
        A client grabbing the keyboard or pointer can freeze the reporting of
        events on that device. When an input device is thus frozen, the server
        queues events until explicitly requested to release them by the grabbing
        client. CLX programs can use the <b>allow-events</b> function to release
        queued events from a frozen input device.

      <defun>
        <name> allow-events
        <ll>   <i>display mode</i> &amp;optional <i>time</i>
        <kind> Function
        <desc>
          <p>
            Releases some queued events if the client has caused a device to
            freeze. The request has no effect if the <i>time</i> is earlier than
            the last-grab time of the most recent active grab for the client, or
            if the <i>time</i> is later than the current server time. If
            <i>time</i> is <b>nil</b>, the current server time is used. The
            effect of this function depends on the specified <i>mode</i>.
          <ul>
            <li>
              <b>:async-pointer</b> -- If the pointer is frozen by the client,
              pointer event processing continues normally. If the pointer is
              frozen twice by the client on behalf of two separate grabs,
              <b>:async-pointer</b> releases events for both
              grab<i>s</i>. <b>:async-pointer</b> has no effect if the pointer
              is not frozen by the client, but the pointer need not be grabbed
              by the client.
            <li>
              <b>:sync-pointer</b> -- If the pointer is frozen and actively
              grabbed by the client, pointer event processing continues normally
              until the next <b>:button-press</b> or <b>:button-release</b>
              event is reported to the client, at which time the pointer again
              appears to freeze. However, if the reported event causes the
              pointer grab to be released, the pointer does not
              freeze. <b>:sync-pointer</b> has no effect if the pointer is not
              frozen by the client, or if the pointer is not grabbed by the
              client.
            <li>
              <b>:replay-pointer</b> -- If the pointer is actively grabbed by
              the client and is frozen as the result of an event having been
              sent to the client (either from the activation of a
              <b>grab-button</b>, or from a previous <b>allow-events</b> with
              mode <b>:sync-pointer</b>, but not from a <b>grab-pointer</b>),
              the pointer grab is released and that event is completely
              reprocessed, but this time ignoring any passive grabs at or above
              (towards the root) the <b>grab-window</b> of the grab just
              released. The request has no effect if the pointer is not grabbed
              by the client, or if the pointer is not frozen as the result of an
              event.
            <li>
              <b>:async-keyboard</b> -- If the keyboard is frozen by the client,
              keyboard event processing continues normally. If the keyboard is
              frozen twice by the client on behalf of two separate grabs,
              <b>:async-keyboard</b> releases events for both grabs.
              <b>:async-keyboard</b> has no effect if the keyboard is not frozen
              by the client, but the keyboard need not be grabbed by the client.
            <li>
              <b>:sync-keyboard</b> -- If the keyboard is frozen and actively
              grabbed by the client, keyboard event processing continues
              normally until the next <b>:key-press</b> or <b>:key-release</b>
              event is reported to the client, at which time the keyboard again
              appears to freeze. However if the reported event causes the
              keyboard grab to be released, the keyboard does not
              freeze. <b>:sync-keyboard</b> has no effect if the keyboard is not
              frozen by the client, or if the keyboard is not grabbed by the
              client.
            <li>
              <b>:replay-keyboard</b> -- If the keyboard is actively grabbed by
              the client and is frozen as the result of an event having been
              sent to the client (either from the activation of a grab-key, or
              from a previous <b>allow-events</b> with mode
              <b>:sync-keyboard</b>, but not from a <b>grab-keyboard</b>), the
              keyboard grab is released and that event is completely
              reprocessed, but this time ignoring any passive grabs at or above
              (towards the root) the <b>grab-window</b> of the grab just
              released. The request has no effect if the keyboard is not grabbed
              by the client, or if the keyboard is not frozen as the result of
              an event.
            <li>
              <b>:sync-both</b> -- If both pointer and keyboard are frozen by
              the client, event processing (for both devices) continues normally
              until the next <b>:button-press</b>, <b>:button-release</b>,
              <b>:key-press</b>, or <b>:key-release</b> event is reported to the
              client for a grabbed device (button event for the pointer, key
              event for the keyboard). At this time, the devices again appear to
              freeze. If the reported event causes the grab to be released, the
              devices do not freeze. However, if the other device is still
              grabbed, then a subsequent event for it will still cause both
              devices to freeze. <b>:sync-both</b> has no effect unless both
              pointer and keyboard are frozen by the client. If the pointer of
              keyboard is frozen twice by the client on behalf of two separate
              grabs, <b>:sync-both</b> <i>thaws</i> for both, but a subsequent
              freeze for <b>:sync-both</b> will only freeze each device once.
            <li>
              <b>:async-both</b> -- If the pointer and the keyboard are frozen
              by the client, event processing for both devices continues
              normally. If a device is frozen twice by the client on behalf of
              two separate grabs, <b>:async-both</b> <i>thaws</i> for
              both. <b>:async-both</b> has no effect unless both pointer and
              keyboard are frozen by the client.
          </ul>
          <p>
            <b>:async-pointer</b>, <b>:sync-pointer</b>, and
            <b>:replay-pointer</b> have no effect on processing of keyboard
            events. <b>:async-keyboard</b>, <b>:sync-keyboard</b>, and
            <b>:replay-keyboard</b> have no effect on processing of pointer
            events.
          <p>
            It is possible for both a pointer grab and a keyboard grab to be
            active simultaneously by the same or different clients. When a
            device is frozen on behalf of either grab, no event processing is
            performed for the device. It is possible for a single device to be
            frozen due to both grabs. In this case, the freeze must be released
            on behalf of both grabs before events can again be processed.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
            
          <dt> <i>mode</i>
          <dd> One of: <b>:async-pointer</b>, <b>:sync-pointer</b>, <b>:reply-pointer</b>, <b>:async-keyboard</b>,
            <b>:sync-keyboard</b>, <b>:replay-keyboard</b>, <b>:async-both</b>, <b>:sync-both</b>.
            
          <dt> <i>time</i> <dd> A <b>timestamp</b>.
      </defun>

<h1>13 Resources</h1>

<h2>13.1 Introduction</h2>

      <p>
        Users need a way to specify preferences for various user interface
        values (for example, colors, fonts, title strings, and so
        forth). Applications need a consistent method for determining the
        default interface values that are specific to them. It is also useful if
        application interface values can be modified by users without changes to
        the program code. For example, this capability can make it easy to
        change the color scheme of a user interface. In CLX, such interface
        values are referred to as <i>resources</i>. CLX defines functions for
        storing and retrieving interface resources from a resource database. A
        user can store various user interface values as resources in a resource
        database; a CLX application can then read these resource values and
        modify its user interface accordingly.
      <p>
        <b>NOTE:</b> The general term <i>resource</i> refers to any application
        user interface value stored in a resource database. The term <i>server
        resource</i> is used more specifically to refer to the types of objects
        allocated by an X server and referenced by clients (for example,
        windows, fonts, graphics contexts, and so forth).

<h2>13.2 Resource Binings</h2>

      <p>
        Conceptually, a resource database is a set of resource name-value pairs
        (or <i>resource bindings</i>). The name in a resource binding is a list
        that is the concatenation of a <i>path list</i> and an <i>attribute
        name</i>.
      <p>
        A path list is a list of symbols (or strings) that corresponds to a path
        through a tree-structured hierarchy. For example, the path:
      <p>
        <code>'(top middle bottom)</code>
      <p>
        corresponds to a three-level hierarchy in which <code>middle</code> is
        the child of <code>top</code>, and <code>bottom</code> is the child of
        <code>middle</code>.
      <p>
        Typically, the path of a resource name corresponds to a path in a
        hierarchy of windows, and each symbol/string names a window in the
        hierarchy. However, the first element of the path can also represent the
        overall name of the entire program, and subsequent path elements can
        refer to an application-specific hierarchy of resource names not
        strictly related to windows. In addition, a resource name can contain a
        partially-specified path list.  The asterisk symbol (*) is a wildcard
        that can correspond to any sequence of levels in the hierarchy
        (including the null sequence). For example, the path:
      <p>
        <code>'(top * bottom)</code>
      <p>
        corresponds to a hierarchy of two or more levels in which
        <code>top</code> is at the top level and <code>bot-</code>
        <code>tom</code> is at the bottom level. An element of a path list can
        be the name of an individual window or the name of a class of windows.
      <p>
        The final element of a resource name list is an attribute name. This
        symbol (or string) identifies a specific attribute of the object(s)
        named by the preceding path list. The attribute name can also be the
        symbol * or the string "*", in which case the resource name refers to
        all attributes of the path object(s). However, this form of resource
        name is rarely useful.
      <p>
        Some examples of resource bindings are shown below. In these examples,
        assume that <code>mail</code> is the resource name of a mail reading
        application. <code>mail</code> uses a window of the class
        <code>button</code> whose name is <code>reply</code>.
      <table border=0>
        <tr><th><b>Resource Name</b>                                  <th><b>Resource Value</b>
        <!-- <tr> -->
        <tr><td><code>(mail screen-1 reply background)</code>               <td><code>'green</code>
        <tr><td><code>(mail * background)</code>                            <td><code>'red</code>
        <tr><td><code>(* button background)</code>                          <td><code>'blue</code>
      </table>
      <p>
        These resource bindings specify the following:
      <ul>
        <li>
          The <code>background</code> attribute resource of <code>mail</code>
          application<i>'</i>s <code>reply</code> button has the value of
          <code>green</code> on <code>screen-1</code>.
        <li>
          The <code>background</code> attribute for the rest of the
          <code>mail</code> application is always <code>red</code> on all
          screens.
        <li>
          In general, the <code>background</code> attribute for all
          <code>button</code> windows is <code>blue</code>.
      </ul>

<h2>13.3 Basic Resource Database Functions</h2>

      <p>
        A <b>resource-database</b> structure is a CLX object that represents a
        set of resource bindings. The following paragraphs describe the CLX
        functions used to:
      <ul>
        <li> Create a resource database
        <li> Add a resource binding
        <li> Remove a resource binding
        <li> Merge two resource databases
        <li> Map a function over the contents of a resource database
      </ul>

      <defun>
        <name> make-resource-database
        <kind> Function
        <returns>
          <dt> <i>resource-database</i> <dd> Type <b>resource-database</b>.
        <desc>
          <p>
            Returns an empty resource database.
      </defun>

      <defun>
        <name> add-resource
        <ll>   <i>database name-list value</i>
        <kind> Function
        <desc>
          <p>
            Adds the resource binding specified by <i>name-list</i> and
            <i>value</i> to the given <i>database</i>. Only one value can be
            associated with the <i>name-list</i> in the <i>database</i>. This
            function replaces any value previously associated with the
            <i>name-list</i>.
        <args>
          <dt> <i>database</i> <dd> The <b>resource-database</b> for the new resource binding.
          <dt> <i>name-list</i> <dd> A list containing strings or symbols specifying the name for the resource binding.
          <dt> <i>value</i> <dd> The value associated with the <i>name-list</i> in the resource binding. This can be an object of any type.
      </defun>

      <defun>
        <name> delete-resource
        <ll>   <i>database name-list</i>
        <kind> Function
        <desc>
          <p>
            Removes the resource binding specified by <i>name-list</i> from the given <i>database</i>.
        <args>
          <dt> <i>database</i> <dd> The <b>resource-database</b> containing the resource binding.
          <dt> <i>name-list</i> <dd> A list containing strings or symbols specifying the name for the deleted resource binding.
      </defun>

      <defun>
        <name> map-resource
        <ll>   <i>database function</i> &amp;rest <i>args</i>
        <kind> Function
        <desc>
          <p>
            Calls the function for each resource binding in the
            <i>database</i>. For each resource binding consisting of a
            <i>name-list</i> and a <i>value</i>, the form
            (<b>apply</b>&nbsp;<i>function&nbsp;name-list&nbsp;value&nbsp;args</i>)
            is executed.
        <args>
          <dt> <i>database</i> <dd> A <b>resource-database</b>.
          <dt> <i>function</i> <dd> A <b>function</b> object or function symbol.
          <dt> <i>args</i> <dd> A list of arguments to the <i>function</i>.
      </defun>

      <defun>
        <name> merge-resources
        <ll>   <i>from-database to-database</i>
        <kind> Function
        <returns>
          <dt> <i>to-database</i> <dd>Type <b>resource-database</b>.
        <desc>
          <p>
            Merges the contents of the <i>from-database</i> with the
            <i>to-database</i>. <b>map-resource</b> invokes <b>add-resource</b>
            in order to add each resource binding in the <i>from-database</i> to
            the <i>to-database</i>. The updated <i>to-database</i> is returned.
        <args>
          <dt> <i>from-database</i> <dd> The <b>resource-database</b> from which resource bindings are read.
          <dt> <i>to-database</i> <dd> The <b>resource-database</b> to which resource bindings are added.
      </defun>

<h2>13.4 Accessing Resource Values</h2>

      <p>
        The power and flexibility of resource management is the result of the
        way resource values in a resource database are accessed. A resource
        binding binding stored in the database generally contains only a partial
        resource name consisting of a mixture of name and class identifiers and
        wildcard elements (that is, *). To look up a resource value, an
        application program starts with two resource name lists of the same
        length containing no wildcard elements -- a <i>complete resource
        name</i> and a <i>complete</i> <i>resource class</i>. The lookup
        algorithm returns the value for the resource binding whose resource name
        is the closest match to the complete name and class given. The
        definition of <i>closest match</i> takes into account the top-down,
        parent-child hierarchy of resource names and also the distinction
        between individual names and class names.

      <h3>13.4.1 Complete Names and Classes</h3>
      <p>
        A resource binding contains a resource name list that can contain names,
        class names, or a mixture of both. A class name is a symbol or string
        that represents a group of related objects. The set of names used as
        class names are not specified by CLX. Instead, class names are defined
        by agreement between those who use class names when creating resource
        bindings (that is, users) and those who use class names when accessing
        resource values (that is, application programmers).
      <p>
        In order to access a value in a resource database, an application uses a
        key consisting of two items: a <i>complete resource name</i> and a
        <i>complete resource class</i>. A complete resource name is a resource
        name list containing no wildcard elements. A complete resource class is
        a list of exactly the same form. The distinction between a complete
        resource name and a complete resource class lies in how they are used to
        access resource bindings. The elements of a complete resource name are
        interpreted as names of individual objects; the elements of a complete
        resource class are interpreted as names of object classes. The complete
        resource name and class lists used in a resource database access must
        have the same length.
      <p>
        Like any resource name list, a complete resource name consists of a path
        list and an attribute name. The first path list element is typically a
        symbol (or string) identifying the application as a whole. The second
        element can be a screen root identifier. Subsequent elements can be
        identifiers for each ancestor window of an application window. Thus, a
        path list typically identifies a specific window by tracing a path to it
        through the application window hierarchy. The final element of a
        complete resource name (its attribute name) is typically the name of a
        specific attribute of the window given by the path list (for example,
        <code>'background</code>). An attribute name can refer to a feature
        associated with the window by the application but not by the X server
        (for example, a font identifier).  Similarly, a complete resource class
        typically represents a path to a window in the application window
        hierarchy and a specific window attribute. However, a complete resource
        class contains the class name for each window and for the window
        attribute.
      <p>
        For instance, in the previous example, the <code>mail</code> application
        can attempt to look up the value of the <code>background</code> resource
        for the <code>reply button</code> window by using the following complete
        resource name:
      <p>
        <code>(mail screen-1 reply background)</code>
      <p>
        and the following complete resource class:
      <p>
        <code>(application root button fill)</code>
      <p>
        This complete resource name contains a path list identifying the reply
        button window -- <code>(mail screen-1 reply)</code> -- and an attribute
        name for the window background. The corresponding resource class
        contains the class names for the same path list and window attribute.

      <h3>13.4.2 Matching Resource Names</h3>

      <p>
        The resource lookup algorithm searches a specified resource data base
        and returns the value for the resource binding whose resource name is
        the closest match to a given complete resource name and class. The
        intent of the lookup algorithm is to formalize an intuitive notion of
        the closest match.
      <p>
        Precedence is given to a match which begins <i>higher</i> in the
        parent-child contact hierarchy. This allows a resource binding with a
        partial name to define a resource value shared by all members of a
        window subtree. For example, suppose the resource database contained the
        following resource bindings:
      <table border=0>
        <tr><th><b>Resource Name</b>                                  <th><b>Resource Value</b>
        <!-- <tr> -->
        <tr><td><code>(mail * background)</code>                      <td><code>'red</code>
        <tr><td><code>(* reply background)</code>                     <td><code>'blue</code>
      </table>
      <p>
        Suppose an application program searched by using the following complete
        resource name:
      <p>
        <code>(mail screen-1 reply background)</code>
      <p>
        then the closest matching value returned would be <code>'red</code>.
      <p>
        Precedence is given to the more specific match. A name match is more
        specific than a class match. Either a name or class match is more
        specific than a wildcard match. For example, suppose the resource
        database contained the following resource bindings:
      <table border=0>
        <tr><th><b>Resource Name</b>                                  <th><b>Resource Value</b>
        <!-- <tr> -->
        <tr><td><code>(mail * background)</code>                            <td><code>'red</code>
        <tr><td><code>(mail * fill)</code>                                  <td><code>'blue</code>
      </table>
      <p>
        Suppose an application program searched by using the following complete
        resource name and complete resource class:
      <p>
        <code>(mail screen-1 reply background)</code><br>
        <code>(application root button fill)</code>
      <p>
        then the closest matching value returned would be
        <code>'red</code>. However, suppose the resource database contained the
        following resource bindings:
      <table border=0>
        <tr><th><b>Resource Name</b>                                  <th><b>Resource Value</b>
        <!-- <tr> -->
        <tr><td><code>(mail * background)</code>                            <td><code>'red</code>
        <tr><td><code>(mail * button background)</code>                     <td><code>'blue</code>
      </table>
      <p>
        then the closest matching value returned would be <code>'blue</code>.

<h3>13.4.3 Resource Access Functions</h3>

      <p>
        The following paragraphs describe the CLX functions used to return a
        value from a resource database.

      <defun>
        <name> get-resource
        <ll>   <i>database attribute-name attribute-class path-name path-class</i>
        <kind> Function
        <returns>
          <dt> <i>value</i> <dd> Type <b>t</b>.
        <desc>
          <p>
            Returns the value of the resource binding in the <i>database</i>
            whose resource name most closely matches the complete resource
            name/class given by the <i>path-name</i>, <i>path-class</i>,
            <i>attribute-name</i>, and <i>attribute-class</i>. The lookup
            algorithm implements the precedence rules described previously to
            determine the closest match. When comparing name elements, case is
            significant only if both elements are strings; otherwise, element
            matching is case-insensitive.
        <args>
          <dt> <i>database</i> <dd> A <b>resource-database</b>.
          <dt> <i>attribute-name</i> <dd> A string or symbol giving an attribute name from a complete resource name.
          <dt> <i>attribute-class</i> <dd> A string or symbol giving an attribute class name from a complete resource class.
          <dt> <i>path-name</i> <dd> The path list from a complete resource name. <i>path-name</i> and <i>path-class</i> must have the same length.
          <dt> <i>path-class</i> <dd> The path list from a complete resource class. <i>path-name</i> and <i>path-class</i> must have the same length.
      </defun>

      <defun>
        <name> get-search-table
        <ll>   <i>database path-name path-class</i>
        <kind> Function
        <returns>
          <dt> <i>search-table</i> <dd> Type <b>list</b>.
        <desc>
          <p>
            Returns a table containing the subset of the <i>database</i> that
            matches the <i>path-name</i> and <i>path-class</i>. Resources using
            the same <i>path-name</i> and <i>path-class</i> can be accessed much
            more efficiently by using this table as an argument to
            <b>get-search-resource</b>.
        <args>
          <dt> <i>database</i> <dd> A <b>resource-database</b>.
          <dt> <i>path-name</i> <dd> The path list from a complete resource name. <i>path-name</i> and <i>path-class</i>must have the same length.
          <dt> <i>path-class</i> <dd> The path list from a complete resource class. <i>path-name</i> and <i>path-class</i> must have the same length.
      </defun>

      <defun>
        <name> get-search-resource
        <ll>   <i>table attribute-name attribute-class</i>
        <kind> Function
        <returns>
          <dt> <i>value</i> <dd> Type <b>t</b>.
        <desc>
          <p>
            Returns the value of the resource binding in the search <i>table</i>
            that most closely matches the <i>attribute-name</i> and
            <i>attribute-class</i>. The <i>table</i> is computed by
            <b>get-search-table</b> and represents a set of resource
            bindings. The closest match is determined by the same algorithm used
            in <b>get-resource</b>.
          <p>
            The following two forms are functionally equivalent:
          <pre>
(get-resource
  database attribute-name attribute-class path-name path-class)

(get-search-resource
 (get-search-table database path-name path-class)
 attribute-name attribute-class)
          </pre>
          <p>
            However, the hard part of the search is done by
            <b>get-search-table</b>. Looking up values for several resource
            attributes that share the same path list can be done much more
            efficiently with calls to <b>get-search-resource</b>.
        <args>
          <dt> <i>table</i> <dd> A search table returned by <b>get-search-table</b>.
          <dt> <i>attribute-name</i> <dd> A string or symbol giving an attribute name from a complete resource name.
          <dt> <i>attribute-class</i> <dd> A string or symbol giving an attribute class name from a complete resource class.
      </defun>

<h2>13.5 Resource Database Files</h2>

      <p>
        X users and application programs can save resource bindings in a file,
        using a standard file format shared by all X clients. The following
        paragraphs describe the CLX functions used to convert between the
        standard external format of resource files and the internal
        resource-database format used by application programs.

      <defun>
        <name> read-resources
        <ll>   <i>database pathname</i> &amp;key <b>:key :test :test-not</b>
        <kind> Function
        <returns>
          <dt> <i>database</i> <dd> Type <b>resource-database</b>.
        <desc>
          <p>
            Reads resource bindings from a resource file in standard X11 format
            and merges them with the given resource <i>database</i>. The
            <b>:key</b> function is called to convert a file resource value into
            the value stored in the <i>database</i>. By default, <b>:key</b> is
            <b>#'identity</b>. The <b>:test</b> and <b>:test-not</b> functions
            are predicates that select resource bindings to merge, based on the
            result of the <b>:key</b> function. For each file resource binding
            consisting of a <i>resource-name</i> and a <i>resource-value</i>,
            the <b>:test</b> (or <b>:test-not</b>) function is called with the
            arguments <i>resource-name</i> and (<b>funcall</b> <i>key
            resource-value</i>).
        <args>
          <dt> <i>database</i> <dd> The <b>resource-database</b> to merge.
          <dt> <i>pathname</i> <dd> A pathname for the resource file to read.
          <dt> <b>:key</b> <dd> A function used to convert a value from the resource file into a resource binding value.
          <dt> <b>:test</b>, <b>:test-not</b> <dd> Functions used to select which resource bindings from the resource file are merged with the <i>database</i>.
      </defun>

      <defun>
        <name> write-resources
        <ll>   <i>database pathname</i> &amp;key <b>:write :test :test-not</b>
        <kind> Function
        <desc>
          <p>
            Writes resource bindings found in the <i>database</i> to the file
            given by the <i>pathname</i>. The output file is written in the
            standard X11 format. The <b>:write</b> function is used for writing
            resource values; the default is <b>#'princ</b>. The <b>:write</b>
            function is passed two arguments: a <i>resource-value</i> and a
            <i>stream</i>. The <b>:test</b> and <b>:test-not</b> functions are
            predicates which select resource bindings to write. For each
            resource binding consisting of a <i>resource-name</i> and a
            <i>resource-value</i>, the <b>:test</b> (or <b>:test-not</b>)
            function is called with the arguments <i>resource-name</i> and
            <i>resource-value</i>.
        <args>
          <dt> <i>database</i> <dd> The <b>resource-database</b> to write.
          <dt> <i>pathname</i> <dd> A pathname of the file to write.
          <dt> <b>:write</b> <dd> A function for writing resource values.
          <dt> <b>:test</b>, <b>:test-not</b> <dd> Functions used to select which resource bindings from the resource file are merged with the <i>database</i>.
      </defun>

<h1>14 Control Functions</h1>

<h2>14.1 Grabbing the Server</h2>

      <p>
        Certain cases may require that a client demand exclusive access to the
        server, causing the processing for all other clients to be
        suspended. Such exclusive access is referred to as <i>grabbing the
        server</i>. CLX provides functions to grab and release exclusive access
        to the server. These function should be used rarely and always with
        extreme caution, since they have the potential to disrupt the entire
        window system for all clients.

      <defun>
        <name> grab-server
        <ll>   <i>display</i>
        <kind> Function
        <desc>
          <p>
            Disables processing of requests and close-downs on all connections
            other than the one on which this request arrived.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> ungrab-server
        <ll>   <i>display</i>
        <kind> Function
        <desc>
          <p>
            Restarts processing of requests and close-downs on other
            connections.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> with-server-grabbed
        <ll>   <i>display</i> &amp;body <i>body</i>
        <kind> Macro
        <desc>
          <p>
            Grabs the <i>display</i> server only within the dynamic extent of
            the <i>body</i>. <b>ungrab-server</b> is automatically called upon
            exit from the <i>body</i>. This macro provides the most reliable way
            for CLX clients to grab the server.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <i>body</i> <dd> The forms to execute while the server is grabbed.
      </defun>

<h2>14.2 Pointer Control</h2>

      <p>
        The following paragraphs describe the CLX functions used to:
      <ul>
        <li> Return or change the pointer acceleration and acceleration threshold
        <li> Return or change the mapping of pointer button numbers
      </ul>

      <defun>
        <name> change-pointer-control
        <ll>   <i>display</i> &amp;key <b>:acceleration :threshold</b>
        <kind> Function
        <desc>
          <p>
            Changes the acceleration and/or the acceleration threshold of the
            pointer for the <i>display</i>.  The <b>:acceleration</b> number is
            used as a multiplier, typically specified as a rational number of
            the form <i>C/P</i>, where <i>C</i> is the number of pixel positions
            of cursor motion displayed for <i>P</i> units of pointer device
            motion. The acceleration only occurs if the pointer moves more that
            <b>:threshold</b> pixels at once, and only applies to the motion
            beyond the <b>:threshold</b>. Either <b>:acceleration</b> or
            <b>:threshold</b> can be set to <b>:default</b>, that restores the
            default settings of the server.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <b>:acceleration</b> <dd> A number for the acceleration ratio.
          <dt> <b>:threshold</b> <dd> The number of pixels required for acceleration to take effect.
      </defun>

      <defun>
        <name> pointer-control
        <ll>   <i>display</i>
        <kind> Function
        <returns>
          <dt> <i>acceleration</i>, <i>threshold</i> <dd> Type <b>number</b>.
        <desc>
          <p>
            Returns the acceleration and threshold for the <i>display</i>
            pointer.
        <args>
          <dt> <i>displa</i>y <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> pointer-mapping
        <ll>   <i>display</i> &amp;key (<b>:result-type 'list</b>)
        <kind> Function
        <returns>
          <dt> <i>mapping</i> <dd> Type <b>sequence</b> or <b>card8</b><i>.</i>
        <desc>
          <p>
            Returns or (with <b>setf</b>) changes the mapping of button numbers
            for the <i>display</i> pointer.  The <b>:result-type</b> is not used
            when changing the mapping. If element <i>i</i> of the mapping
            sequence is <i>j</i>, then the events from pointer button <i>j</i>
            are reported by the server as events for button <i>i</i>+1. (Note
            that pointer buttons are numbered beginning with one, while the
            mapping sequence itself is indexed normally from zero.) If element
            <i>i</i> of the mapping sequence is zero, then button <i>i</i>+1 is
            disabled and can no longer generate input events. No two elements of
            the mapping can have the same non-zero value.
          <p>
            The length of the mapping sequence indicates the actual number of
            buttons on the device. When changing the mapping, the new mapping
            must have this same length.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <b>:result-type</b> <dd> The type of sequence to return.
      </defun>

      <h2>14.3 Keyboard Control</h2>
      
      <p>
        The following paragraphs describe the CLX functions used to:
      <ul>
        <li> Return or change keyboard controls
        <li> Ring the keyboard bell
        <li> Return or change the mapping of modifiers
        <li> Return the current up/down state of all keys
      </ul>

      <defun>
        <name> bell
        <ll>   <i>display</i> &amp;optional (<i>percent-from-normal</i> 0)
        <kind> Function
        <desc>
          <p>
            Rings the bell on the keyboard at a volume relative to the base volume for the keyboard,
            if possible. Percent can range from -100 to 100 inclusive, or else a Value error occurs.
            The following is the bell volume when percent is non-negative:
          <p align=center>
                             (- (+ <i>base percent</i>) (<b>quotient</b> (* <i>base percent</i>) 100))
          <p>
            and when percent is negative:
          <p align=center>
            (+ <i>base</i> (<b>quotient</b> (* <i>base percent</i>) 100))
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <i>percent-from-normal</i> <dd> An integer (-100 through 100).
      </defun>

      <defun>
        <name> change-keyboard-control
        <ll>
          <i>display</i> &amp;key <b>:key-click-percent :bell-percent</b> 
          <b>:bell-pitch :bell-duration :led :led-mode :key :auto-repeat-mode</b>
        <kind> Function
        <desc>
          <p>
            Changes the various aspects of the keyboard. The keyword arguments
            specify which controls to change.
          <p>
            The <b>:key-click-percent</b> keyword sets the volume for key
            clicks, if possible. A value of 0 implies off, while a value of 100
            implies loud. Setting <b>:key-click-percent</b> to <b>:default</b>
            restores the default value.
          <p>
            The <b>:bell-percent</b> sets the base volume for the bell between 0
            (off) and 100 (loud) if possible. Setting <b>:bell-percent</b> to
            <b>:default</b> restores the default value.
          <p>
            The <b>:bell-pitch</b> sets the pitch (specified in Hz) of the bell,
            if possible. Setting the <b>:bell-pitch</b> to <b>:default</b>
            restores the default value. The <b>:bell-duration</b> sets the
            duration ( specified in milliseconds) of the bell, if
            possible. Setting <b>:bell-pitch</b> to <b>:default</b> restores the
            default. Note that a bell generator connected with the console but
            not directly on the keyboard is treated as if it were part of the
            keyboard.
          <p>
            If both <b>:led-mode</b> and <b>:led</b> are specified, then the
            state of that LED is changed, if possible. If only <b>:led-mode</b>
            is specified, the state of all LEDs are changed, if possible. At
            most 32 LEDs are supported, numbered from one. No standard
            interpretation of the LEDs are defined.
          <p>
            If both <b>:auto-repeat-mode</b> and <b>:key</b> are specified, the
            auto-repeat mode of that key is changed, if possible. If only
            <b>:auto-repeat-mode</b> is specified, the global auto-repeat mode
            for the entire keyboard is changed, if possible, without affecting
            the per-key settings. An error occurs if <b>:key</b> is specified
            without <b>:auto-repeat-mode</b>.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <b>:key-click-percent</b> <dd> An integer (0 100).
          <dt> <b>:bell-percent</b> <dd> An integer (0 100).
          <dt> <b>:bell-pitch</b> <dd> A <b>card16</b>.
          <dt> <b>:bell-duration</b> <dd> A <b>card16</b>.
          <dt> <b>:led</b> <dd> A <b>card8</b>.
          <dt> <b>:led-mode</b> <dd> Either <b>:on</b> or <b>:off</b>.
          <dt> <b>:key</b> <dd> A <b>card8</b> keycode.
          <dt> <b>:auto-repeat-mode</b> <dd> Either <b>:on</b>, <b>:off</b>, or <b>:default</b>.
      </defun>

      <defun>
        <name> keyboard-control
        <ll>   <i>display</i>
        <kind> Function
        <returns>
          <dt> <i>key-click-percent, bell-percent</i> <dd> Type <b>card8</b>.
          <dt> <i>bell-pitch bell-duration</i> <dd> Type <b>card16</b>.
          <dt> <i>led-mask</i> <dd> Type <b>card32</b>.
          <dt> <i>global-auto-repeat</i> <dd> Either <b>:on</b> or <b>:off</b>.
          <dt> <i>auto-repeats</i> <dd> Type <b>bit-vector</b>.
        <desc>
          <p>
            Returns the current control values for the keyboard. For the LEDs,
            the least significant bit of <i>led-mask</i> corresponds to LED one,
            and each one bit in <i>led-mask</i> indicates an LED that is
            lit. <i>auto-repeats</i> is a bit vector; each one bit indicates
            that auto-repeat is enabled for the corresponding key. The vector is
            represented as 32 bytes. Byte <i>n</i> (from 0) contains the bits
            for keys 8<i>n</i> to 8<i>n</i>+7, with the least significant bit in
            the byte representing key 8<i>n</i>.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> modifier-mapping
        <ll>   <i>display</i>
        <kind> Function
        <returns>
          <dt><i>shift-keycodes</i>, <i>lock-keycodes</i>, <i>control-keycodes</i>, <i>mod1-keycodes</i>,
            <i>mod2-keycodes</i>, <i>mod3-keycodes</i>, <i>mod4-keycodes</i>, <i>mod5-keycodes</i> <dd>
            Type <b>list</b> of <b>card8</b>.
        <desc>
          <p>
            Returns the set of keycodes used for each modifier on the
            <i>display</i> keyboard. Each return value is a list of the
            <b>card8</b> keycodes used for each modifier key. The order of
            keycodes within each list is server-dependent.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> query-keymap
        <ll>   <i>display</i>
        <kind> Function
        <returns>
          <dt> <i>keymap</i> <dd> Type <b>bit-vector</b> 256.
        <desc>
          <p>
            Returns a bit vector that describes the state of the keyboard. Each
            one bit indicates that the corresponding key is currently
            pressed. The vector is represented as 32 bytes. Byte <i>n</i> (from
            0) contains the bits for keys 8<i>n</i> to 8<i>n</i>+7, with the
            least significant bit in the byte representing key 8<i>n</i>.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> set-modifier-mapping
        <ll>
          <i>display</i> &amp;key <b>:shift :lock :control :mod1 :mod2</b> 
          <b>:mod3 :mod4 :mod5</b>
        <kind> Function
          <returns>
            <dt> <i>status</i> <dd> One of <b>:success</b>, <b>:failed</b>, or <b>:device-busy</b>.
        <desc>
          <p>
            Changes the set of keycodes mapped to the specified modifier keys on
            the <i>display</i> keyboard. Each keyword argument contains a
            sequence of new <b>card8</b> keycodes for a specific modifier. The
            return value indicates whether the change was completed
            successfully.
          <p>
            A status of <b>:failed</b> is returned if hardware limitations
            prevent the requested change. For example, multiple keycodes per
            modifier may not be supported, up transitions on a given keycode may
            not be supported, or autorepeat may be mandatory for a given
            keycode. If <b>:failed</b> is returned, the mappings for all
            modifiers remain unchanged.
          <p>
            A status of <b>:device-busy</b> is returned if a new keycode given
            for a modifier was not previously mapped to that modifier and is
            currently in the down state. In this case, the mappings for all
            modifiers remain unchanged.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <b>:shift</b>, <b>:lock</b>, <b>:control</b>, <b>:mod1</b>, <b>:mod2</b>, <b>:mod3</b>, <b>:mod4</b>, <b>:mod5</b> <dd> A sequence of <b>card8</b> keycodes for the given modifier.
      </defun>

<h2 name=keyboard-encodings>14.4 Keyboard Encodings</h2>

      <p>
        Handling the great diversity of keyboard devices and international
        language character encodings is a difficult problem for interactive
        programs that need to receive text input but must also be portable. The
        X Window System solves this problem by using different sets of encodings
        for device keys (<i>keycodes</i>) and for character symbols
        (<i>keysyms</i>). Each X server maintains a <i>keyboard mapping</i> that
        associates keycodes and keysyms, and which can be returned or changed by
        client programs.
      <p>
        To handle text input, a CLX client program must follow these steps:
      <ol>
        <li>
          Receive a <b>:key-press</b> (or <b>:key-release</b>) event containing
          a keycode.
        <li>
          Convert the keycode into its corresponding keysym, based on the
          current keyboard mapping. See <b>keycode-keysym</b>.
        <li>
          Convert the keysym into the corresponding Common Lisp character. See
          <b>keysym-character</b>.
      </ol>

      <h3>14.4.1 Keycodes and Keysyms</h3>

      <p>
        A <i>keycode</i> represents a physical (or logical) key. In CLX,
        keycodes are values of type (<b>integer</b> 8 255). A keycode value
        carries no intrinsic information, although server implementors may
        attempt to encode geometry (for example, matrix) information in some
        fashion so it can be interpreted in a server- dependent fashion. The
        mapping between keys and keycodes cannot be changed.
      <p>
        A <i>keysym</i> is an encoding of a symbol on the cap of a key. In CLX,
        keysyms are values of type <b>card32</b>. The set of defined keysyms
        include the ISO Latin character sets (1-4), Katakana, Arabic, Cyrillic,
        Greek, Technical, Special, Publishing, APL, Hebrew, and miscellaneous
        keys found on keyboards (RETURN, HELP, TAB, and so on). The encoding of
        keysyms is defined by the X Protocol.
      <p>
        A list of keysyms is associated with each keycode. The length of the
        list can vary with each keycode. The list is intended to convey the set
        of symbols on the corresponding key. By convention, if the list contains
        a single keysym and if that keysym is alphabetic and case distinction is
        relevant, then it should be treated as equivalent to a two-element list
        of the lowercase and uppercase keysyms. For example, if the list
        contains the single keysym for uppercase A, the client should treat it
        as if it were a pair with lowercase as the first keysym and uppercase A
        as the second keysym.
      <p>
        For any keycode, the first keysym in the list should be chosen as the
        interpretation of a key press when no modifier keys are down. The second
        keysym in the list normally should be chosen when the <b>:shift</b>
        modifier is on, or when the <b>:lock</b> modifier is on and <b>:lock</b>
        is interpreted as <b>:shift-lock</b>. When the <b>:lock</b> modifier is
        on and is interpreted as <b>:caps-lock</b>, it is suggested that the
        <b>:shift</b> modifier first be applied to choose a keysym, but if that
        keysym is lowercase alphabetic, the corresponding uppercase keysym
        should be used instead.
      <p>
        Other interpretations of <b>:caps-lock</b> are possible; for example, it
        may be viewed as equivalent to <b>:shift-lock</b>, but only applying
        when the first keysym is lowercase alphabetic and the second keysym is
        the corresponding uppercase alphabetic. No interpretation of keysyms
        beyond the first two in a list is suggested here. No spatial geometry of
        the symbols on the key is defined by their order in the keysym list,
        although a geometry might be defined on a vendor-specific basis. The X
        server does not use the mapping between keycodes and keysyms. Rather,
        the X server stores the mapping merely for reading and writing by
        clients.

      <h3>14.4.2 Keyboard Mapping</h3>
      <p>
        The X server maintains a keyboard mapping that associates each keycode
        with one or more keysyms. The following paragraphs describe the CLX
        functions used to return or change the mapping of keycodes.

      <defun>
        <name> change-keyboard-mapping
        <ll>
          <i>display keysyms</i> &amp;key (<b>:start</b> 0) <b>:end</b>
          (<b>:first-keycode :start</b>)
        <kind> Function
        <desc>
          <p>
            Changes the mapping of keycodes to <i>keysyms</i>. A
            <b>:mapping-notify</b> event is generated for all clients.
          <p>
            The new <i>keysyms</i> are specified as a two-dimensional array in
            which:
          <p>
            (<b>aref</b> <i>keysyms</i> (+ <b>:start</b> <i>i</i>) <i>j</i>)
          <p>
            is <i>keysym j</i> associated with keycode (+ <b>:first-keycode</b>
            <i>i</i>). The maximum number of <i>keysyms</i> associated with any
            one keycode is given by:
          <p>
            (<b>array-dimension</b> <i>keysyms</i> 1)
          <p>
            <i>keysyms</i> should contain <b>nil</b> elements to represent those
            keysyms that are undefined for a given keycode. <b>:start</b> and
            <b>:end</b> define the subsequence of the <i>keysyms</i> array that
            defines the new mapping, and the number of keycode mappings
            changed. By default, <b>:end</b> is given by:
          <p>
            (<b>array-dimension</b> <i>keysyms</i> 0)
          <p>
            The keycodes whose mappings are changed are given by
            <b>:first-keycode</b> through the following:
          <p>
            (+ <b>:first-keycode</b> (- <b>:end :start</b>) -1)
          <p>
            keycodes outside this range of are not
            affected. <b>:first-keycode</b> must not be less than
            (<b>display-min-keycode</b> <i>display</i>), and the last keycode
            modified must not be greater than (<b>display-max-keycode</b>
            <i>display</i>).
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <i>keysyms</i> <dd> A two-dimensional array of keysym (<b>card32</b>) values.
          <dt> <b>:start</b>, <b>:end</b> <dd> Indexes for the subsequence of <i>keysyms</i> used.
          <dt> <b>:first-keycode</b> <dd> A <b>card8</b> defining the first keycode mapping changed.
      </defun>

      <defun>
        <name> keyboard-mapping
        <ll>   <i>display</i> &amp;key <b>:first-keycode :start :end :data</b>
        <kind> Function
        <returns>
          <dt> <i>mappings</i> <dd> Type (<b>array card32</b> (* *)).
        <desc>
          <p>
            Returns the keysyms mapped to the given range of keycodes for the
            <i>display</i> keyboard.  The mappings are returned in the form of a
            two-dimensional array of <b>card32</b> keysym values. The
            <b>:data</b> argument, if given, must be a two-dimensional array in
            which the returned mappings will be stored. In this case:
          <p>
            (<b>array-dimension :data</b> 1)
          <p>
            defines the maximum number of keysyms returned for any
            keycode. Otherwise, a new array is created and returned.
          <p>
            Upon return:
          <p>
            (<b>aref</b> <i>mappings</i> (+ <i>:start i</i>) <i>j</i>)
          <p>
            will contain keysym <i>j</i> associated with keycode (+
            <b>:first-keycode i</b>) (or <b>nil</b>, if keysym <i>j</i> is
            undefined for that keycode).
          <p>
            <b>:first-keycode</b> specifies the first keycode whose mapping is
            returned; by default, <b>:first-keycode</b> is
            (<b>display-min-keycode</b> <i>display</i>). <b>:start</b> and
            <b>:end</b> define the subsequence of the returned array in which
            the returned mappings are stored. By default, <b>:start</b> is given
            by <b>:first-keycode</b> and <b>:end</b> is given by:
          <p>
            (1+ (<b>display-max-keycode</b> <i>display</i>))
          <p>
            <b>:first-keycode</b> must not be less than
            (<b>display-min-keycode</b> <i>display</i>), and the last keycode
            returned must not be greater than (<b>display-max-keycode</b>
            <i>display</i>).
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <b>:first-keycode</b> <dd> A <b>card8</b> defining the first keycode mapping returned.
          <dt> <b>:start</b>, <b>:end</b> <dd> Indexes for the subsequence of the returned array which is modified.
          <dt> <b>:data</b> <dd> If given, a two-dimensional array to receive the returned keysyms.
      </defun>

<h3>14.4.3 Using Keycodes and Keysyms</h3>
      
      <p>
        The following paragraphs describe the CLX functions used to:
      <ul>
        <li> Convert a keycode into a keysym
        <li> Convert a keysym into a character
      </ul>

      <defun>
        <name> keycode-keysym
        <ll>   <i>display keycode keysym-index</i>
        <kind> Function
        <returns>
          <dt> <i>keysym</i> <dd> Type <b>keysym</b>.
        <desc>
          <p>
            Returns the <i>keysym</i> at the given <i>keysym-index</i> from the
            keysym list for the <i>keycode</i> in the current keyboard mapping
            for the <i>display</i> server.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <i>keycode</i> <dd> A <b>card8</b>.
          <dt> <i>keysym-index</i> <dd> A <b>card8</b>.
      </defun>

      <defun>
        <name> keycode-character
        <ll>   <i>display keysym</i> &amp;optional (<i>state</i> 0)
        <kind> Function
        <returns>
          <dt> <i>character</i> <dd> Type <b>character</b> or <b>null</b>.
        <desc>
          <p>
            Returns the <i>character</i> associated with the <i>keysym</i> and
            the <i>state</i>. The <i>state</i> is a <b>mask16</b> bit mask
            representing the state of the <i>display</i> modifier keys and
            pointer buttons. See <b>state-mask-key</b> in <ref name=datatypes>. If the <i>keysym</i> does not represent a Common Lisp
            character, then <b>nil</b> is returned.
          <p>
            The <i>state</i> determines the bits attribute of the returned
            <i>character</i>, as follows:
          <table border=0>
            <tr><td><b>:control</b>      <td><b>char-control-bit</b>
            <tr><td><b>:mod-1</b>        <td><b>char-meta-bit</b>
            <tr><td><b>:mod-2</b>        <td><b>char-super-bit</b>
            <tr><td><b>:mod-3</b>        <td><b>char-hyper-bit</b>
          </table>
          <!-- Of course *we* know that this mapping is bull shit! -->
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <i>keysym</i> <dd> A <b>keysym</b>.
          <dt> <i>state</i> <dd> A <b>mask16</b>.
      </defun>

<h2 name=client-termination>14.5 Client Termination</h2>

      <p>
        The CLX functions affecting client termination are discussed in the
        following paragraphs.
      <p>
        When a display connection to an X server is closed, whether by an
        explicit call to <b>close-display</b> or by some external condition, the
        server automatically performs a sequence of operations to clean up
        server state information associated with the closed connection.  The
        effect of these operations depends the <i>close-down mode</i> and the
        <i>save-set</i> that the client has specified for the closed display
        connection. The close-down mode of a display determines whether server
        resources allocated by the connection are freed or not. The save-set
        identifies windows that will remain after the connection is closed.
      <p>
        The display save-set is used primarily by window managers that reparent
        the top-level windows of other clients. For example, such a window
        manager can automatically create a frame window that encloses a
        top-level client window, along with a set of controls used for window
        management. Ordinarily, termination of the window manager client would
        then destroy all client windows! However, the window manager can prevent
        this by adding to its save-set those windows created by other clients
        that should be preserved.
      <p>
        When a display connection closes, an X server performs the following
        operations:
      <ol>
        <li>
          For each selection owned by a window created on the connection, the
          selection owner is set to <b>nil</b>.
        <li>
          An active or passive grab established for a window created on the
          connection is released.
        <li>
          If the connection has grabbed the server, the server is ungrabbed.
        <li>
          Server resources and colormap cells allocated by the connection are
          freed and destroyed, depending on the close-down mode, as follows:
          <ul>
            <li>
              <b>:retain-permanent</b> -- All resources are marked
              <i>permanent</i>, and no resources are destroyed. These resources
              can later be destroyed by a call to <b>kill-client</b>.
            <li>
              <b>:retain-temporary</b> -- All resources are marked
              <i>temporary</i>, and no resources are destroyed. These resources
              can later be destroyed by a call to <b>kill-client</b> or
              <b>kill-temporary-clients</b>.
            <li>
              <b>:destroy</b> -- All resources are destroyed.
          </ul>
      </ol>
      <p>
        When server resources allocated by a display connection are destroyed --
        whether by closing the connection with close-down mode <b>:destroy</b>
        or by later calling <b>kill-client</b> or <b>kill-temporary-clients</b>
        -- then an X server performs the following operations on each member of
        the save-set before actually destroying resources.
      <ol>
        <li>
          If the save-set window is a descendant of a window created on the
          connection, the save-set window is reparented. The new parent is the
          closest ancestor such that the save-set window is no longer a
          descendant of any window created on the connection. The position of
          the reparented window with respect to its parent remains unchanged.
        <li>
          If the save-set window is unmapped, then it is mapped.
      </ol>
      <p>
        If the last connection open to an X server is closed with close-down
        mode <b>:destroy</b>, the server resets its state to restore all initial
        defaults. The server state after reset is the same as its initial state
        when first started. When an X server resets, it performs the following
        operations:
      <ul>
        <li>
          All permanent and temporary server resources from previously-closed
          connections are destroyed.
        <li>
          All but the predefined atoms are deleted.
        <li>
          All root window properties are deleted.
        <li>
          All device control attributes and mappings are restored to their
          original default values.
        <li>
          The default background and cursor for all root windows are restored.
        <li>
          The default font path is restored.
        <li>
          The input focus is set to <b>:pointer-root</b>.
        <li>
          The access control list is reset.
      </ul>
      <p>
        The following paragraphs describe the CLX functions used to:
      <ul>
        <li>
          Add or remove a window from a display save-set.
        <li>
          Return or change the display close-down mode.
        <li>
          Force a connection to be closed or all its server resources to be
          destroyed.
        <li>
          Force a connection to be closed and all temporary resources to be
          destroyed.
      </ul>

      <defun>
        <name> add-to-save-set
        <ll>   <i>window</i>
        <kind> Function
        <desc>
          <p>
            Adds the specified <i>window</i> to the save-set of the
            <i>window</i> display. The <i>window</i> must have been created by
            some other display. Windows are removed automatically from the
            save-set when they are destroyed.
        <args>
          <dt> <i>window</i> <dd> A <b>window</b>.
      </defun>

      <defun>
        <name> close-down-mode
        <ll>   <i>display</i>
        <kind> Function
        <returns>
          <dt> <i>mode</i> <dd> One of <b>:destroy</b>, <b>:retain-permanent</b>, or <b>:retain-temporary</b>.
        <desc>
          <p>
            Returns and (with <b>setf</b>) sets the close-down mode of the
            client's resources at connection close.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> kill-client
        <ll>   <i>display resource-id</i>
        <kind> Function
        <desc>
          <p>
            Closes the display connection which created the given
            <i>resource-id</i>. The <i>resource-id</i> must be valid, but need
            not belong to the given <i>display</i>.
          <p>
            If the closed connection was previously open, the connection is
            closed according to its close-down mode. Otherwise, if the
            connection had been previously terminated with close-down mode
            <b>:retain-permanent</b> or <b>:retain-temporary</b>, then all its
            retained server resources -- both permanent and temporary -- are
            destroyed.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <i>resource-id</i> <dd> A valid <b>card29</b> resource ID.
      </defun>

      <defun>
        <name> kill-temporary-clients
        <ll>   <i>display</i>
        <kind> Function
        <desc>
          <p>
            Closes the <i>display</i> connection and destroys all retained
            temporary server resources for this and all previously-terminated
            connections.
          <p>
            If the <i>display</i> connection was previously open, the connection
            is closed according to its close-down mode. Otherwise, if the
            <i>display</i> connection had been previously terminated with
            close-down mode <b>:retain-permanent</b> or
            <b>:retain-temporary</b>, then all its retained server resources --
            both permanent and temporary -- are destroyed.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> remove-from-save-set
        <ll>   <i>window</i>
        <kind> Function
        <desc>
          <p>
            Removes the specified <i>window</i> from the save-set of the
            <i>window</i> display. The <i>window</i> must have been created by
            some other display. Windows are removed automatically from the
            save-set when they are destroyed.
        <args>
          <dt> <i>window</i> <dd> A <b>window</b>.
      </defun>

<h2>14.6 Managing Host Access</h2>

      <p>
        An X server maintains a list of hosts from which client programs can be
        run. Only clients executing on hosts that belong to this <i>access
        control list</i> are allowed to open a connection to the
        server. Typically, the access control list can be changed by clients
        running on the same host as the server. Some server implementations can
        also implement other authorization mechanisms in addition to, or in
        place of, this mechanism.  The action of this mechanism can be
        conditional based on the authorization protocol name and data received
        by the server at connection setup.
      <p>
        The following paragraphs describe the CLX functions used to:
      <ul>
        <li> Add or remove hosts on the access control list.
        <li> Return the hosts on the access control list.
        <li> Return or change the state of the access control list mechanism
      </ul>

      <defun>
        <name> access-control
        <ll>   <i>display</i>
        <kind> Function
        <returns>
          <dt> <i>enabled-p</i> <dd> Type <b>boolean</b>.
        <desc>
          <p>
            Returns and (with <b>setf</b>) changes the state of the access
            control list mechanism for the <i>display</i> server. Returns true
            if access control is enabled; otherwise, <b>nil</b> is returned. If
            enabled, the access control list is used to validate each client
            during connection setup.
          <p>
            Only a client running on the same host as the server is allowed to
            enable or disable the access control list mechanism.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> access-hosts
        <ll>      <i>display</i> &amp;key (<b>:result-type 'list</b>)
        <kind> Function
        <returns>
          <dt> <i>hosts</i> <dd> <b>sequence</b> of <b>string</b>.
          <dt> <i>enabled-p</i> <dd> Type <b>boolean</b>.
        <desc>
          <p>
            Returns a sequence containing the <i>hosts</i> that belong to the
            access control list of the <i>display</i> server. Elements of the
            returned <i>hosts</i> sequence are either strings or some other type
            of object recognized as a host name by <b>add-access-host</b> and
            <b>remove-access-host</b>.  The second returned value specifies
            whether the access control list mechanism is currently enabled or
            disabled (see <b>access-control</b>).
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <b>:result-type</b> <dd> The type of hosts sequence to return.
      </defun>

      <defun>
        <name> add-access-host
        <ll>   <i>display host</i>
        <kind> Function
        <desc>
          <p>
            Adds the specified <i>host</i> to the access control list. Only a
            client running on the same host as the server can change the access
            control list.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <i>host</i> <dd> A host name. Either a string or some other implementation-dependent type.
      </defun>

      <defun>
        <name> remove-access-host
        <ll>   <i>display host</i>
        <kind> Function
        <desc>
          <p>
            Removes the specified <i>host</i> from the access control list. Only
            a client running on the same host as the server can change the
            access control list.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <i>host</i> <dd> A host name. Either a string or some other implementation-dependent type.
      </defun>

<h2>14.7 Screen Saver</h2>

      <p>
        To prevent monitor damage, an X server implements a screen saver
        function which blanks screens during periods of unuse. The screen saver
        can be in one of three states:
      <ul>
        <li>
          Disabled -- No screen blanking is done and screen content remains unchanged.
        <li>
          Deactivated -- The server is being used. When the server input devices
          are unused for a specific amount of time, the screen saver becomes
          activated.
        <li>
          Activated -- The server input devices are unused. The screen saver
          blanks all server screens or displays a server-dependent image. As
          soon as an input event from either the pointer or the keyboard occurs,
          the screen saver is deactivated and its timer is reset.
      </ul>
      <p>
        The following paragraphs describe the CLX functions used to:
      <ul>
        <li>
          Return or change screen saver control values.
        <li>
          Activate or reset the screen saver
      </ul>

      <defun>
        <name> activate-screen-saver
        <ll>   <i>display</i>
        <kind> Function
        <desc>
          <p>
            Activates the screen saver for the <i>display</i> server.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> reset-screen-saver
        <ll>   <i>display</i>
        <kind> Function
        <desc>
          <p>
            Deactivates the screen saver for the <i>display</i> server (if
            necessary) and resets its timer, just as if a pointer or keyboard
            event had occurred.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> screen-saver
        <ll>   <i>display</i>
        <kind> Function
        <returns>
          <dt> <i>timeout</i>, <i>period</i> <dd> Type <b>int16</b>.
          <dt> <i>blanking</i>, <i>exposures</i> <dd> One of <b>:yes</b> or <b>:no</b>.
        <desc>
          <p>
            Returns the current control values for the <i>display</i> server
            screen saver. See <b>set-screen-saver</b>.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
      </defun>

      <defun>
        <name> set-screen-saver
        <ll>   <i>display timeout period blanking exposures</i>
        <kind> Function
        <desc>
          <p>
            Changes the current control values for the <i>display</i> server
            screen saver. The screen saver is reset. The screen saver is also
            disabled if:
          <ul>
            <li>
              <i>timeout</i> is zero, or
            <li>
              Both <i>blanking</i> and <i>exposures</i> are disabled and the
              server cannot regenerate the screen contents without sending
              <b>:exposure</b> events.
          </ul>
          <p>
            The <i>timeout</i> specifies the (non-negative) number of seconds of
            input device inactivity that must elapse before the screen saver is
            activated. The <i>timeout</i> can be set to <b>:default</b> to
            restore the server default timeout interval.
          <p>
            If <i>blanking</i> is <b>:yes</b> and the screen hardware supports
            blanking, blanking is enabled; that is, the screen saver will simply
            blank all screens when it is activated. <i>blanking</i> can be set
            to <b>:default</b> to restore the server default state for blanking.
          <p>
            If <i>exposures</i> is <b>:yes</b>, exposures are enabled. If
            exposures are enabled, or if the server is capable of regenerating
            screen contents without sending <b>:exposure</b> events, the screen
            saver will display some server-dependent image when
            activated. Frequently, this image will consist of a repeating
            animation sequence, in which case <i>period</i> specifies the (
            non-negative) number of seconds for each repetition. A <i>period</i>
            of zero is a hint that no repetition should occur.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <i>timeout</i> <dd> Specifies the delay until timeout takes over.
          <dt> <i>period</i> <dd> Specifies the periodic change interval, if used.
          <dt> <i>blanking</i> <dd> Specifies whether the blanking option is available.
          <dt> <i>exposures</i> <dd> Specifies whether exposures are allowed during blanking.
      </defun>


<h1>15 Extensions</h1>
<h2>15.1 Extensions</h2>

      <p>
        The X Window System is based on a core protocol which can be extended to
        provide new functionality. An extension is generally represented by an
        additional set of requests or event types that are implemented by an X
        server supporting the extension.  By definition, a client program using
        an extension may not be portable to other servers.  However, extensions
        allow different server implementations and different sites to add their
        own special features to X, without disrupting clients that rely only on
        the core protocol.
      <p>
        Extensions are identified by assigning them unique name strings and
        major protocol numbers. A client program can request an X server to use
        a protocol extension by furnishing the extension protocol number as an
        argument to <b>open-display</b>. The X Consortium maintains a registry
        of standard extension names and protocol numbers.
      <p>
        The following paragraphs describe the CLX functions used to:
      <ul>
        <li> List all supported extensions.
        <li> Find out if a given extension is supported.
      </ul>


      <defun>
        <name> list-extensions
        <ll>   <i>display</i> &amp;key (<b>:result-type 'list</b>)
        <kind> Function
        <returns>
          <dt> <i>names</i> <dd> Type <b>sequence</b> of <b>string</b>.
        <desc>
          <p>
            Returns a sequence containing the <i>names</i> of all extensions
            supported by the <i>display</i> server.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <b>:result-type</b> <dd> The type of name sequence to return.
      </defun>

      <defun>
        <name> query-extension
        <ll>   <i>display name</i>
        <kind> Function
        <returns>
          <dt> <i>major-opcode</i>, <i>first-event</i>, <i>first-error</i> <dd> Type <b>card8</b> or <b>null</b>.
        <desc>
          <p>
            Returns the <i>major-opcode</i> for the given extension <i>name</i>
            support by the <i>display</i> server. If the extension is not
            supported, only <b>nil</b> values are returned. The extension
            <i>name</i> must contain only ISO Latin-1 characters; case is
            significant.
          <p>
            If the extension involves additional event types, the
            <i>first-event</i> returned is the base event type code for new
            events; otherwise, the <i>first-event</i> is <b>nil</b>. If the
            extension involves additional error codes, the <i>first-error</i>
            returned is the base code for new errors; otherwise, the
            <i>first-error</i> is <b>nil</b>. The formats of error and event
            messages sent by the server are completely defined by the extension.
        <args>
          <dt> <i>display</i> <dd> A <b>display</b>.
          <dt> <i>name</i> <dd> An extension name string.
      </defun>

<h1 name=errors>16 Errors</h1>

<h2>16.1 Introduction</h2>

      <p>
        CLX error conditions are hierarchial. The base error condition is
        <b>x-error</b>, and all other conditions are built on top of
        <b>x-error</b>. <b>x-error</b> can be built on a lower-level condition
        that is implementation dependent (this is probably the <b>error</b>
        condition).

      <defun>
        <name> define-condition
        <ll>   <i>name</i> (<i>parent-types</i>*) [({<i>slot-specifier</i>*}) {<i>option</i>*}]
        <kind> Macro
        <desc>
          <p>
            Any new condition type must be defined with the
            <b>define-condition</b> macro. A condition type has a name, parent
            types, report message, and any number of slot items. See the
            <i>Lisp</i> <i>Reference</i> manual for further information
            regarding <b>define-condition</b>.
          <p>
            The following are the predefined error conditions that can occur in CLX.
      </defun>

      <defun>
        <name> access-error
        <kind> Condition
        <desc>
          <p>
            An <b>access-error</b> can occur for several reasons:
          <ul>
            <li>
              A client attempted to grab a key/button combination already
              grabbed by another client
            <li>
              A client attempted to free a colormap entry that it did not already allocate
            <li>
              A client attempted to store into a read-only colormap entry
            <li>
              A client attempted to modify the access control list from other
              than the local (or otherwise authorized) host
            <li>
              A client attempted to select an event type that another client
              has already selected, and, that at most, one client can select
              at a time
          </ul>
          <p>
            An <b>access-error</b> is a special case of the more general
            <b>request-error</b> (see <!--XXX-->page 16-189 for information on
            <b>request-error</b>).
      </defun>

      <defun>
        <name> alloc-error
        <kind> Condition
        <desc>
          <p>
            The server failed to allocate the requested resource or server memory.
          <p>
            An <b>alloc-error</b> is a special case of the more general
            <b>request-error</b> (see <!--XXX-->page 16-189 for information on
            <b>request-error</b>).
      </defun>

      <defun>
        <name> atom-error
        <kind> Condition
        <desc>
          <p>
            A value for an <i>atom</i> argument does not name a defined atom.
          <p>
            An <b>atom-error</b> is a special case of the more general
            <b>request-error</b> (see <!--XXX-->page 16-189 for information on
            <b>request-error</b>).
      </defun>

      <defun>
        <name> closed-display
        <kind> Condition
        <desc>
          <p>
            The <b>closed-display</b> condition is signaled when trying to read
            or write a closed display (that is, <b>close-display</b> has been
            called on the <b>display</b> object, or a server-disconnect
            occurred). The <b>closed-display</b> object is reported with the
            error.
          <p>
            A <b>closed-display</b> condition is a special case of the more
            general <b>x-error</b> (see <!--XXX-->page 16-190 for information on
            <b>x-error</b>).
      </defun>

      <defun>
        <name> colormap-error
        <kind> Condition
        <desc>
          <p>
            A value for a <i>colormap</i> argument does not name a defined
            colormap.
          <p>
            A <b>colormap-error</b> is a special case of the more general
            <b>resource-error</b> (see <!--XXX-->page 16-189 for information on
            <b>resource-error</b>).
      </defun>

      <defun>
        <name> connection-failure
        <kind> Condition
        <desc>
          <p>
            Signaled when an X11 server refuses a connection. The following
            items are reported along with the error:
          <ul>
            <li> <i>major-version</i> -- The major version of the X server code.
            <li> <i>minor-version</i> -- The minor version of the X server code.
            <li> <i>host</i> -- The host name for the X server.
            <li> <i>display</i> -- The display on which the error occurred.
            <li> <i>reason</i> -- A string indicating why the connection failed.
          </ul>
          <p>
            A <b>connection-failure</b> is a special case of the more general
            <b>x-error</b> (see <!--XXX-->page 16-190 for information on <b>x-error</b>).
      </defun>

      <defun>
        <name> cursor-error
        <kind> Condition
        <desc>
          <p>
            A value for a <i>cursor</i> argument does not name a defined cursor.
          <p>
            A <b>cursor-error</b> is a special case of the more general
            <b>resource-error</b> (see <!--XXX-->page 16-189 for information on
            <b>resource-error</b>).
      </defun>

      <defun>
        <name> device-busy
        <kind> Condition
        <desc>
          <p>
            Signaled by (<b>setf</b> (<b>pointer-mapping</b> <i>display</i>)
            <b>mapping</b>) when the <b>set-pointer-mapping</b> request returns
            a busy status. A similar condition occurs in
            <b>set-modifier-mapping</b>, but in this case, it returns a boolean
            indicating success, rather than signaling an error.  The
            <b>device-busy</b> condition returns the display object as part of
            the error.
          <p>
            A <b>device-busy</b> condition is a special case of the more general
            <b>x-error</b> (see <!--XXX-->page 16-190 for information on <b>x-error</b>).
      </defun>

      <defun>
        <name> drawable-error
        <kind> Condition
        <desc>
          <p>
            A value for a <i>drawable</i> argument does not name a defined window or pixmap.
          <p>
            A <b>drawable-error</b> is a special case of the more general <b>resource-error</b> (see <!--XXX-->page
            16-189 for information on <b>resource-error</b>).
      </defun>

      <defun>
        <name> font-error
        <kind> Condition
        <desc>
          <p>
            A value for a <i>font</i> or <i>gcontext</i> argument does not name a defined font.
          <p>
            A <b>font-error</b> is a special case of the more general
            <b>resource-error</b> (see <!--XXX-->page 16-189 for information on
            <b>resource-error</b>).
      </defun>

      <defun>
        <name> gcontext-error
        <kind> Condition
        <desc>
          <p>
            A value for a <i>gcontext</i> argument does not name a defined GContext.
          <p>
            A <b>gcontext-error</b> is a special case of the more general
            <b>resource-error</b> (see <!--XXX-->page 16-189 for information on
            <b>resource-error</b>).
      </defun>
      
      <defun>
        <name> id-choice-error
        <kind> Condition
        <desc>
          <p>
            The value chosen for a resource identifier is either not included in
            the range assigned to the client or is already in use. Under normal
            circumstances, this cannot occur and should be considered a server
            or CLX library error.
          <p>
            An <b>id-choice-error</b> is a special case of the more general
            <b>resource-error</b> (see <!--XXX-->page 16-189 for information on
            <b>resource-error</b>).
      </defun>

      <defun>
        <name> implementation-error
        <kind> Condition
        <desc>
          <p>
            The server does not implement some aspect of the request. A server
            that generates this error for a core request is deficient. As such,
            this error is not listed for any of the requests.  However, clients
            should be prepared to receive such errors and either handle or
            discard them.
          <p>
            An <b>implementation-error</b> is a special case of the more general
            <b>resource-error</b> (see <!--XXX-->page 16-189 for information on
            <b>resource-error</b>).
      </defun>

      <defun>
        <name> length-error
        <kind> Condition
        <desc>
          <p>
            The length of a request is shorter or longer than that minimally
            required to contain the arguments. This usually means an internal
            CLX error.
          <p>
            A <b>length-error</b> is a special case of the more general
            <b>resource-error</b> (see <!--XXX-->page 16-189 for information on
            <b>resource-error</b>).
      </defun>

      <defun>
        <name> lookup-error
        <kind> Condition
        <desc>
          <p>
            CLX has the option of caching different resource types (see
            <b>*clx-cached-types*</b>) in a hash table by resource ID. When
            looking up an object in the hash table, if the type of the object is
            wrong, a <b>lookup-error</b> is signaled.
          <p>
            For example: The cursor with ID 123 is interned in the hash
            table. An event is received with a field for window 123. When 123 is
            looked up in the hash table, a cursor is found.  Since a window was
            expected, a <b>lookup-error</b> is signaled. This error indicates a
            problem with the extension code being used. The following items are
            reported along with the error:
          <ul>
            <li> <i>id</i> -- The resource ID.
            <li> <i>display</i> -- The display being used.
            <li> <i>type</i> -- The resource type.
            <li> <i>object</i> -- The <b>resource</b> object.
          </ul>
          <p>
            A <b>lookup-error</b> is a special case of the more general
            <b>x-error</b> (see <!--XXX-->page 16-190 for information on <b>x-error</b>).
      </defun>

      <defun>
        <name> match-error
        <kind> Condition
        <desc>
          <p>
            In a graphics request, the root and depth of the GContext does not
            match that of the drawable. An <b>:input-only</b> window is used as
            a drawable. Some argument or pair of arguments has the correct type
            and range but fails to match in some other way required by the
            request. An <b>:input-only</b> window locks this attribute. The
            values do not exist for an <b>:input-only</b> window.
          <p>
            A <b>match-error</b> is a special case of the more general
            <b>request-error</b> (see <!--XXX-->page 16-189 for information on
            <b>request-error</b>).
      </defun>

      <defun>
        <name> missing-parameter
        <kind> Condition
        <desc>
          <p>
            One or more of the required keyword parameters is missing or
            <b>nil</b>. The missing parameters are reported along with the
            error.
          <p>
            A <b>missing-parameter</b> condition is a special case of the more
            general <b>x-error</b> (see <!--XXX-->page 16-190 for information on
            <b>x-error</b>).
      </defun>

      <defun>
        <name> name-error
        <kind> Condition
        <desc>
          <p>
            A font or color of the specified name does not exist.
          <p>
            A <b>name-error</b> is a special case of the more general
            <b>request-error</b> (see <!--XXX-->page 16-189 for information on
            <b>request-error</b>).
      </defun>

      <defun>
        <name> pixmap-error
        <kind> Condition
        <desc>
          <p>
            A value for a <i>pixmap</i> argument does not name a defined pixmap.
          <p>
            A <b>pixmap-error</b> is a special case of the more general
            <b>resource-error</b>. (See <!--XXX-->page 16-189 for information on
            <b>resource-error</b>.)
      </defun>

      <defun>
        <name> reply-length-error
        <ll>   (<b>x-error</b>) (<i>slots*</i>)
        <kind> Condition
        <desc>
          <p>
            The reply to a request has an unexpected length. The following items
            are reported along with the error:
          <ul>
            <li> <i>reply-length</i> -- The actual reply length.
            <li> <i>expected-length</i> -- The expected reply length.
            <li> <i>display</i> -- The display on which the error occurred.
          </ul>
          <p>
            A <b>reply-length-error</b> is a special case of the more general
            <b>x-error</b> (see <!--XXX-->page 16-190 for information on <b>x-error</b>).
      </defun>

      <defun>
        <name> reply-timeout
        <kind> Condition
        <desc>
          <p>
            The <b>*reply-timeout*</b> parameter specifies the maximum number of
            seconds to wait for a request reply, or <b>nil</b> to wait forever
            (the default). When a reply has not been received after
            *<b>reply-timeout</b>* seconds, the <b>reply-timeout</b> condition
            is signaled. The <i>timeout</i> <i>period</i> and <i>display</i> are
            reported along with the error.
          <p>
            A <b>reply-timeout</b> condition is a special case of the more
            general <b>x-error</b> (see <!--XXX-->page 16-190 for information on
            <b>x-error</b>).
      </defun>

      <defun>
        <name> request-error
        <kind> Condition
        <desc>
          <p>
            The following items are reported along with the error:
          <p>
            The major or minor opcode does not specify a valid request.
          <ul>
            <li> <i>display</i> -- The display on which the error occurred.
            <li> <i>error-key</i> -- The error (sub)type.
            <li> <i>major</i> -- The major opcode.
            <li> <i>minor</i> -- The minor opcode.
            <li> <i>sequence</i> -- The actual sequence number.
            <li> <i>current-sequence</i> -- The current sequence number.
          </ul>
          <p>
            A <b>request-error</b> condition is a special case of the more
            general <b>x-error</b> (see <!--XXX-->page 16-190 for information on
            <b>x-error</b>).
      </defun>

      <defun>
        <name> resource-error
        <kind> Condition
        <desc>
          <p>
            All X11 errors for incorrect resource IDs are built on top of
            <b>resource-error</b>. These are <b>colormap-error</b>,
            <b>cursor-error</b>, <b>drawable-error</b>, <b>font-error</b>,
            <b>gcontext-error</b>, <b>id-choice-error</b>, <b>pixmap-error</b>
            and <b>window-error</b>. <b>resource-error</b> is never signaled
            directly.
          <p>
            A <b>resource-error</b> is a special case of the more general
            <b>request-error</b> (see <!--XXX-->page 16-189 for information on
            <b>request-error</b>).
      </defun>

      <defun>
        <name> sequence-error
        <kind> Condition
        <desc>
          <p>
            All X11 request replies contain the sequence number of their
            request. If a reply's sequence does not match the request count, a
            <b>sequence-error</b> is signaled. A <b>sequence-error</b> usually
            indicates a locking problem with a multi-processing Lisp. The
            following items are reported along with the error:
          <ul>
            <li> <i>display</i> -- The display on which the error occurred.
            <li> <i>req-sequence</i> -- The sequence number in the reply.
            <li> <i>msg-sequence</i> -- The current sequence number.
          </ul>
          <p>
            A <b>sequence-error</b> condition is a special case of the more
            general <b>x-error</b>. (See <!--XXX-->page 16-190 for information on
            <b>x-error</b>.)
      </defun>

      <defun>
        <name> server-disconnect
        <kind> Condition
        <desc>
          <p>
            The connection to the server was lost. The display on which the
            error occurred is reported along with the error.
          <p>
            A <b>server-disconnect</b> condition is a special case of the more
            general <b>x-error</b>. (See <!--XXX-->page 16-190 for information on
            <b>x-error</b>.)
      </defun>

      <defun>
        <name> unexpected-reply
        <kind> Condition
        <desc>
          <p>
            A reply was found when none was expected. This indicates a problem
            with the extension code. The following items are reported along with
            the error:
          <ul>
            <li> <i>display</i> -- The display on which the error occurred.
            <li> <i>req-sequence</i> -- The sequence number in the reply.
            <li> <i>msg-sequence</i> -- The current sequence number.
            <li> <i>length</i> -- The message length of the reply.
          </ul>
          <p>
            An <b>unexpected-reply</b> condition is a special case of the more general
            <b>x-error</b>. (See <!--XXX-->page 16-190 for information on <b>x-error</b>.)
      </defun>

      <defun>
        <name> unknown-error
        <ll>   (<b>request-error</b>) (<b>error-code</b>)
        <kind> Condition
        <desc>
          <p>
            An error was received from the server with an unknown error
            code. This indicates a problem with the extension code. The
            undefined error code is reported.
          <p>
            An <b>unknown-error</b> is a special case of the more general
            <b>request-error</b>. (See <!--XXX-->page 16-189 for information on
            <b>request-error</b>.)
      </defun>

      <defun>
        <name> value-error
        <ll>   (<b>request-error</b>) (<b>value</b>)
        <kind> Condition
        <desc>
          <p>
            Some numeric value falls outside the range of values accepted by the
            request. Unless a specific range is specified for an argument, the
            full range defined by the argument's type is accepted. Any argument
            defined as a set of alternatives can generate this error. The
            erroneous value is reported.
          <p>
            A <b>value-error</b> is a special case of the more general
            <b>request-error</b>. (See <!--XXX-->page 16-189 for information on
            <b>request-error</b>.)
      </defun>

      <defun>
        <name> window-error
        <ll>   (<b>resource-error</b>)
        <kind> Condition
        <desc>
          <p>
            A value for a <i>window</i> argument does not name a defined window.
          <p>
            A <b>window-error</b> is a special case of the more general
            <b>resource-error</b>. (See <!--XXX-->page 16-189 for information on
            <b>resource-error</b>.)
      </defun>

      <defun>
        <name> x-error
        <kind> Condition
        <desc>
          <p>
            This is the most general error condition upon which all other conditions are defined.
      </defun>


<!--
         <b>PROTOCOL VS. CLX FUNCTIONAL</b>

                     <b>CROSS-REFERENCE LISTING</b>

                              <b>X11 Request Name CLX Function Name</b>

                             AllocColor                          <b>alloc-color</b>
                             AllocColorCells                     <b>alloc-color-cells</b>
                             AllocColorPlanes                    <b>alloc-color-planes</b>
                             AllocNamedColor                     <b>alloc-color</b>
                             AllowEvents                         <b>allow-events</b>
                             Bell                                <b>bell</b>
                             ChangeAccessControl                 (<b>setf</b> (<b>access-control</b> <i>display</i>)
                             ChangeActivePointerGrab             <b>change-active-pointer-grab</b>
                             ChangeCloseDownMode                 (<b>setf</b> (<b>close-down-mode</b> <i>display</i>))
                             ChangeGC                            <b>force-gcontext-changes</b>
                                                                 (See <b>with-gcontext</b>)
                                                                 (<b>setf</b> (<b>gcontext-function</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-plane-mask</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-foreground</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-background</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-line-width</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-line-style</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-cap-style</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-join-style</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-fill-style</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-fill-rule</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-tile</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-stipple</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-ts-x</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-ts-y</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-font</b> <i>gc</i> &amp;optional
                                                                   <b>metrics-p</b>))
                                                                 (<b>setf</b> (<b>gcontext-subwindow-mode</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-exposures</b> <i>gc</i>)))
                                                                 (<b>setf</b> (<b>gcontext-clip-x</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-clip-y</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-clip-mask</b> <i>gc</i>
                                                                   &amp;optional <b>ordering</b>))
                                                                 (<b>setf</b> (<b>gcontext-dash-offset</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-dashes</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-arc-mode</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-clip-ordering</b> <i>gc</i>))

                              <b>X11 Request Name CLX Function Name</b>

                             ChangeHosts                         <b>add-access-host</b>
                             ChangeHosts                         <b>remove-access-host</b>
                             ChangeKeyboardControl               <b>change-keyboard-control</b>
                             ChangePointerControl                <b>change-pointer-control</b>
                             ChangeProperty                      <b>change-property</b>
                             ChangeSaveSet                       <b>remove-from-save-set</b>
                             ChangeSaveSet                       <b>add-to-save-set</b>
                             ChangeWindowAttributes              (See <b>with-state</b>)
                                                                 (<b>setf</b> (<b>window-background</b> <i>window</i>))
                                                                 (<b>setf</b> (<b>window-border</b> <i>window</i>))
                                                                 (<b>setf</b> (<b>window-bit-gravity</b> <i>window</i>))
                                                                 (<b>setf</b> (<b>window-gravity</b> <i>window</i>))
                                                                 (<b>setf</b> (<b>window-backing-store</b> <i>window</i>))
                                                                 (<b>setf</b> (<b>window-backing-planes</b> <i>window</i>))
                                                                 (<b>setf</b> (<b>window-backing-pixel</b> <i>window</i>))
                                                                 (<b>setf</b> (<b>window-override-redirect</b> <i>window</i>)
                                                                 <b>(setf (window-save-under</b> <i>window</i><b>))</b>
                                                                 (<b>setf</b> (<b>window-colormap</b> <i>window</i>))
                                                                 (<b>setf</b> (<b>window-cursor</b> <i>window</i>))
                                                                 (<b>setf</b> (<b>window-event-mask</b> <i>window</i>))
                                                                 (<b>setf</b> (<b>window-do-not-propagate-mask</b>
                                                                    <i>window</i>))
                             CirculateWindow                     <b>circulate-window-down</b>
                             CirculateWindow                     <b>circulate-window-up</b>
                             ClearToBackground                   <b>clear-area</b>
                             CloseFont                           <b>close-font</b>
                             ConfigureWindow                     (See <b>with-state</b>)
                                                                 (<b>setf</b> (<b>drawable-x</b> <i>drawable</i>))
                                                                 (<b>setf</b> (<b>drawable-y</b> <i>drawabl</i>e))
                                                                 (<b>setf</b> (<b>drawable-width</b> <i>drawable</i>))
                                                                 (<b>setf</b> (<b>drawable-height</b> <i>drawable</i>))
                                                                 (<b>setf</b> (<b>drawable-depth</b> <i>drawable</i>))
                                                                 (<b>setf</b> (<b>drawable-border-width</b> <i>drawable</i>))
                                                                 (<b>setf</b> (<b>window-priority</b> <i>window</i> &amp;optional
                                                                   <b>sibling</b>))
                             ConvertSelection                    <b>convert-selection</b>
                             CopyArea                            <b>copy-area</b>
                             CopyColormapAndFree                 <b>copy-colormap-and-free</b>
                             CopyGC                              <b>copy-gcontext</b>
                             CopyGC                              <b>copy-gcontext-components</b>
                             CopyPlane                           <b>copy-plane</b>
                             CreateColormap                      <b>create-colormap</b>
                             CreateCursor                        <b>create-cursor</b>
                             CreateGC                            <b>create-gcontext</b>
                             CreateGlyphCursor                   <b>create-glyph-cursor</b>
                             CreatePixmap                        <b>create-pixmap</b>
                             CreateWindow                        <b>create-window</b>
                             DeleteProperty                      <b>delete-property</b>
                             DestroySubwindows                   <b>destroy-subwindows</b>
                             DestroyWindow                       <b>destroy-window</b>
                             FillPoly                            <b>draw-lines</b>
                             ForceScreenSaver                    <b>reset-screen-saver</b>
                             ForceScreenSaver                    <b>activate-screen-saver</b>
                             FreeColormap                        <b>free-colormap</b>
                             FreeColors                          <b>free-colors</b>
                             FreeCursor                          <b>free-cursor</b>

                              <b>X11 Request Name CLX Function Name</b>

                             FreeGC                              <b>free-gcontext</b>
                             FreePixmap                          <b>free-pixmap</b>
                             GetAtomName                         <b>atom-name</b>
                             GetFontPath                         <b>font-path</b>
                             GetGeometry                         (See <b>with-state</b>)
                                                                 <b>drawable-root</b>
                                                                 <b>drawable-x</b>
                                                                 <b>drawable-y</b>
                                                                 <b>drawable-width</b>
                                                                 <b>drawable-height</b>
                                                                 <b>drawable-depth</b>
                                                                 <b>drawable-border-width</b>
                             GetImage                            <b>get-raw-image</b>
                             GetInputFocus                       <b>input-focus</b>
                             GetKeyboardControl                  <b>keyboard-control</b>
                             GetKeyboardMapping                  <b>keyboard-mapping</b>
                             GetModifierMapping                  <b>modifier-mapping</b>
                             GetMotionEvents                     <b>motion-events</b>
                             GetPointerControl                   <b>pointer-control</b>
                             GetPointerMapping                   <b>pointer-mapping</b>
                             GetProperty                         <b>get-property</b>
                             GetScreenSaver                      <b>screen-saver</b>
                             GetSelectionOwner                   <b>selection-owner</b>
                             GetWindowAttributes                 (See <b>with-state</b>)
                                                                 <b>window-visual</b>
                                                                 <b>window-class</b>
                                                                 <b>window-bit-gravity</b>
                                                                 <b>window-gravity</b>
                                                                 <b>window-backing-store</b>
                                                                 <b>window-backing-planes</b>
                                                                 <b>window-backing-pixel</b>
                                                                 <b>window-save-under</b>
                                                                 <b>window-override-redirect</b>
                                                                 <b>window-event-mask</b>
                                                                 <b>window-do-not-propagate-mask</b>
                                                                 <b>window-colormap</b>
                                                                 <b>window-colormap-installed-p</b>
                                                                 <b>window-all-event-masks</b>
                                                                 <b>window-map-state</b>
                             GrabButton                          <b>grab-button</b>
                             GrabKey                             <b>grab-key</b>
                             GrabKeyboard                        <b>grab-keyboard</b>
                             GrabPointer                         <b>grab-pointer</b>
                             GrabServer                          <b>grab-server</b>
                             ImageText16                         <b>draw-image-glyphs</b>
                             ImageText16                         <b>draw-image-glyph</b>
                             ImageText8                          <b>draw-image-glyphs</b>
                             InstallColormap                     <b>install-colormap</b>
                             InternAtom                          <b>find-atom</b>
                             InternAtom                          <b>intern-atom</b>
                             KillClient                          <b>kill-temporary-clients</b>
                             KillClient                          <b>kill-client</b>
                             ListExtensions                      <b>list-extensions</b>
                             ListFonts                           <b>list-font-names</b>
                             ListFontsWithInfo                   <b>list-fonts</b>
                             ListHosts                           <b>access-control</b>

                              <b>X11 Request Name CLX Function Name</b>

                             ListHosts                           <b>access-hosts</b>
                             ListInstalledColormaps              <b>installed-colormaps</b>
                             ListProperties                      <b>list-properties</b>
                             LookupColor                         <b>lookup-color</b>
                             MapSubwindows                       <b>map-subwindows</b>
                             MapWindow                           <b>map-window</b>
                             OpenFont                            <b>open-font</b>
                             PolyArc                             <b>draw-arc</b>
                             PolyArc                             <b>draw-arcs</b>
                             PolyFillArc                         <b>draw-arc</b>
                             PolyFillArc                         <b>draw-arcs</b>
                             PolyFillRectangle                   <b>draw-rectangle</b>
                             PolyFillRectangle                   <b>draw-rectangles</b>
                             PolyLine                            <b>draw-line</b>
                             PolyLine                            <b>draw-lines</b>
                             PolyPoint                           <b>draw-point</b>
                             PolyPoint                           <b>draw-points</b>
                             PolyRectangle                       <b>draw-rectangle</b>
                             PolyRectangle                       <b>draw-rectangles</b>
                             PolySegment                         <b>draw-segments</b>
                             PolyText16                          <b>draw-glyph</b>
                             PolyText16                          <b>draw-glyphs</b>
                             PolyText8                           <b>draw-glyphs</b>
                             PutImage                            <b>put-raw-image</b>
                             QueryBestSize                       <b>query-best-cursor</b>
                             QueryBestSize                       <b>query-best-stipple</b>
                             QueryBestSize                       <b>query-best-tile</b>
                             QueryColors                         <b>query-colors</b>
                             QueryExtension                      <b>query-extension</b>
                             QueryFont                           <b>font-name</b>
                                                                 <b>font-name</b>
                                                                 <b>font-direction</b>
                                                                 <b>font-min-char</b>
                                                                 <b>font-max-char</b>
                                                                 <b>font-min-byte1</b>
                                                                 <b>font-max-byte1</b>
                                                                 <b>font-min-byte2</b>
                                                                 <b>font-max-byte2</b>
                                                                 <b>font-all-chars-exist-p</b>
                                                                 <b>font-default-char</b>
                                                                 <b>font-ascent</b>
                                                                 <b>font-descent</b>
                                                                 <b>font-properties</b>
                                                                 <b>font-property</b>
                                                                 <b>char-left-bearing</b>
                                                                 <b>char-right-bearing</b>
                                                                 <b>char-width</b>
                                                                 <b>char-ascent</b>
                                                                 <b>char-descent</b>
                                                                 <b>char-attributes</b>
                                                                 <b>min-char-left-bearing</b>
                                                                 <b>min-char-right-bearing</b>
                                                                 <b>min-char-width</b>
                                                                 <b>min-char-ascent</b>
                                                                 <b>min-char-descent</b>
                                                                 <b>min-char-attributes</b>

                              <b>X11 Request Name CLX Function Name</b>

                                                                 <b>max-char-left-bearing</b>
                                                                 <b>max-char-right-bearing</b>
                                                                 <b>max-char-width</b>
                                                                 <b>max-char-ascent</b>
                                                                 <b>max-char-descent</b>
                                                                 <b>max-char-attributes</b>
                             QueryKeymap                         <b>query-keymap</b>
                             QueryPointer                        <b>global-pointer-position</b>
                             QueryPointer                        <b>pointer-position</b>
                             QueryPointer                        <b>query-pointer</b>
                             QueryTextExtents                    <b>text-extents</b>
                             QueryTextExtents                    <b>text-width</b>
                             QueryTree                           <b>query-tree</b>
                             RecolorCursor                       <b>recolor-cursor</b>
                             ReparentWindow                      <b>reparent-window</b>
                             RotateProperties                    <b>rotate-properties</b>
                             SendEvent                           <b>send-event</b>
                             SetClipRectangles                   <b>force-gcontext-changes</b>
                                                                 (See <b>with-gcontext</b>)
                                                                 (<b>setf</b> (<b>gcontext-clip-x</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-clip-y</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-clip-mask</b> <i>gc</i> &amp;optional
                                                                   <b>ordering</b>))
                                                                 (<b>setf</b> (<b>gcontext-clip-ordering</b> <i>gc</i>))
                             SetDashes                           <b>force-gcontext-changes</b>
                                                                 (See <b>with-gcontext</b>)
                                                                 (<b>setf</b> (<b>gcontext-dash-offset</b> <i>gc</i>))
                                                                 (<b>setf</b> (<b>gcontext-dashes</b> <i>gc</i>))
                             SetFontPath                         (<b>setf</b> (<b>font-path</b> <i>font</i>)
                             SetInputFocus                       <b>set-input-focus</b>
                             SetKeyboardMapping                  <b>change-keyboard-mapping</b>
                             SetModifierMapping                  <b>set-modifier-mapping</b>
                             SetPointerMapping                   <b>set-pointer-mapping</b>
                             SetScreenSaver                      <b>set-screen-saver</b>
                             SetSelectionOwner                   <b>set-selection-owner</b>
                             StoreColors                         <b>store-color</b>
                             StoreColors                         <b>store-colors</b>
                             StoreNamedColor                     <b>store-color</b>
                             StoreNamedColor                     <b>store-colors</b>
                             TranslateCoords                     <b>translate-coordinates</b>
                             UngrabButton                        <b>ungrab-button</b>
                             UngrabKey                           <b>ungrab-key</b>
                             UngrabKeyboard                      <b>ungrab-keyboard</b>
                             UngrabPointer                       <b>ungrab-pointer</b>
                             UngrabServer                        <b>ungrab-server</b>
                             UninstallColormap                   <b>uninstall-colormap</b>
                             UnmapSubwindows                     <b>unmap-subwindows</b>
                             UnmapWindow                         <b>unmap-window</b>
                             WarpPointer                         <b>warp-pointer</b>
                             WarpPointer                         <b>warp-pointer-if-inside</b>
                             WarpPointer                         <b>warp-pointer-relative</b>
                             WarpPointer                         <b>warp-pointer-relative-if-inside</b>
                             ListHosts                           <b>access-control</b>
                             ListHosts                           <b>access-hosts</b>
                             ForceScreenSaver                    <b>activate-screen-saver</b>
                             ChangeHosts                         <b>add-access-host</b>

                              <b>X11 Request Name CLX Function Name</b>

                             ChangeSaveSet                       <b>add-to-save-set</b>
                             AllocColor                          <b>alloc-color</b>
                             AllocNamedColor                     <b>alloc-color</b>
                             AllocColorCells                     <b>alloc-color-cells</b>
                             AllocColorPlanes                    <b>alloc-color-planes</b>
                             AllowEvents                         <b>allow-events</b>
                             GetAtomName                         <b>atom-name</b>
                             Bell                                <b>bell</b>
                             ChangeActivePointerGrab             <b>change-active-pointer-grab</b>
                             ChangeKeyboardControl               <b>change-keyboard-control</b>
                             SetKeyboardMapping                  <b>change-keyboard-mapping</b>
                             ChangePointerControl                <b>change-pointer-control</b>
                             ChangeProperty                      <b>change-property</b>
                             QueryFont                           <b>char-ascent</b>
                             QueryFont                           <b>char-attributes</b>
                             QueryFont                           <b>char-descent</b>
                             QueryFont                           <b>char-left-bearing</b>
                             QueryFont                           <b>char-right-bearing</b>
                             QueryFont                           <b>char-width</b>
                             CirculateWindow                     <b>circulate-window-down</b>
                             CirculateWindow                     <b>circulate-window-up</b>
                             ClearToBackground                   <b>clear-area</b>
                             CloseFont                           <b>close-font</b>
                             ConvertSelection                    <b>convert-selection</b>
                             CopyArea                            <b>copy-area</b>
                             CopyColormapAndFree                 <b>copy-colormap-and-free</b>
                             CopyGC                              <b>copy-gcontext</b>
                             CopyGC                              <b>copy-gcontext-components</b>
                             CopyPlane                           <b>copy-plane</b>
                             CreateColormap                      <b>create-colormap</b>
                             CreateCursor                        <b>create-cursor</b>
                             CreateGC                            <b>create-gcontext</b>
                             CreateGlyphCursor                   <b>create-glyph-cursor</b>
                             CreatePixmap                        <b>create-pixmap</b>
                             CreateWindow                        <b>create-window</b>
                             DeleteProperty                      <b>delete-property</b>
                             DestroySubwindows                   <b>destroy-subwindows</b>
                             DestroyWindow                       <b>destroy-window</b>
                             PolyArc                             <b>draw-arc</b>
                             PolyArc                             <b>draw-arcs</b>
                             PolyText16                          <b>draw-glyph</b>
                             PolyText16                          <b>draw-glyphs</b>
                             PolyText8                           <b>draw-glyphs</b>
                             ImageText16                         <b>draw-image-glyph</b>
                             ImageText16                         <b>draw-image-glyphs</b>
                             ImageText8                          <b>draw-image-glyphs</b>
                             PolyLine                            <b>draw-line</b>
                             PolyLine                            <b>draw-lines</b>
                             PolyPoint                           <b>draw-point</b>
                             PolyPoint                           <b>draw-points</b>
                             PolyFillRectangle                   <b>draw-rectangle</b>
                             PolyRectangle                       <b>draw-rectangle</b>
                             PolyFillRectangle                   <b>draw-rectangles</b>
                             PolyRectangle                       <b>draw-rectangles</b>
                             PolySegment                         <b>draw-segments</b>
                             GetGeometry                         <b>drawable-border-width</b>

                              <b>X11 Request Name CLX Function Name</b>

                             GetGeometry                         <b>drawable-depth</b>
                             GetGeometry                         <b>drawable-height</b>
                             GetGeometry                         <b>drawable-root</b>
                             GetGeometry                         <b>drawable-width</b>
                             GetGeometry                         <b>drawable-x</b>
                             GetGeometry                         <b>drawable-y</b>
                             FillPoly                            <b>fill-polygon</b>
                             InternAtom                          <b>find-atom</b>
                             QueryFont                           <b>font-all-chars-exist-p</b>
                             QueryFont                           <b>font-ascent</b>
                             QueryFont                           <b>font-default-char</b>
                             QueryFont                           <b>font-descent</b>
                             QueryFont                           <b>font-direction</b>
                             QueryFont                           <b>font-max-byte1</b>
                             QueryFont                           <b>font-max-byte2</b>
                             QueryFont                           <b>font-max-char</b>
                             QueryFont                           <b>font-min-byte1</b>
                             QueryFont                           <b>font-min-byte2</b>
                             QueryFont                           <b>font-min-char</b>
                             QueryFont                           <b>font-name</b>
                             QueryFont                           <b>font-name</b>
                             GetFontPath                         <b>font-path</b>
                             QueryFont                           <b>font-properties</b>
                             QueryFont                           <b>font-property</b>
                             ChangeGC                            <b>force-gcontext-changes</b>
                             SetClipRectangles                   <b>force-gcontext-changes</b>
                             SetDashes                           <b>force-gcontext-changes</b>
                             FreeColormap                        <b>free-colormap</b>
                             FreeColors                          <b>free-colors</b>
                             FreeCursor                          <b>free-cursor</b>
                             FreeGC                              <b>free-gcontext</b>
                             FreePixmap                          <b>free-pixmap</b>
                             GetProperty                         <b>get-property</b>
                             GetImage                            <b>get-raw-image</b>
                             QueryPointer                        <b>global-pointer-position</b>
                             GrabButton                          <b>grab-button</b>
                             GrabKey                             <b>grab-key</b>
                             GrabKeyboard                        <b>grab-keyboard</b>
                             GrabPointer                         <b>grab-pointer</b>
                             GrabServer                          <b>grab-server</b>
                             GrabServer                          <b>with-server-grabbed</b>
                             GetInputFocus                       <b>input-focus</b>
                             InstallColormap                     <b>install-colormap</b>
                             ListInstalledColormaps              <b>installed-colormaps</b>
                             InternAtom                          <b>intern-atom</b>
                             GetKeyboardControl                  <b>keyboard-control</b>
                             GetKeyboardMapping                  <b>keyboard-mapping</b>
                             KillClient                          <b>kill-client</b>
                             KillClient                          <b>kill-temporary-clients</b>
                             ListExtensions                      <b>list-extensions</b>
                             ListFonts                           <b>list-font-names</b>
                             ListFontsWithInfo                   <b>list-fonts</b>
                             ListProperties                      <b>list-properties</b>
                             LookupColor                         <b>lookup-color</b>
                             MapSubwindows                       <b>map-subwindows</b>
                             MapWindow                           <b>map-window</b>

                              <b>X11 Request Name CLX Function Name</b>

                             QueryFont                           <b>max-char-ascent</b>
                             QueryFont                           <b>max-char-attributes</b>
                             QueryFont                           <b>max-char-descent</b>
                             QueryFont                           <b>max-char-left-bearing</b>
                             QueryFont                           <b>max-char-right-bearing</b>
                             QueryFont                           <b>max-char-width</b>
                             QueryFont                           <b>min-char-ascent</b>
                             QueryFont                           <b>min-char-attributes</b>
                             QueryFont                           <b>min-char-descent</b>
                             QueryFont                           <b>min-char-left-bearing</b>
                             QueryFont                           <b>min-char-right-bearing</b>
                             QueryFont                           <b>min-char-width</b>
                             GetModifierMapping                  <b>modifier-mapping</b>
                             GetMotionEvents                     <b>motion-events</b>
                             OpenFont                            <b>open-font</b>
                             GetPointerControl                   <b>pointer-control</b>
                             GetPointerMapping                   <b>pointer-mapping</b>
                             QueryPointer                        <b>pointer-position</b>
                             PutImage                            <b>put-raw-image</b>
                             QueryBestSize                       <b>query-best-cursor</b>
                             QueryBestSize                       <b>query-best-stipple</b>
                             QueryBestSize                       <b>query-best-tile</b>
                             QueryColors                         <b>query-colors</b>
                             QueryExtension                      <b>query-extension</b>
                             QueryKeymap                         <b>query-keymap</b>
                             QueryPointer                        <b>query-pointer</b>
                             QueryTree                           <b>query-tree</b>
                             RecolorCursor                       <b>recolor-cursor</b>
                             ChangeHosts                         <b>remove-access-host</b>
                             ChangeSaveSet                       <b>remove-from-save-set</b>
                             ReparentWindow                      <b>reparent-window</b>
                             ForceScreenSaver                    <b>reset-screen-saver</b>
                             RotateProperties                    <b>rotate-properties</b>
                             GetScreenSaver                      <b>screen-saver</b>
                             GetSelectionOwner                   <b>selection-owner</b>
                             SendEvent                           <b>send-event</b>
                             ChangeAccessControl                 <b>set-access-control</b>
                             ChangeCloseDownMode                 <b>set-close-down-mode</b>
                             SetInputFocus                       <b>set-input-focus</b>
                             SetModifierMapping                  <b>set-modifier-mapping</b>
                             SetPointerMapping                   <b>set-pointer-mapping</b>
                             SetScreenSaver                      <b>set-screen-saver</b>
                             SetSelectionOwner                   <b>set-selection-owner</b>
                             StoreColors                         <b>store-color</b>
                             StoreColors                         <b>store-colors</b>
                             StoreNamedColor                     <b>store-color</b>
                             StoreNamedColor                     <b>store-colors</b>
                             QueryTextExtents                    <b>text-extents</b>
                             QueryTextExtents                    <b>text-width</b>
                             TranslateCoords                     <b>translate-coordinates</b>
                             UngrabButton                        <b>ungrab-button</b>
                             UngrabKey                           <b>ungrab-key</b>
                             UngrabKeyboard                      <b>ungrab-keyboard</b>
                             UngrabPointer                       <b>ungrab-pointer</b>
                             UngrabServer                        <b>ungrab-server</b>
                             UngrabServer                        <b>with-server-grabbed</b>

                              <b>X11 Request Name CLX Function Name</b>

                             UninstallColormap                   <b>uninstall-colormap</b>
                             UnmapSubwindows                     <b>unmap-subwindows</b>
                             UnmapWindow                         <b>unmap-window</b>
                             WarpPointer                         <b>warp-pointer</b>
                             WarpPointer                         <b>warp-pointer-if-inside</b>
                             WarpPointer                         <b>warp-pointer-relative</b>
                             WarpPointer                         <b>warp-pointer-relative-if-inside</b>
                             GetWindowAttributes                 <b>window-all-event-masks</b>
                             GetWindowAttributes                 <b>window-backing-pixel</b>
                             GetWindowAttributes                 <b>window-backing-planes</b>
                             GetWindowAttributes                 <b>window-backing-store</b>
                             GetWindowAttributes                 <b>window-bit-gravity</b>
                             GetWindowAttributes                 <b>window-class</b>
                             GetWindowAttributes                 <b>window-colormap</b>
                             GetWindowAttributes                 <b>window-colormap-installed-p</b>
                             GetWindowAttributes                 <b>window-do-not-propagate-mask</b>
                             GetWindowAttributes                 <b>window-event-mask</b>
                             GetWindowAttributes                 <b>window-gravity</b>
                             GetWindowAttributes                 <b>window-map-state</b>
                             GetWindowAttributes                 <b>window-override-redirect</b>
                             GetWindowAttributes                 <b>window-save-under</b>
                             GetWindowAttributes                 <b>window-visual</b>
                             ConfigureWindow                     (<b>setf</b> (<b>drawable-border-width</b> <i>drawable</i>))
                             ConfigureWindow                     (<b>setf</b> (<b>drawable-depth</b> <i>drawable</i>))
                             ConfigureWindow                     (<b>setf</b> (<b>drawable-height</b> <i>drawable</i>))
                             ConfigureWindow                     (<b>setf</b> (<b>drawable-width</b> <i>drawabl</i>e))
                             ConfigureWindow                     (<b>setf</b> (<b>drawable-x</b> <i>drawable</i>))
                             ConfigureWindow                     (<b>setf</b> (<b>drawable-y</b> <i>drawable</i>))
                             SetFontPath                         (<b>setf</b> (<b>font-path</b> <i>font</i>) <b>paths</b>)
                             ChangeGC                            (<b>setf</b> (<b>gcontext-arc-mode</b> <i>gc</i>))
                             ChangeGC                            (<b>setf</b> (<b>gcontext-background</b> <i>gc</i>))
                             ChangeGC                            (<b>setf</b> (<b>gcontext-cap-style</b> <i>gc</i>))
                             SetClipRectangles                   (<b>setf</b> (<b>gcontext-clip-mask</b> <i>gc</i> &amp;optional
                                                                   <b>ordering</b>))
                             SetClipRectangles                   (<b>setf</b> (<b>gcontext-clip-ordering</b> <i>gc</i>))
                             SetClipRectangles                   (<b>setf</b> (<b>gcontext-clip-x</b> <i>gc</i>))
                             SetClipRectangles                   (<b>setf</b> (<b>gcontext-clip-y</b> <i>gc</i>))
                             SetDashes                           (<b>setf</b> (<b>gcontext-dash-offset</b> <i>gc</i>))
                             SetDashes                           (<b>setf</b> (<b>gcontext-dashes</b> <i>gc</i>))
                             ChangeGC                            (<b>setf</b> (<b>gcontext-exposures</b> <i>gc</i>))
                             ChangeGC                            (<b>setf</b> (<b>gcontext-fill-rule</b> <i>gc</i>) <b>keyword</b>)
                             ChangeGC                            (<b>setf</b> (<b>gcontext-fill-style</b> <i>gc</i>) <b>keyword</b>)
                             ChangeGC                            (<b>setf</b> (<b>gcontext-font</b> <i>gc</i> &amp;optional
                                                                   <b>metrics-p</b>)
                             ChangeGC                            (<b>setf</b> (<b>gcontext-foreground</b> <i>gc</i>) <b>card32</b>)
                             ChangeGC                            (<b>setf</b> (<b>gcontext-function</b> <i>gc</i>))
                             ChangeGC                            (<b>setf</b> (<b>gcontext-join-style</b> <i>gc</i>) <b>keyword</b>)
                             ChangeGC                            (<b>setf</b> (<b>gcontext-line-style</b> <i>gc</i>) <b>keyword</b>)
                             ChangeGC                            (<b>setf</b> (<b>gcontext-line-width</b> <i>gc</i>) <b>card16</b>)
                             ChangeGC                            (<b>setf</b> (<b>gcontext-plane-mask</b> <i>gc</i>) <b>card32</b>)
                             ChangeGC                            (<b>setf</b> (<b>gcontext-stipple</b> <i>gc</i>) <b>pixmap</b>)
                             ChangeGC                            (<b>setf</b> (<b>gcontext-subwindow-mode</b> <i>gc</i>))
                             ChangeGC                            (<b>setf</b> (<b>gcontext-tile</b> <i>gc</i>))
                             ChangeGC                            (<b>setf</b> (<b>gcontext-ts-x</b> <i>gc</i>))
                             ChangeGC                            (<b>setf</b> (<b>gcontext-ts-y</b> <i>gc</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-background</b> <i>window</i>))

                              <b>X11 Request Name CLX Function Name</b>

                             ChangeWindowAttributes              (<b>setf</b> (<b>window-backing-pixel</b> <i>window</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-backing-planes</b> <i>window</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-backing-store</b> <i>window</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-bit-gravity</b> <i>window</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-border</b> <i>window</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-colormap</b> <i>window</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-cursor</b> <i>window</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-do-not-propagate-mask</b>
                                                                   <i>window</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-event-mask</b> <i>window</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-gravity</b> <i>window</i>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-override-redirect</b> <i>window</i>))
                             ConfigureWindow                     (<b>setf</b> (<b>window-priority</b> <i>window</i> &amp;optional
                                                                   <b>sibling</b>))
                             ChangeWindowAttributes              (<b>setf</b> (<b>window-save-under</b> <i>window</i>))
-->

  <h1>Glossary</h1>

  <h2>a</h2>
<dl>
    <dt><b>access control list</b>
    <dd>
      X maintains a list of hosts from which client programs can be run. By
      default, only programs on the local host can use the display, plus any
      hosts specified in an initial list read by the server. This <i>access
        control list</i> can be changed by clients on the local host. Some
      server implementations can also implement other authorization
      mechanisms in addition to or in place of this mechanism. The action of
      this mechanism can be conditional based on the authorization protocol
      name and data received by the server at connection setup.
      
    <dt><b>action</b>
    <dd>
      A function that is designed to handle an input event. CLUE input
      processing consists of matching an event with an event specification
      found in a contact's <b>event-translations</b> slot and then calling
      actions associated with the matching event specification.
      
    <dt><b>active grab</b>
    <dd>
      A grab is <i>active</i> when the pointer or keyboard is actually owned
      by the single grabbing client.
      
    <dt><b>ancestors</b>
    <dd>
      If W is an inferior of A, then A is an <i>ancestor</i> of W.
      
    <dt><b>atom</b>
    <dd>
      A unique ID corresponding to a string name. Atoms are used to identify
      properties, types, and selections.
  </dl>
  <h2>b</h2>
<dl>
    <dt><b>backing store</b>
    <dd>
      When a server maintains the contents of a window, the off-screen saved
      pixels are known as a <i>backing store</i>.
      
    <dt><b>before action</b>
    <dd>
      An action of a <b>contact-display</b> that is called when an event is
      dispatched to a contact, but before any other contact input processing
      is performed.
      
    <dt><b>bit gravity</b>
    <dd>
      When a window is resized, the contents of the window are not
      necessarily discarded. It is possible to request the server to
      relocate the previous contents to some region of the window. This
      attraction of window contents for some location of a window is known
      as <i>bit</i> <i>gravity</i>.
      
    <dt><b>bitmap</b>
    <dd>
      A pixmap of depth one.
      
    <dt><b>button grabbing</b>
    <dd>
      Buttons on the pointer can be passively <i>grabbed</i> by a
      client. When the button is pressed, the pointer is then actively
      grabbed by the client.
      
    <dt><b>byte order</b>
    <dd>
      For image (pixmap/bitmap) data, byte order is defined by the server,
      and clients with different native byte ordering must swap bytes as
      necessary. For all other parts of the protocol, the byte order is
      defined by the client, and the server swaps bytes as necessary.
  </dl>
  <h2>c</h2>
<dl>
    <dt><b>callback</b>
    <dd>
      A function that represents a connection between a contact and the rest
      of an application program. A contact calls a callback function in
      order to report the results of the user interface component that it
      represents.
      
    <dt><b>children</b>
    <dd>
      First-level subwindows of a window.
      
    <dt><b>class event</b>
    <dd>
      Event translations that belong to all instances of a contact class. A
      class event <b>translations</b> translation is created by the
      <b>defevent</b> macro.
      
    <dt><b>class resources</b>
    <dd>
      Resources defined for each instance of a contact class. Also see
      constraint resources.
      
    <dt><b>click</b>
    <dd>
      A <b>:button-press</b> event followed immediately by a
      <b>:button-release</b> event for the same button, with no intervening
      change in pointer position or modifier key state.
      
    <dt><b>client</b>
    <dd>
      An application program connects to the window system server by some
      interprocess communication (IPC) path, such as a TCP connection or a
      shared memory buffer. This program is referred to as a <i>client</i>
      of the window system server. More precisely, the client is the IPC
      path itself. A program with multiple paths open to the server is
      viewed as multiple clients by the protocol. Resource lifetimes are
      controlled by connection lifetimes, not by program lifetimes.
      
    <dt><b>clipping regions</b>
    <dd>
      In a graphics context, a bitmap or list of rectangles can be specified
      to restrict output to a particular region of the window. The image
      defined by the bitmap or rectangles is called a <i>clipping
        region</i>.
      
    <dt><b>colormap</b>
    <dd>
      A set of entries defining color values. The colormap associated with a
      window is used to display the contents of the window. Each pixel value
      indexes the colormap to produce RGB values that drive the guns of a
      monitor. Depending on hardware limitations, one or more colormaps can
      be installed at one time, such that windows associated with those maps
      display with correct colors.
      
    <dt><b>composite</b>
    <dd>
      A subclass of <b>contact</b> representing contacts that are the
      parents of other contacts. A composite provides geometry management
      and input focus management services for the contacts that are its
      children.
      
    <dt><b>complete resource class</b>
    <dd>
      A list of symbols containing the class of the contact, the class of
      the contact's <b>parent</b> (and so on), and the class of the
      <b>contact-display</b> to which the contact belongs.  The complete
      resource class is one of the two items used as a key by a CLUE
      application in order to access a contact resource value in a resource
      database.
      
    <dt><b>complete resource name</b>
    <dd>
      A list of symbols containing the <b>name</b> of the contact, the
      <b>name</b> of the contact's <b>parent</b> (and so on), and the name
      of the <b>contact-display</b> to which the contact belongs. The
      complete resource name is one of the two items used as a key by a CLUE
      application in order to access a contact resource value in a resource
      database.
      
    <dt><b>connection</b>
    <dd>
      The IPC path between the server and client program. A client program
      typically has one connection to the server over which requests and
      events are sent.
      
    <dt><b>constraint resources</b>
    <dd>
      Resources defined for each child belonging to a member of a composite
      class.  Constraint resources are typically used to control the
      parent's geometry management policy.  Also see class resources.
      
    <dt><b>contact</b>
    <dd>
      The basic CLUE object for programming a user interface.
      
    <dt><b>contact-display</b>
    <dd>
      The CLUE object type that represents a connection to an X server and
      that supports an event loop for application input.
      
    <dt><b>contact initialization</b>
    <dd>
      The process of collecting initial values for all contact
      attributes. No server resources (windows and so on) are actually
      allocated until contact realization.
      
    <dt><b>contact realization</b>
    <dd>
      The process of allocating contact resources. This process completes
      contact creation.
      
    <dt><b>containment</b>
    <dd>
      A window contains the pointer if the window is viewable and the hot
      spot of the cursor is within a visible region of the window or a
      visible region of one of its inferiors. The border of the window is
      included as part of the window for containment. The pointer is in a
      window if the window contains the pointer but no inferior contains the
      pointer.
      
    <dt><b>content</b>
    <dd>
      The single child of a shell. The basic geometry management policy
      implemented by the <b>shell</b> class constrains a shell and its
      content to have the same width and height; size changes to one are
      automatically applied to the other.
      
    <dt><b>coordinate system</b>
    <dd>
      The coordinate system has x horizontal and y vertical, with the origin
      [0, 0] at the upper left. Coordinates are discrete and are in terms of
      pixels. Each window and pixmap has its own coordinate system. For a
      window, the origin is at the inside upper left, inside the border.
      
    <dt><b>cursor</b>
    <dd>
      The visible shape of the pointer on a screen. It consists of a
      hot-spot, a source bitmap, a shape bitmap, and a pair of colors. The
      cursor defined for a window controls the visible appearance when the
      pointer is in that window.
  </dl>
  <h2>d</h2>
<dl>
    <dt><b>depth</b>
    <dd>
      The depth of a window or pixmap is number of bits per pixel it
      has. The depth of a graphics context is the depth of the drawables it
      can be used in conjunction with for graphics output.
      
    <dt><b>descendant</b>
    <dd>
      If W is an inferior of A, then W is a <i>descendant</i> of A.
      
    <dt><b>device</b>
    <dd>
      Keyboards, mice, tablets, track-balls, button boxes, and so forth, are
      all collectively known as input <i>devices</i>. The core protocol only
      deals with two devices: the keyboard and the pointer.
      
    <dt><b>direct color</b>
    <dd>
      A class of colormap in which a pixel value is decomposed into three
      separate subfields for indexing. One subfield indexes an array to
      produce red intensity values, the second subfield indexes a second
      array to produce blue intensity values, and the third subfield indexes
      a third array to produce green intensity values. The RGB values can be
      changed dynamically.
      
    <dt><b>dispatching an event</b>
    <dd>
      The process of finding the appropriate contact and its actions.
      
    <dt><b>double-click</b>
    <dd>
      A sequence of two clicks of the same button in rapid succession.
      
    <dt><b>drawable</b>
    <dd>
      Both windows and pixmaps can be used as sources and destinations in
      graphics operations. These are collectively known as
      <i>drawables</i>. However, an <b>:input-only</b> window cannot be used
      as a source or destination in a graphics operation.
  </dl>
  <h2>e</h2>
<dl>
    <dt><b>event</b>
    <dd>
      Clients receive information asynchronously via <i>events</i>. These
      events can be either asynchronously generated from devices, or
      generated as side effects of client requests.  Events are grouped into
      types; events are never sent to a client by the server unless the
      client has specifically asked to be informed of that type of event,
      but clients can force events to be sent to other clients. Events are
      typically reported relative to a window.
      
    <dt><b>event compression</b>
    <dd>
      Ignoring (or compressing) certain redundant input events. Compression
      of redundant events is controlled by the class slots
      <b>compress-exposures</b> and <b>compress-motion</b>, which are shared
      by all instances of a contact class.
      
    <dt><b>event loop</b>
    <dd>
      The fundamental application control structure: wait for an event,
      figure out how to handle it, process the event, then go back and wait
      for the next one. In CLUE, the event loop is implemented using the
      <b>process-next-event</b> function.
      
    <dt><b>event mask</b>
    <dd>
      Events are requested relative to a window. The set of event types a
      client requests relative to a window are described using an <i>event
        mask</i>.
      
    <dt><b>event propagation</b>
    <dd>
      Device-related events <i>propagate</i> from the source window to
      ancestor windows until some client has expressed interest in handling
      that type of event, or until the event is discarded explicitly.
      
    <dt><b>event specification</b>
    <dd>
      A notation for describing a certain sort of event. CLUE input
      processing consists of matching an event with an event specification
      found in a contact's <b>event-translations</b> slot and then calling
      actions associated with the matching event specification.
      
    <dt><b>event synchronization</b>
    <dd>
      Certain race conditions are possible when demultiplexing device events
      to clients (in particular deciding where pointer and keyboard events
      should be sent when in the middle of window management
      operations). The event synchronization mechanism allows synchronous
      processing of device events.
      
    <dt><b>event source</b>
    <dd>
      The smallest window containing the pointer is the <i>source</i> of a
      device related event.
      
    <dt><b>event translation</b>
    <dd>
      The process of determining which contact action functions will be
      executed. An event translation is a list found in a contact's
      <b>event-translations</b> slot associating an event specification with
      one or more action names. Also see class event translations.
      
    <dt><b>exposure event</b>
    <dd>
      Servers do not guarantee to preserve the contents of windows when
      windows are obscured or reconfigured. <i>Exposure</i> events are sent
      to clients to inform them when contents of regions of windows have
      been lost.
      
    <dt><b>extension</b>
    <dd>
      Named <i>extensions</i> to the core protocol can be defined to extend
      the system. Extension to output requests, resources, and event types
      are all possible, and expected.
  </dl>
  <h2>f</h2>
<dl>
    <dt><b>focus window</b>
    <dd>
      Another term for the input focus.
      
    <dt><b>font</b>
    <dd>
      A matrix of glyphs (typically characters). The protocol does no
      translation or interpretation of character sets. The client simply
      indicates values used to index the glyph array. A font contains
      additional metric information to determine inter-glyph and inter-line
      spacing.
  </dl>
  <h2>g</h2>
<dl>
    <dt><b>geometry management</b>
    <dd>
      The process whereby a composite controls the geometrical properties of
      its child contacts; the composite is referred to as the geometry
      manager.
      
    <dt><b>glyph</b>
    <dd>
      An image, typically of a character, in a font.
      
    <dt><b>grab</b>
    <dd>
      Keyboard keys, the keyboard, pointer buttons, the pointer, and the
      server can be <i>grabbed</i> for exclusive use by a client. In
      general, these facilities are not intended to be used by normal
      applications but are intended for various input and window managers to
      implement various styles of user interfaces.
      
    <dt><b>gcontext</b>
    <dd>
      Shorthand for graphics context.
      
    <dt><b>graphics context</b>
    <dd>
      Various information for graphics output is stored in a <i>graphics
        context</i> (or gcontext), such as foreground pixel, background pixel,
      line width, clipping region, and so forth. A graphics context can only
      be used with drawables that have the same root and the same depth as
      the graphics context.
      
    <dt><b>gray scale</b>
    <dd>
      A degenerate case of pseudo color, in which the red, green, and blue
      values in any given colormap entry are equal, thus producing shades of
      gray. The gray values can be changed dynamically.
  </dl>
  <h2>h</h2>
<dl>
    <dt><b>hot spot</b>
    <dd>
      A cursor has an associated <i>hot spot</i> that defines a point in the
      cursor that corresponds to the coordinates reported for the pointer.
  </dl>
  <h2>i</h2>
<dl>
    <dt><b>identifier</b>
    <dd>
      Each resource has an <i>identifier</i>, a unique value associated with
      it that clients use to name the resource. An identifier can be used
      over any connection to name the resource.
      
    <dt><b>inferiors</b>
    <dd>
      All of the subwindows nested below a window: the children, the
      children's children, and so on.
      
    <dt><b>initialization</b>
    <dd>
      See contact initialization.
      
    <dt><b>input event</b>
    <dd>
      See event.
      
    <dt><b>input focus</b>
    <dd>
      Normally a window defining the scope for processing of keyboard
      input. If a generated keyboard event would normally be reported to
      this window or one of its inferiors, the event is reported normally;
      otherwise, the event is reported with respect to the focus window. The
      input focus also can be set such that all keyboard events are
      discarded and that the focus window is dynamically taken to be the
      root window of whatever screen the pointer is on at each keyboard
      event.
      
    <dt><b>input-only window</b>
    <dd>
      A window that cannot be used for graphics requests. <i>input-only</i>
      windows are invisible, and can be used to control such things as
      cursors, input event generation, and grabbing.  <i>input-only</i>
      windows cannot have <i>input/output</i> windows as inferiors.
      
    <dt><b>input/output window</b>
    <dd>
      The normal kind of opaque window, used for both input and
      output. Input/output windows can have both <i>input/output</i> and
      input-only windows as inferiors.
      
    <dt><b>insensitivity</b>
    <dd>
      See sensitivity.
      
    <dt><b>interactive-stream</b>
    <dd>
      A contact subclass designed to integrate CLUE with the conventional
      stream-based I/O of Common Lisp.
  </dl>
  <h2>k</h2>
<dl>
    <dt><b>key grabbing</b>
    <dd>
      Keys on the keyboard can be passively <i>grabbed</i> by a client. When
      the key is pressed, the keyboard is then actively grabbed by the
      client.
      
    <dt><b>keyboard grabbing</b>
    <dd>
      A client can actively <i>grab</i> control of the keyboard, and key
      events will be sent to that client rather than the client to which the
      events would normally have been sent.
      
    <dt><b>keysym</b>
    <dd>
      An encoding of a symbol on a keycap on a keyboard.
  </dl>
  <h2>m</h2>
<dl>
    <dt><b>managed</b>
    <dd>
      A contact under geometry management control.
      
    <dt><b>mapped</b>
    <dd>
      A window is said to be <i>mapped</i> if a map call has been performed
      on it. Unmapped windows and their inferiors are never viewable or
      visible.
      
    <dt><b>modifier keys</b>
    <dd>
      SHIFT, CONTROL, META, SUPER, HYPER, ALT, Compose, Apple, CAPS LOCK,
      Shift Lock, and similar keys are called <i>modifier keys</i>.
      
    <dt><b>monochrome</b>
    <dd>
      A special case of static gray, in which there are only two colormap
      entries.
  </dl>
  <h2>o</h2>
<dl>
    <dt><b>obscure</b>
    <dd>
      A window is <i>obscured</i> if some other window obscures it. For
      example, window A obscures window B if:
      <ul>
        <li> Both windows are viewable <b>:input-output</b> windows
        <li> Window A is higher in the global stacking order than window B
        <li> The rectangle defined by the outside edges of window A intersects the rectangle
          defined by the outside edges of window B
      </ul>
      <p>
        Notice that window borders are included in the calculation, and that a window can be
        obscured and yet still have visible regions. See occlude (there is a fine distinction
        between obscure and occlude).
        
    <dt><b>occlude</b>
    <dd>
      A window is <i>occluded</i> if some other window occludes it. For
      example, window A occludes window B if:
      <ul>
        <li> Both windows are mapped
        <li> Window A is higher in the global stacking order than window B
        <li> The rectangle defined by the outside edges of window A intersects the rectangle
          defined by the outside edges of window B
      </ul>
      <p>
        Notice that window borders are included in the calculation. See
        obscure (there is a fine distinction between occlude and obscure).
        
    <dt><b>override-shell</b>
    <dd>
      A subclass of <b>shell</b> used to override the window manager. This
      subclass contains pop-up menus and other temporary objects that the
      user can never resize and so on.
  </dl>
  <h2>p</h2>
<dl>
    <dt><b>padding</b>
    <dd>
      Some padding bytes are inserted in the data stream to maintain
      alignment of the protocol requests on natural boundaries. This
      increases ease of portability to some machine architectures.
      
    <dt><b>parent window</b>
    <dd>
      If C is a child of P, then P is the <i>parent</i> of C.
      
    <dt><b>passive grab</b>
    <dd>
      Grabbing a key or button is a <i>passive grab</i>. The grab activates
      when the key or button is actually pressed.
      
    <dt><b>pixel value</b>
    <dd>
      An <i>n</i>-bit value, where <i>n</i> is the number of bit planes used
      in (that is, the depth of) a particular window or pixmap. For a
      window, a pixel value indexes a colormap to derive an actual color to
      be displayed.
      
    <dt><b>pixmap</b>
    <dd>
      A three dimensional array of bits. A pixmap is normally thought of as
      a two dimensional array of pixels, where each pixel can be a value
      from 0 to (2<sup><i>n</i></sup>)-1, where <i>n</i> is the depth (z axis) of
      the pixmap. A pixmap can also be thought of as a stack of <i>n</i>
      bitmaps.
      
    <dt><b>plane</b>
    <dd>
      When a pixmap or window is thought of as a stack of bitmaps, each
      bitmap is called a <i>plane</i> or <i>bit plane</i>.
      
    <dt><b>plane mask</b>
    <dd>
      Graphics operations can be restricted to only affect a subset of bit
      planes of a destination.  A <i>plane mask</i> is a bit mask describing
      which planes are to be modified, and it is stored in a graphics
      context.
      
    <dt><b>pointer</b>
    <dd>
      The pointing device attached to the cursor and tracked on the screens.
      
    <dt><b>pointer grabbing</b>
    <dd>
      A client can actively <i>grab</i> control of the pointer, and button
      and motion events will be sent to that client rather than the client
      to which the events would normally have been sent.
      
    <dt><b>pointing device</b>
    <dd>
      Typically a mouse or tablet, or some other device with effective
      dimensional motion.  There is only one visible cursor defined by the
      core protocol, and it tracks whatever pointing device is attached as
      the pointer.
      
    <dt><b>pop-up</b>
    <dd>
      One of the uses of a top-level shell (for example, a menu that pops up
      when a command button contact is activated). Setting the <b>state</b>
      of a shell to <b>:mapped</b> is sometimes referred to as
      <i>mapping</i> or <i>popping up</i> the shell. Setting the
      <b>state</b> of a shell to <b>:withdrawn</b> or <b>:iconic</b> is
      sometimes referred to as <i>unmapping</i> or <i>popping down</i> the
      shell.
      
    <dt><b>property</b>
    <dd>
      Windows can have associated <i>properties</i>, consisting of a name, a
      type, a data format, and some data. The protocol places no
      interpretation on properties; they are intended as a general-purpose
      naming mechanism for clients. For example, clients might share
      information such as resize hints, program names, and icon formats with
      a window manager via properties.
      
    <dt><b>property list</b>
    <dd>
      The list of properties that have been defined for a window.
      
    <dt><b>pseudo color</b>
    <dd>
      A class of colormap in which a pixel value indexes the colormap to
      produce independent red, green, and blue values. That is, the colormap
      is viewed as an array of triples (RGB values). The RGB values can be
      changed dynamically.
  </dl>
  <h2>r</h2>
<dl>
    <dt><b>realization</b>
    <dd>
      See contact realization.
      
    <dt><b>redirecting control</b>
    <dd>
      Window managers (or client programs) may choose to enforce window
      layout policy in various ways. When a client attempts to change the
      size or position of a window, the operation can be <i>redirected</i>
      to a specified client, rather than the operation actually being
      performed.
      
    <dt><b>reply</b>
    <dd>
      Information requested by a client program is sent back to the client
      with a <i>reply</i>. Both events and replies are multiplexed on the
      same connection. Most requests do not generate replies. However, some
      requests generate multiple replies.
      
    <dt><b>representation type</b>
    <dd>
      The type of representation of a resource value. For example, a color
      value might be represented either as a namestring ("red"), a pixel
      value, an RGB triplet, an HSV triplet, and so on.
      
    <dt><b>request</b>
    <dd>
      A command to the server is called a <i>request</i>. It is a single
      block of data sent over a connection.
      
    <dt><b>resource</b>
    <dd>
      A value of the user interface that can be changed by the user in a
      resource database via CLX functions <b>add-resource</b>,
      <b>get-resource</b>, and so forth. See server resource.
      
    <dt><b>resource class, complete</b>
    <dd>
      See complete resource class.
      
    <dt><b>resource database</b>
    <dd>
      Conceptually, a set of resource name/value pairs (or resource
      bindings). CLX defines functions for storing and retrieving interface
      resources from a resource database.
      
    <dt><b>resource name, complete</b>
    <dd>
      See complete resource name.
      
    <dt><b>RGB values</b>
    <dd>
      <i>Red</i>, <i>green</i>, and <i>blue</i> intensity values used to
      define color. These values are always represented as 16-bit unsigned
      numbers, with zero being the minimum intensity and 65535 being the
      maximum intensity. The values are scaled by the server to match the
      display hardware.
      
    <dt><b>root</b>
    <dd>
      A special composite contact used to represent an entire display
      screen.
      
    <dt><b>root window</b>
    <dd>
      Each screen has a <i>root window</i> covering it. It cannot be
      reconfigured or unmapped, but otherwise acts as a full-fledged
      window. A root window has no parent.
  </dl>
  <h2>s</h2>
<dl>
    <dt><b>save set</b>
    <dd>
      The <i>save set</i> of a client is a list of other client's windows
      that, if they are inferiors of one of the client's windows at
      connection close, should not be destroyed and that should be remapped
      if it is unmapped. Save sets are typically used by window managers to
      avoid lost windows if the manager should terminate abnormally.
      
    <dt><b>scanline</b>
    <dd>
      A list of pixel or bit values viewed as a horizontal row (all values
      having the same y coordinate) of an image, with the values ordered by
      increasing x coordinate.
      
    <dt><b>scanline order</b>
    <dd>
      An image represented in <i>scanline order</i> contains scanlines
      ordered by increasing y coordinate.
      
    <dt><b>screen</b>
    <dd>
      A server can provide several independent <i>screens</i>, which
      typically have physically independent monitors. This would be the
      expected configuration when there is only a single keyboard and
      pointer shared among the screens.
      
    <dt><b>selection</b>
    <dd>
      <p>
        A <i>selection</i> can be thought of as an indirect property with
        dynamic type. That is, rather than having the property stored in the
        server, it is maintained by some client (the <i>owner</i>).  A
        selection is global in nature, being thought of as belonging to the
        user (but maintained by clients), rather than being private to a
        particular window subhierarchy or a particular set of clients. When
        a client asks for the contents of a selection, it specifies a
        selection <i>target type</i>. This target type can be used to
        control the transmitted representation of the contents.
      <p>
        For example, if the selection is "the last thing the user clicked
        on" and that is currently an image, then the target type might
        specify whether the contents of the image should be sent in XY
        Format or Z Format. The target type can also be used to control the
        class of contents transmitted; that is, asking for the looks (fonts,
        line spacing, indentation, and so forth) of a paragraph selection,
        rather than the text of the paragraph. The target type can also be
        used for other purposes; the semantics is not constrained by the
        protocol.
        
    <dt><b>sensitivity</b>
    <dd>
      A condition in which a user interface component of an application will
      accept input.  Conversely, when a contact is insensitive, events of
      particular types are not dispatched to the contact and are ignored.
      
    <dt><b>server</b>
    <dd>
      The <i>server</i> provides the basic windowing mechanism. It handles
      IPC connections from clients, demultiplexes graphics requests onto the
      screens, and multiplexes input back to the appropriate clients.
      
    <dt><b>server grabbing</b>
    <dd>
      The server can be <i>grabbed</i> by a single client for exclusive
      use. This prevents processing of any requests from other client
      connections until the grab is complete. This is typically only a
      transient state for such things as rubber-banding and pop-up menus, or
      to execute requests indivisibly.
      
    <dt><b>server resource</b>
    <dd>
      Windows, pixmaps, cursors, fonts, gcontexts, and colormaps are known
      as resources.  They all have unique identifiers associated with them
      for naming purposes. The lifetime of a resource is bounded by the
      lifetime of the connection over which the resource was created. See
      resource.
      
    <dt><b>shell</b>
    <dd>
      A composite that handles the duties required by standard conventions
      for top-level X windows.
      
    <dt><b>sibling</b>
    <dd>
      Children of the same parent window are known as <i>sibling</i>
      windows.
      
    <dt><b>static color</b>
    <dd>
      A degenerate case of pseudo color in which the RGB values are
      predefined and read-only.
      
    <dt><b>static gray</b>
    <dd>
      A degenerate case of gray scale in which the gray values are
      predefined and read-only.  The values are typically (near-)linear
      increasing ramps.
      
    <dt><b>stacking order</b>
    <dd>
      Sibling windows can <i>stack</i> on top of each other. Windows above
      both obscure and occlude lower windows. This is similar to paper on a
      desk. The relationship between sibling windows is known as the
      <i>stacking order</i>.
      
    <dt><b>state</b>
    <dd>
      A slot of <b>contact</b> that controls the visual effect of the
      contact.
      
    <dt><b>stipple</b>
    <dd>
      A bitmap that is used to tile a region to serve as an additional clip
      mask for a fill operation with the foreground color.
  </dl>
  <h2>t</h2>
<dl>
    <dt><b>tile</b>
    <dd>
      A pixmap can be replicated in two dimensions to <i>tile</i> a
      region. The pixmap itself is also known as a tile.
      
    <dt><b>timer</b>
    <dd>
      A CLUE object that provides support for animation and other types of
      time-sensitive user interfaces. A timer causes <b>:timer</b> events to
      be dispatched to a specific contact for processing.
      
    <dt><b>timestamp</b>
    <dd>
      A time value, expressed in milliseconds, typically since the last
      server reset. Timestamp values wrap around (after about 49.7
      days). The server, given its current time is represented by timestamp
      T, always interprets timestamps from clients by treating half of the
      timestamp space as being earlier in time than T and half of the
      timestamp space as being later in time than T. One timestamp value
      (named CurrentTime) is never generated by the server; this value is
      reserved for use in requests to represent the current server time.
      
    <dt><b>top-level contact</b>
    <dd>
      A contact whose parent is a root. A top-level contact is usually a
      composite at the top of a hierarchy of other contacts created by an
      application program.
      
    <dt><b>top-level-session</b>
    <dd>
      A subclass of <b>shell</b> that is used to communicate with a session
      manager.
      
    <dt><b>top-level-shell</b>
    <dd>
      A subclass of <b>shell</b> that provides full window manager
      interaction.
      
    <dt><b>transient-shell</b>
    <dd>
      A subclass of <b>shell</b> that a window manager typically will unmap
      when its owner becomes unmapped or iconified and will not allow to be
      individually iconified.
      
    <dt><b>true color</b>
    <dd>
      A degenerate case of direct color in which the subfields in the pixel
      value directly encode the corresponding RGB values. That is, the
      colormap has predefined read-only RGB values. The values are typically
      (near-)linear increasing ramps.
      
    <dt><b>type</b>
    <dd>
      An arbitrary atom used to identify the interpretation of property
      data. Types are completely uninterpreted by the server; they are
      solely for the benefit of clients.
  </dl>
  <h2>u</h2>
<dl>
    <dt><b>unmanaged</b>
    <dd>
      A contact that is not under geometry management control.
      
    <dt><b>user interface</b>
    <dd>
      A set of abstract interface objects used to control the dialog between
      an application and its human user.
  </dl>

    <h2>v</h2>
    <dl>
      <dt><b>viewable</b>
      <dd>
        A window is <i>viewable</i> if it and all of its ancestors are
        mapped. This does not imply that any portion of the window is actually
        visible. Graphics requests can be performed on a window when it is not
        viewable, but output will not be retained unless the server is
        maintaining backing store.
      <dt><b>visible</b>
      <dd>
        A region of a window is <i>visible</i> if someone looking at the screen
        can actually see it; that is, the window is viewable and the region is
        not occluded by any other window.
    </dl>

    <h2>w</h2>
    <dl>
      <dt><b>window gravity</b>
      <dd>
        When windows are resized, subwindows can be repositioned automatically
        relative to some position in the window. This attraction of a subwindow
        to some part of its parent is known as <i>window gravity</i>.
        <dt><b>window manager</b>
      <dd>
        Manipulation of windows on the screen, and much of the user interface
        (policy) is typically provided by a <i>window manager</i> client.
      <dt><b>window manager shell</b>
      <dd>
        A subclass of <b>shell</b> called <b>wm-shell</b> that interacts with
        the window manager.
    </dl>

    <h2>x</h2>
    <dl>
      <dt><b>XY Format</b>
      <dd>
        The data for a pixmap is said to be in <i>XY Format</i> if it is
        organized as a set of bitmaps representing individual bit planes, with
        the planes appearing from most to least significant in bit order.
    </dl>

    <h2>z</h2>
    <dl>
      <dt><b>Z Format</b>
      <dd>
        The data for a pixmap is said to be in <i>Z Format</i> if it is
        organized as a set of pixel values in scanline order.
    </dl>

<!-- This is a template for the index and later filled by the HTML
     generator -->
<h1>Index</h1>
<h2>A...</h2>
<h2>B...</h2>
<h2>C...</h2>
<h2>D...</h2>
<h2>E...</h2>
<h2>F...</h2>
<h2>G...</h2>
<h2>H...</h2>
<h2>I...</h2>
<h2>J...</h2>
<h2>K...</h2>
<h2>L...</h2>
<h2>M...</h2>
<h2>N...</h2>
<h2>O...</h2>
<h2>P...</h2>
<h2>Q...</h2>
<h2>R...</h2>
<h2>S...</h2>
<h2>T...</h2>
<h2>U...</h2>
<h2>V...</h2>
<h2>W...</h2>
<h2>X...</h2>
<h2>Y...</h2>
<h2>Z...</h2>
  </body>
</clxman>

