SPLIT-SEQUENCE

This code was based on Arthur Lemmens' in
http://groups.google.com/groups?as_umsgid=39F36F1A.B8F19D20%40simplex.nl

changes include:

* altering the behaviour of the :from-end keyword argument to
return the subsequences in original order, for consistency with
CL:REMOVE, CL:SUBSTITUTE et al. (:from-end being non-NIL only
affects the answer if :count is less than the number of
subsequences, by analogy with the above-referenced functions).
  
* changing the :maximum keyword argument to :count, by analogy
with CL:REMOVE, CL:SUBSTITUTE, and so on.

* naming the function SPLIT-SEQUENCE rather than PARTITION rather
than SPLIT.

* adding SPLIT-SEQUENCE-IF and SPLIT-SEQUENCE-IF-NOT.

* The second return value is now an index rather than a copy of a
portion of the sequence; this index is the 'right' one to feed to
CL:SUBSEQ for continued processing.

There's a certain amount of code duplication here, which is kept
to illustrate the relationship between the SPLIT-SEQUENCE
functions and the CL:POSITION functions.

Examples:

* (split-sequence #\; "a;;b;c")
-> ("a" "" "b" "c"), 6

* (split-sequence #\; "a;;b;c" :from-end t)
-> ("a" "" "b" "c"), 0

* (split-sequence #\; "a;;b;c" :from-end t :count 1)
-> ("c"), 4

* (split-sequence #\; "a;;b;c" :remove-empty-subseqs t)
-> ("a" "b" "c"), 6

* (split-sequence-if (lambda (x) (member x '(#\a #\b))) "abracadabra")
-> ("" "" "r" "c" "d" "" "r" ""), 11

* (split-sequence-if-not (lambda (x) (member x '(#\a #\b))) "abracadabra")
-> ("ab" "a" "a" "ab" "a"), 11 

* (split-sequence #\; ";oo;bar;ba;" :start 1 :end 9)
-> ("oo" "bar" "b"), 9
