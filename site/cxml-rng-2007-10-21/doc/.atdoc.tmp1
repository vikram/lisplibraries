<?xml version="1.0"?>
<documentation index-title="cxml-rng API reference" css="index.css" heading="cxml-rng">
  <package name="cxml-rng" id="cxml-rng">
    <sections>
      <section section="Example">    <pre>(cxml:parse-file "test.xml"
                 (cxml-rng:make-validator
                  (cxml-rng:parse-schema #p"test.rng")))    </pre>    </section>
      <section section="Classes">    <aboutclass>schema</aboutclass>    <aboutclass>rng-error</aboutclass>    <aboutclass>dtd-compatibility-error</aboutclass>    </section>
      <section section="Parsing and validating">    <aboutfun id="cxml-rng__fun__parse-schema">parse-schema</aboutfun>    <aboutfun id="cxml-rng__fun__parse-compact">parse-compact</aboutfun>    <aboutfun id="cxml-rng__fun__make-validator">make-validator</aboutfun>    <aboutfun id="cxml-rng__fun__make-dtd-compatibility-handler">make-dtd-compatibility-handler</aboutfun>    <aboutfun id="cxml-rng__fun__serialize-grammar">serialize-grammar</aboutfun>    </section>
      <section section="Grammar introspection">
    The following classes and function are exported so that users can
    take a peek at the internals of the parsed and simplified grammar.<break/>    <aboutfun id="cxml-rng__fun__schema-start">schema-start</aboutfun>    <aboutclass>attribute</aboutclass>    <aboutclass>choice</aboutclass>    <aboutclass>data</aboutclass>    <aboutclass>element</aboutclass>    <aboutclass>empty</aboutclass>    <aboutclass>group</aboutclass>    <aboutclass>interleave</aboutclass>    <aboutclass>list-pattern</aboutclass>    <aboutclass>not-allowed</aboutclass>    <aboutclass>one-or-more</aboutclass>    <aboutclass>pattern</aboutclass>    <aboutclass>ref</aboutclass>    <aboutclass>text</aboutclass>    <aboutclass>value</aboutclass>    <aboutfun id="cxml-rng__fun__pattern-child">pattern-child</aboutfun>    <aboutfun id="cxml-rng__fun__pattern-a">pattern-a</aboutfun>    <aboutfun id="cxml-rng__fun__pattern-b">pattern-b</aboutfun>    <aboutfun id="cxml-rng__fun__pattern-name">pattern-name</aboutfun>    <aboutfun id="cxml-rng__fun__pattern-element">pattern-element</aboutfun>    <aboutfun id="cxml-rng__fun__pattern-type">pattern-type</aboutfun>    <aboutfun id="cxml-rng__fun__pattern-string">pattern-string</aboutfun>    <aboutfun id="cxml-rng__fun__pattern-value">pattern-value</aboutfun>    <aboutfun id="cxml-rng__fun__pattern-params">pattern-params</aboutfun>    <aboutfun id="cxml-rng__fun__pattern-except">pattern-except</aboutfun>    </section>
    </sections>
    <documentation-string><code>cxml-rng</code> implements <a a="http://relaxng.org/spec-20011203.html">    Relax NG</a> schema validation for Closure XML.<break/>    Support for <a a="http://relaxng.org/compact-20021121.html">Compact Syntax</a>    and <a a="http://relaxng.org/compatibility-20011203.html">DTD Compatibility</a>
    is included.<break/>                </documentation-string>
    <symbols>
      <class-definition id="cxml-rng__class__pattern" name="pattern" package="cxml-rng">
        <cpl>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-rng__class__not-allowed" name="not-allowed" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__data" name="data" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__value" name="value" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__text" name="text" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__empty" name="empty" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__ref" name="ref" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__choice" name="choice" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__interleave" name="interleave" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__group" name="group" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__list-pattern" name="list-pattern" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__one-or-more" name="one-or-more" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__attribute" name="attribute" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__element" name="element" package="cxml-rng"/>
        </subclasses>
        <see-also>
          <auto>
            <see id="cxml-rng__fun__schema-start">schema-start</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__schema">schema</see>
          </other>
        </see-also>
        <documentation-string><short>The superclass of all patterns.</short>
   Instances of this class represent elements in the "simplified syntax"
   of Relax NG.<break/>
   Patterns are documented for introspective purposes and are not meant to
   be modified by user code.<break/>   The start pattern of a schema is available through <fun id="cxml-rng__fun__schema-start">schema-start</fun>.<break/>   </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__schema" name="schema" package="cxml-rng">
        <cpl>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <other>
            <see id="cxml-rng__fun__make-validator">make-validator</see>
            <see id="cxml-rng__fun__serialize-schema">serialize-schema</see>
          </other>
          <slot>
            <see id="cxml-rng__fun__schema-start">schema-start</see>
          </slot>
          <constructor>
            <see id="cxml-rng__fun__parse-schema">parse-schema</see>
          </constructor>
        </see-also>
        <documentation-string>An instance of this class represents a Relax NG grammar that has
   been parsed and simplified.             </documentation-string>
      </class-definition>
      <function-definition id="cxml-rng__fun__parse-schema" name="parse-schema" package="cxml-rng">
        <lambda-list>
          <elt>input</elt>
          <elt>&amp;key</elt>
          <elt>entity-resolver</elt>
          <elt>(process-dtd-compatibility t)</elt>
        </lambda-list>
        <arguments>
          <arg arg="input">a string, pathname, stream, or xstream</arg>
          <arg arg="entity-resolver">a function of two arguments, or NIL</arg>
          <arg arg="process-dtd-compatibility">a boolean</arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__schema">schema</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__parse-compact">parse-compact</see>
            <see id="cxml-rng__fun__make-validator">make-validator</see>
          </other>
        </see-also>
        <return>a parsed <class id="cxml-rng__class__schema">schema</class></return>
        <documentation-string>            <short>This function parses a Relax NG schema file in XML syntax</short>
   and returns a parsed representation of that schema.<break/>   <code>input</code> can be any stream designator as understood by   <code>cxml:make-source</code>.<break/>
   Note that namestrings are not valid arguments,
   because they would be interpreted as XML source code.  Use pathnames
   instead.<break/>   <code>entity-resolver</code> can be passed as a function of two arguments.
   It is invoked for every entity referenced by the
   document with the entity's Public ID (a rod) and System ID (an
   URI object) as arguments.  The function may either return
   nil, CXML will then try to resolve the entity as usual.
   Alternatively it may return a Common Lisp stream specialized on   <code>(unsigned-byte 8)</code> which will be used instead.<break/>   If <code>process-dtd-compatibility</code> is true, the schema will be checked   for <em>compatibility</em> with Relax NG DTD Compatibility, and default values   will be recorded.  (Without <code>process-dtd-compatibility</code>, the schema   will not be checked <em>compatibility</em>, and annotations for
   DTD Compatibility will be ignored like any other foreign element.)<break/>      </documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__pattern-params" name="pattern-params" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__data">data</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__data">data</see>
            <see id="cxml-types__fun__param">cxml-types:param</see>
          </auto>
        </see-also>
        <return>a list of <fun id="cxml-types__fun__param">cxml-types:param</fun></return>
        <documentation-string>              <short>The data type parameters for this data pattern.</short><break/>       (With the XSD type library, these are known as restricting facets.)</documentation-string>
      </function-definition>
      <class-definition id="cxml-rng__class__list-pattern" name="list-pattern" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%parent" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__pattern-child">pattern-child</see>
          </slot>
        </see-also>
        <documentation-string><short>This pattern specifies that a subpatterns is allowed multiple   times a the current position, with whitespace as a separator.</short><break/>   </documentation-string>
      </class-definition>
      <function-definition id="cxml-rng__fun__ns-name-uri" name="ns-name-uri" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__ns-name">ns-name</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__ns-name">ns-name</see>
          </auto>
        </see-also>
        <return>a string</return>
        <documentation-string>              Return the expected namespace URI.</documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__any-name-except" name="any-name-except" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__any-name">any-name</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__any-name">any-name</see>
            <see id="cxml-rng__class__name-class">name-class</see>
          </auto>
        </see-also>
        <return>a <class id="cxml-rng__class__name-class">name-class</class> or <code>nil</code></return>
        <documentation-string>       <break/>       Return the name class <em>not</em> allowed by this <code>any-name</code>,       or <code>nil</code> if there is no such exception.</documentation-string>
      </function-definition>
      <class-definition id="cxml-rng__class__value" name="value" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%typed-pattern" package="cxml-rng"/>
          <superclass status="INTERNAL" name="%leaf" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__pattern-type">pattern-type</see>
            <see id="cxml-rng__fun__pattern-value">pattern-value</see>
            <see id="cxml-rng__fun__pattern-string">pattern-string</see>
          </slot>
        </see-also>
        <documentation-string><short>This pattern specifies that a specific value is expected as text   here.</short><break/>   The value expected is <code>pattern-value</code>, parsed from   <code>pattern-string</code> using <code>pattern-type</code>.<break/>         </documentation-string>
      </class-definition>
      <function-definition id="cxml-rng__fun__make-validator" name="make-validator" package="cxml-rng">
        <lambda-list>
          <elt>schema</elt>
          <elt>&amp;optional</elt>
          <elt>handler</elt>
        </lambda-list>
        <arguments>
          <arg arg="schema">the parsed Relax NG <class id="cxml-rng__class__schema">schema</class> object</arg>
          <arg arg="handler">an additional SAX handler to broadcast events to</arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__schema">schema</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__parse-schema">parse-schema</see>
            <see id="cxml-rng__fun__make-validating-source">make-validating-source</see>
            <see id="cxml-rng__fun__make-dtd-compatibility-handler">make-dtd-compatibility-handler</see>
          </other>
        </see-also>
        <return>a SAX handler</return>
        <documentation-string>         <short>This function creates a validation handler for <code>schema</code></short>,
    to be used for validation of a document against that schema.<break/>
   The validation handler processes SAX events and can be used with any
   function generating such events, in particular with cxml:parse-file.<break/>   Events will be passed on unchanged to <code>handler</code>.<break/>   This validator does <em>not</em> perform DTD compatibility processing.
   (Specify a DTD compatibility handler as the second argument to this
   function instead.)<break/>         </documentation-string>
      </function-definition>
      <class-definition id="cxml-rng__class__not-allowed" name="not-allowed" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%leaf" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <documentation-string>
          <short>This pattern specifies that the part of the schema reached at   this point is not valid.</short>
        </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__group" name="group" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%combination" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__pattern-a">pattern-a</see>
            <see id="cxml-rng__fun__pattern-b">pattern-b</see>
          </slot>
        </see-also>
        <documentation-string><short>This pattern specifies that two subpatterns are   required at the current position in a specific order.</short><break/>      </documentation-string>
      </class-definition>
      <function-definition id="cxml-rng__fun__pattern-value" name="pattern-value" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__value">value</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__value">value</see>
            <see id="cxml-types__fun__parse">cxml-types:parse</see>
            <see id="cxml-rng__fun__pattern-string">pattern-string</see>
            <see id="cxml-rng__fun__pattern-type">pattern-type</see>
          </auto>
        </see-also>
        <return>an object as returned by <fun id="cxml-types__fun__parse">cxml-types:parse</fun></return>
        <documentation-string>              <short>Returns the value expected at this position.</short><break/>       This object is the result of parsing <fun id="cxml-rng__fun__pattern-string">pattern-string</fun> using       <fun id="cxml-rng__fun__pattern-type">pattern-type</fun>.</documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__pattern-b" name="pattern-b" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__pattern">pattern</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__pattern">pattern</see>
            <see id="cxml-rng__class__pattern">pattern</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__pattern-a">pattern-a</see>
            <see id="cxml-rng__fun__group">group</see>
            <see id="cxml-rng__fun__interleave">interleave</see>
            <see id="cxml-rng__fun__choice">choice</see>
          </other>
        </see-also>
        <return>an instance of <class id="cxml-rng__class__pattern">pattern</class></return>
        <documentation-string>              <short>Returns the second of two sub-patterns the pattern instance has.</short><break/>
       (Elements in the full Relax NG syntax allow more than two child
       patterns, but simplification normalizes the representation so that
       any such element has exactly two children.)<break/>                            </documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__pattern-a" name="pattern-a" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__pattern">pattern</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__pattern">pattern</see>
            <see id="cxml-rng__class__pattern">pattern</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__pattern-b">pattern-b</see>
            <see id="cxml-rng__fun__group">group</see>
            <see id="cxml-rng__fun__interleave">interleave</see>
            <see id="cxml-rng__fun__choice">choice</see>
          </other>
        </see-also>
        <return>an instance of <class id="cxml-rng__class__pattern">pattern</class></return>
        <documentation-string>              <short>Returns the first of two sub-patterns the pattern instance has.</short><break/>
       (Elements in the full Relax NG syntax allow more than two child
       patterns, but simplification normalizes the representation so that
       any such element has exactly two children.)<break/>                            </documentation-string>
      </function-definition>
      <class-definition id="cxml-rng__class__data" name="data" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%typed-pattern" package="cxml-rng"/>
          <superclass status="INTERNAL" name="%leaf" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__pattern-type">pattern-type</see>
            <see id="cxml-rng__fun__pattern-params">pattern-params</see>
            <see id="cxml-rng__fun__pattern-except">pattern-except</see>
          </slot>
        </see-also>
        <documentation-string><short>This pattern specifies that text of a specific data type is   expected.</short><break/>   The data type instance stored in the <code>pattern-type</code> slot takes into
   account additional paramaters, which can be retrieved using   <code>pattern-params</code> in their original form.<break/>         </documentation-string>
      </class-definition>
      <function-definition id="cxml-rng__fun__rng-error-line-number" name="rng-error-line-number" package="cxml-rng">
        <lambda-list>
          <elt>condition</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__rng-error">rng-error</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__rng-error">rng-error</see>
          </auto>
        </see-also>
        <return>an integer, or nil</return>
        <documentation-string>       
       Return the line number reported by the parser when the Relax NG error       was detected, or NIL if not available.</documentation-string>
      </function-definition>
      <class-definition id="cxml-rng__class__one-or-more" name="one-or-more" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%parent" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__pattern-child">pattern-child</see>
          </slot>
        </see-also>
        <documentation-string><short>This pattern specifies that its subpattern is   allowed to occur at the current position one or more times.</short><break/>   </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__text" name="text" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%leaf" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <documentation-string>
          <short>This pattern specifies that text is expected here.</short>
        </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__attribute" name="attribute" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%named-pattern" package="cxml-rng"/>
          <superclass status="INTERNAL" name="%parent" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__pattern-name">pattern-name</see>
            <see id="cxml-rng__fun__pattern-child">pattern-child</see>
          </slot>
        </see-also>
        <documentation-string><short>This pattern specifies that an attribute of a certain name class   is required.</short><break/>
   Its child pattern describes the type of the attribute's
   contents.      </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__rng-error" name="rng-error" package="cxml-rng">
        <cpl>
          <superclass status="EXTERNAL" name="simple-error" package="common-lisp"/>
          <superclass status="EXTERNAL" name="simple-condition" package="common-lisp"/>
          <superclass status="EXTERNAL" name="error" package="common-lisp"/>
          <superclass status="EXTERNAL" name="serious-condition" package="common-lisp"/>
          <superclass status="EXTERNAL" name="condition" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-rng__class__dtd-compatibility-error" name="dtd-compatibility-error" package="cxml-rng"/>
        </subclasses>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__rng-error-line-number">rng-error-line-number</see>
            <see id="cxml-rng__fun__rng-error-column-number">rng-error-column-number</see>
            <see id="cxml-rng__fun__rng-error-system-id">rng-error-system-id</see>
          </slot>
        </see-also>
        <documentation-string><short>The class of all validation and schema parsing errors.</short><break/>
    Signalled while parsing a schema, this error signifies that the schema
    is incorrect (or not compatible with DTD Compatibility).  Signalled
    during validation, this error signifies that the document is invalid
    (or not sound).<break/>
    When parsing or validating with DTD Compatibility, check for    <code>dtd-compatibility-error</code> to distinguish between
    correctness and compatibility or validity and soundness.<break/>            </documentation-string>
      </class-definition>
      <function-definition id="cxml-rng__fun__pattern-string" name="pattern-string" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__value">value</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__value">value</see>
            <see id="cxml-rng__fun__pattern-value">pattern-value</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__pattern-type">pattern-type</see>
          </other>
        </see-also>
        <return>a string</return>
        <documentation-string>              <short>Returns the string expected at this position.</short><break/>
       This string is the lexical representation expected, not parsed into
       a value object yet.  The parsed object is available as       <fun id="cxml-rng__fun__pattern-value">pattern-value</fun>.<break/>       </documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__ns-name-except" name="ns-name-except" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__ns-name">ns-name</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__ns-name">ns-name</see>
            <see id="cxml-rng__class__name-class">name-class</see>
          </auto>
        </see-also>
        <return>a <class id="cxml-rng__class__name-class">name-class</class> or <code>nil</code></return>
        <documentation-string>       <break/>       Return the name class <em>not</em> allowed by this <code>ns-name</code>,       or <code>nil</code> if there is no such exception.</documentation-string>
      </function-definition>
      <class-definition id="cxml-rng__class__name-class" name="name-class" package="cxml-rng">
        <cpl>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-rng__class__name-class-choice" name="name-class-choice" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__ns-name" name="ns-name" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__name" name="name" package="cxml-rng"/>
          <subclass status="EXTERNAL" id="cxml-rng__class__any-name" name="any-name" package="cxml-rng"/>
        </subclasses>
        <see-also>
          <other>
            <see id="cxml-rng__fun__attribute">attribute</see>
            <see id="cxml-rng__fun__element">element</see>
          </other>
        </see-also>
        <documentation-string><short>The abstract superclass of all name-related classes.</short><break/>
   Name classes represent sets of permissible names for an element or
   attribute.<break/>
   Names are pairs of namespace URI and local-name.<break/>      </documentation-string>
      </class-definition>
      <function-definition id="cxml-rng__fun__make-dtd-compatibility-handler" name="make-dtd-compatibility-handler" package="cxml-rng">
        <lambda-list>
          <elt>schema</elt>
          <elt>handler</elt>
        </lambda-list>
        <arguments>
          <arg arg="schema">the parsed Relax NG <class id="cxml-rng__class__schema">schema</class> object</arg>
          <arg arg="handler">an additional SAX handler to broadcast events to</arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__schema">schema</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__parse-schema">parse-schema</see>
            <see id="cxml-rng__fun__make-validator">make-validator</see>
          </other>
        </see-also>
        <return>a SAX handler</return>
        <documentation-string>         <short>This function creates a handler for DTD Compatibility processing</short>   according to <code>schema</code>.<break/>
   The validation handler processes SAX events and can be used with any
   function generating such events, in particular with cxml:parse-file.<break/>
   Compatibility processing consists of two steps: Infoset modification
   for default values, and soundness checking for attributes with an
   ID-type.<break/>   In <code>sax:start-element</code>, infoset modification will be performed as
   specified for DTD compatibility.  This entails addition of attributes
   according to their defaultValue, and addition (and, when the element ends,
   removal) of suitable namespace declarations if no prefix has been declared
   for the defaulted attribute yet.<break/>   Also in <code>sax:start-element</code>, the handler checks that no ID is declared
   more than once.  Before the end of the document, the handler checks that
   all IDs referred to by attributes with ID-types IDREF or IDREFS have been
   declared.<break/>      </documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__name-class-choice-b" name="name-class-choice-b" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__name-class-choice">name-class-choice</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__name-class-choice">name-class-choice</see>
            <see id="cxml-rng__class__name-class">name-class</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__name-class-choice-a">name-class-choice-a</see>
          </other>
        </see-also>
        <return>a <class id="cxml-rng__class__name-class">name-class</class></return>
        <documentation-string>       
       Returns the 'second' of two name classes that are allowed.       </documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__rng-error-column-number" name="rng-error-column-number" package="cxml-rng">
        <lambda-list>
          <elt>condition</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__rng-error">rng-error</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__rng-error">rng-error</see>
          </auto>
        </see-also>
        <return>an integer, or nil</return>
        <documentation-string>       
       Return the column number reported by the parser when the Relax NG error       was detected, or NIL if not available.</documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__pattern-child" name="pattern-child" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__pattern">pattern</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__pattern">pattern</see>
            <see id="cxml-rng__class__pattern">pattern</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__element">element</see>
            <see id="cxml-rng__fun__attribute">attribute</see>
            <see id="cxml-rng__fun__one-or-more">one-or-more</see>
            <see id="cxml-rng__fun__list-pattern">list-pattern</see>
            <see id="cxml-rng__fun__choice">choice</see>
          </other>
        </see-also>
        <return>an instance of <class id="cxml-rng__class__pattern">pattern</class></return>
        <documentation-string>              <short>Returns the pattern's sub-pattern.</short><break/>
       (Elements in the full Relax NG syntax allow more than one child
       pattern, but simplification normalizes the representation so that
       any such element has exactly one child.)<break/>                                   </documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__pattern-except" name="pattern-except" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__data">data</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__data">data</see>
            <see id="cxml-rng__class__pattern">pattern</see>
          </auto>
        </see-also>
        <return>a <class id="cxml-rng__class__pattern">pattern</class>, or <code>nil</code></return>
        <documentation-string>              <short>Returns the <code>data</code> instance's <code>except</code> pattern.</short><break/>       In addition to a data type, <code>data</code> can specify that certain       values are <em>not</em> permitted.  They are described using a pattern.<break/>       If this slot is <code>nil</code>, no exception is defined.</documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__parse-compact" name="parse-compact" package="cxml-rng">
        <lambda-list>
          <elt>pathname</elt>
        </lambda-list>
        <arguments>
          <arg arg="pathname">a pathname designator for a Relax NG compact file</arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__schema">schema</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__parse-schema">parse-schema</see>
            <see id="cxml-rng__fun__make-validator">make-validator</see>
          </other>
        </see-also>
        <return>a parsed <class id="cxml-rng__class__schema">schema</class></return>
        <documentation-string>      <short>This function parses a Relax NG schema file in compact syntax</short>
   and returns a parsed representation of that schema.<break/>      </documentation-string>
      </function-definition>
      <class-definition id="cxml-rng__class__interleave" name="interleave" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%combination" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__pattern-a">pattern-a</see>
            <see id="cxml-rng__fun__pattern-b">pattern-b</see>
          </slot>
        </see-also>
        <documentation-string><short>This pattern specifies that two possible subpatterns are   allowed to occur in any order at the current position.</short><break/>      </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__ns-name" name="ns-name" package="cxml-rng">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-rng__class__name-class" name="name-class" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__ns-name-uri">ns-name-uri</see>
            <see id="cxml-rng__fun__ns-name-except">ns-name-except</see>
          </slot>
        </see-also>
        <documentation-string><short>This name class allows all names in a specific namespace</short>, with
   possible exceptions.<break/>
   A specific namespace URI is expected. <break/>   Exceptions are given as <code>ns-name-except</code>.<break/>      </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__choice" name="choice" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%combination" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__pattern-a">pattern-a</see>
            <see id="cxml-rng__fun__pattern-b">pattern-b</see>
          </slot>
        </see-also>
        <documentation-string><short>This pattern specifies that one of two possible subpatterns are   allowed at the current position, given as its children.</short><break/>      </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__dtd-compatibility-error" name="dtd-compatibility-error" package="cxml-rng">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-rng__class__rng-error" name="rng-error" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="simple-error" package="common-lisp"/>
          <superclass status="EXTERNAL" name="simple-condition" package="common-lisp"/>
          <superclass status="EXTERNAL" name="error" package="common-lisp"/>
          <superclass status="EXTERNAL" name="serious-condition" package="common-lisp"/>
          <superclass status="EXTERNAL" name="condition" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <documentation-string><short>The class of DTD compatibility errors.</short><break/>
    Signalled while parsing a schema, this error signifies that the schema
    is not compatible (as opposed to incorrect).<break/>
    Signalled during validation, this error signifies that the document    is not sound (as opposed to invalid).</documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__name-class-choice" name="name-class-choice" package="cxml-rng">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-rng__class__name-class" name="name-class" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__name-class-choice-a">name-class-choice-a</see>
            <see id="cxml-rng__fun__name-class-choice-b">name-class-choice-b</see>
          </slot>
        </see-also>
        <documentation-string><short>This name class represents the union of two other name classes.</short><break/>      </documentation-string>
      </class-definition>
      <function-definition id="cxml-rng__fun__name-class-choice-a" name="name-class-choice-a" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__name-class-choice">name-class-choice</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__name-class-choice">name-class-choice</see>
            <see id="cxml-rng__class__name-class">name-class</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__name-class-choice-b">name-class-choice-b</see>
          </other>
        </see-also>
        <return>a <class id="cxml-rng__class__name-class">name-class</class></return>
        <documentation-string>       
       Returns the 'first' of two name classes that are allowed.       </documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__pattern-type" name="pattern-type" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__pattern">pattern</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__pattern">pattern</see>
            <see id="cxml-types__class__data-type">cxml-types:data-type</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__data">data</see>
            <see id="cxml-rng__fun__value">value</see>
            <see id="cxml-types__fun__type-name">cxml-types:type-name</see>
            <see id="cxml-types__fun__type-library">cxml-types:type-library</see>
          </other>
        </see-also>
        <return>a <class id="cxml-types__class__data-type">cxml-types:data-type</class></return>
        <documentation-string>              <short>Returns the data type expected at this position.</short><break/>
       This type has already been parsed into an object.  Its name and
       the URI of its library can be queried from that object.<break/>                            </documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__schema-start" name="schema-start" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__schema">schema</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__schema">schema</see>
            <see id="cxml-rng__class__pattern">pattern</see>
          </auto>
        </see-also>
        <return>the start pattern, an instance of <class id="cxml-rng__class__pattern">pattern</class></return>
        <documentation-string>       
       Reader function for the grammar's start pattern, from which all       of the grammar's patters are reachable.</documentation-string>
      </function-definition>
      <class-definition id="cxml-rng__class__element" name="element" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%named-pattern" package="cxml-rng"/>
          <superclass status="INTERNAL" name="%parent" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__pattern-name">pattern-name</see>
            <see id="cxml-rng__fun__pattern-child">pattern-child</see>
          </slot>
        </see-also>
        <documentation-string><short>This pattern specifies that an element of a certain name class   is required.</short><break/>
   Its child pattern describes the attributes and child nodes
   of this element.      </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__empty" name="empty" package="cxml-rng">
        <cpl>
          <superclass status="INTERNAL" name="%leaf" package="cxml-rng"/>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <documentation-string>
          <short>This pattern specifies that nothing more is expected at the current   position.</short>
        </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__any-name" name="any-name" package="cxml-rng">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-rng__class__name-class" name="name-class" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__any-name-except">any-name-except</see>
          </slot>
        </see-also>
        <documentation-string><short>This name class allows any name.</short><break/>   Exceptions are given as <code>any-name-except</code>.<break/>   </documentation-string>
      </class-definition>
      <class-definition id="cxml-rng__class__ref" name="ref" package="cxml-rng">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-rng__class__pattern" name="pattern" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__pattern-element">pattern-element</see>
          </slot>
        </see-also>
        <documentation-string><short>This pattern references another part of the pattern graph.</short><break/>   <code>ref</code> is the only pattern to introduce shared structure and
   circularity into the pattern graph, by referring to elements defined
   elsewhere.<break/>   (<code>ref</code> patterns in the full Relax NG syntax can be used to refer
   to any pattern definition in the grammar.  Simplification normalizes
   the schema so that ref patterns only refer to definitions which have   an <code>element</code> as their child.)<break/>   </documentation-string>
      </class-definition>
      <function-definition id="cxml-rng__fun__name-lname" name="name-lname" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__name">name</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__name">name</see>
          </auto>
        </see-also>
        <return>a string</return>
        <documentation-string>              Return the expected local name.</documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__pattern-element" name="pattern-element" package="cxml-rng">
        <lambda-list>
          <elt>ref</elt>
        </lambda-list>
        <arguments>
          <arg arg="ref">an instance of <class id="cxml-rng__class__ref">ref</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__ref">ref</see>
            <see id="cxml-rng__class__element">element</see>
          </auto>
        </see-also>
        <return>an instance of <class id="cxml-rng__class__element">element</class></return>
        <documentation-string>      <short>Returns the ref pattern's target.</short><break/>   <code>ref</code> is the only pattern to introduce shared structure and
   circularity into the pattern graph, by referring to elements defined
   elsewhere.<break/>   (<code>ref</code> patterns in the full Relax NG syntax can be used to refer
   to any pattern definition in the grammar.  Simplification normalizes
   the schema so that ref patterns only refer to definitions which have   an <code>element</code> as their child.)</documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__make-validating-source" name="make-validating-source" package="cxml-rng">
        <lambda-list>
          <elt>input</elt>
          <elt>schema</elt>
        </lambda-list>
        <arguments>
          <arg arg="input">a <code>source</code> or a stream designator</arg>
          <arg arg="schema">the parsed Relax NG <class id="cxml-rng__class__schema">schema</class> object</arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__schema">schema</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__parse-schema">parse-schema</see>
            <see id="cxml-rng__fun__make-validator">make-validator</see>
          </other>
        </see-also>
        <return>a klacks source</return>
        <documentation-string>         <short>This function creates a klacks source for <code>input</code> that validates   events against <code>schema</code>.</short><break/>
   Input can be a klacks source or any argument applicable to   <code>cxml:make-source</code>.<break/>      </documentation-string>
      </function-definition>
      <class-definition id="cxml-rng__class__name" name="name" package="cxml-rng">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-rng__class__name-class" name="name-class" package="cxml-rng"/>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-rng__fun__name-uri">name-uri</see>
            <see id="cxml-rng__fun__name-lname">name-lname</see>
          </slot>
        </see-also>
        <documentation-string><short>This name class allows only a specific name.</short><break/>
   A specific namespace URI and local name are expected. <break/>      </documentation-string>
      </class-definition>
      <function-definition id="cxml-rng__fun__name-uri" name="name-uri" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__name">name</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__name">name</see>
          </auto>
        </see-also>
        <return>a string</return>
        <documentation-string>              Return the expected namespace URI.</documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__rng-error-system-id" name="rng-error-system-id" package="cxml-rng">
        <lambda-list>
          <elt>condition</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__rng-error">rng-error</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__rng-error">rng-error</see>
          </auto>
        </see-also>
        <return>a puri:uri, or nil</return>
        <documentation-string>       
       Return the System ID of the document being parsed when the Relax NG       error was detected, or NIL if not available.</documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__serialize-schema" name="serialize-schema" package="cxml-rng">
        <lambda-list>
          <elt>schema</elt>
          <elt>sink</elt>
        </lambda-list>
        <arguments>
          <arg arg="schema">a Relax NG <class id="cxml-rng__class__schema">schema</class></arg>
          <arg arg="sink">a SAX handler</arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__schema">schema</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__parse-schema">parse-schema</see>
          </other>
        </see-also>
        <return>the result of <code>sax:end-document</code></return>
        <documentation-string>         <short>This function serializes a parsed Relax NG back into XML syntax.</short><break/>
   Note that the schema represented in memory has gone through simplification
   as is textually different from the original XML document.<break/>   </documentation-string>
      </function-definition>
      <function-definition id="cxml-rng__fun__pattern-name" name="pattern-name" package="cxml-rng">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-rng__class__pattern">pattern</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-rng__class__pattern">pattern</see>
            <see id="cxml-rng__class__name-class">name-class</see>
          </auto>
          <other>
            <see id="cxml-rng__fun__element">element</see>
            <see id="cxml-rng__fun__attribute">attribute</see>
          </other>
        </see-also>
        <return>a <class id="cxml-rng__class__name-class">name-class</class></return>
        <documentation-string>              <short>Returns the <code>pattern</code>'s name class.</short><break/>
       This slot describes the name allowed for the current element or
       attribute.<break/>              </documentation-string>
      </function-definition>
    </symbols>
  </package>
  <package name="cxml-types" id="cxml-types">
    <sections>
      <section section="Example">    <pre>
* (setf ttt (cxml-types:find-type :|| "token"))
#&lt;CXML-TYPES:TOKEN-TYPE {1002D16B71}&gt;
* (cxml-types:parse ttt "a b")
"a b"
* (cxml-types:parse ttt "a     b")
"a b"
* (cxml-types:equal-using-type ttt ** *)
T    </pre>    </section>
      <section section="Type instances">
      Each type, together with its parameters, is represented by an      instance of <code>data-type</code>.  The generic function <fun id="cxml-types__fun__find-type">find-type</fun>,
      defined for each library, creates type instances.  A type's properties      are accessible using <fun id="cxml-types__fun__type-name">type-name</fun>, <fun id="cxml-types__fun__type-library">type-library</fun>, and      <fun id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</fun>.<break/>      <aboutclass>data-type</aboutclass>      <aboutclass>rng-type</aboutclass>      <aboutclass>xsd-type</aboutclass>      <aboutfun id="cxml-types__fun__find-type">find-type</aboutfun>      <aboutfun id="cxml-types__fun__type-name">type-name</aboutfun>      <aboutfun id="cxml-types__fun__type-library">type-library</aboutfun>      <aboutfun id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</aboutfun>    </section>
      <section section="Using types">
      Types allow strings to be tested for validity and equality.      <fun id="cxml-types__fun__validp">validp</fun> checks whether a string can be parsed.  If it is valid,      <fun id="cxml-types__fun__parse">parse</fun> will compute the string's <emph>value</emph>, and return a
      Lisp object of a type-specific class as a representation of that value.      Values returned by <fun id="cxml-types__fun__parse">parse</fun> can be compared for equality using      <fun id="cxml-types__fun__equal-using-type">equal-using-type</fun>.  Some types also define a partial ordering,      which can be queried using <fun id="cxml-types__fun__lessp-using-type">lessp-using-type</fun>.<break/>      <aboutfun id="cxml-types__fun__validp">validp</aboutfun>      <aboutfun id="cxml-types__fun__parse">parse</aboutfun>      <aboutfun id="cxml-types__fun__equal-using-type">equal-using-type</aboutfun>      <aboutfun id="cxml-types__fun__lessp-using-type">lessp-using-type</aboutfun>    </section>
      <section section="The validation context">
      Some types are context dependent, as indicated by      <fun id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</fun>.  Those types need access to state
      computed by the XML parser implicitly, like namespace bindings or
      the Base URI.<break/>      An abstract class <class id="cxml-types__class__validation-context">validation-context</class> is defined that
      users of this API can implement a subclass of
      to define methods for the generic functions listed below.<break/>
      In addition, two pre-defined validation context implementations are
      provided, one for use with SAX, the other based on Klacks.<break/>      <aboutclass>validation-context</aboutclass>      <aboutclass>sax-validation-context-mixin</aboutclass>      <aboutclass>klacks-validation-context</aboutclass>      <aboutfun id="cxml-types__fun__context-find-namespace-binding">context-find-namespace-binding</aboutfun>      <aboutfun id="cxml-types__fun__context-find-unparsed-entity">context-find-unparsed-entity</aboutfun>    </section>
      <section section="Relax NG built-in types">
      The following primitive types are defined by Relax NG:<break/>      <aboutclass>string-type</aboutclass>      <aboutclass>token-type</aboutclass>    </section>
      <section section="DTD compatibility types">
      The following primitive types are defined by Relax NG DTD
      Compatibility:<break/>      <aboutclass>id-type</aboutclass>      <aboutclass>idref-type</aboutclass>      <aboutclass>idrefs-type</aboutclass>    </section>
      <section section="Primitive XSD built-in types">
      The following primitive types are part of the XSD built-in data type
      library:<break/>      <aboutclass>duration-type</aboutclass>      <aboutclass>date-time-type</aboutclass>      <aboutclass>time-type</aboutclass>      <aboutclass>date-type</aboutclass>      <aboutclass>year-month-type</aboutclass>      <aboutclass>year-type</aboutclass>      <aboutclass>month-day-type</aboutclass>      <aboutclass>day-type</aboutclass>      <aboutclass>month-type</aboutclass>      <aboutclass>boolean-type</aboutclass>      <aboutclass>base64-binary-type</aboutclass>      <aboutclass>hex-binary-type</aboutclass>      <aboutclass>float-type</aboutclass>      <aboutclass>decimal-type</aboutclass>      <aboutclass>double-type</aboutclass>      <aboutclass>any-uri-type</aboutclass>      <aboutclass>qname-type</aboutclass>      <aboutclass>notation-type</aboutclass>      <aboutclass>xsd-string-type</aboutclass>    </section>
      <section section="Enumerated XSD built-in types">
      The following types are part of the XSD built-in data type
      library, and are defined as derived types through enumeration.
      Relax NG does not implement the enumeration facet, so although these
      types are described as "derived", they are implemented directly.<break/>      <aboutclass>xsd-idrefs-type</aboutclass>      <aboutclass>entities-type</aboutclass>      <aboutclass>nmtokens-type</aboutclass>    </section>
      <section section="Derived XSD built-in types">
      The following types are part of the XSD built-in data type
      library, and are defined as derived types through restriction.<break/>      <aboutclass>normalized-string-type</aboutclass>      <aboutclass>xsd-token-type</aboutclass>      <aboutclass>language-type</aboutclass>      <aboutclass>name-type</aboutclass>      <aboutclass>ncname-type</aboutclass>      <aboutclass>xsd-id-type</aboutclass>      <aboutclass>xsd-idref-type</aboutclass>      <aboutclass>entity-type</aboutclass>      <aboutclass>nmtoken-type</aboutclass>      <aboutclass>integer-type</aboutclass>      <aboutclass>non-positive-integer-type</aboutclass>      <aboutclass>negative-integer-type</aboutclass>      <aboutclass>long-type</aboutclass>      <aboutclass>int-type</aboutclass>      <aboutclass>short-type</aboutclass>      <aboutclass>byte-type</aboutclass>      <aboutclass>non-negative-integer-type</aboutclass>      <aboutclass>unsigned-long-type</aboutclass>      <aboutclass>unsigned-int-type</aboutclass>      <aboutclass>unsigned-short-type</aboutclass>      <aboutclass>unsigned-byte-type</aboutclass>      <aboutclass>positive-integer-type</aboutclass>    </section>
    </sections>
    <see-also>
      <auto>
        <see id="cxml-types__fun__find-type">find-type</see>
        <see id="cxml-types__fun__type-name">type-name</see>
        <see id="cxml-types__fun__type-library">type-library</see>
        <see id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</see>
        <see id="cxml-types__fun__validp">validp</see>
        <see id="cxml-types__fun__parse">parse</see>
        <see id="cxml-types__fun__parse">parse</see>
        <see id="cxml-types__fun__equal-using-type">equal-using-type</see>
        <see id="cxml-types__fun__lessp-using-type">lessp-using-type</see>
        <see id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</see>
        <see id="cxml-types__class__validation-context">validation-context</see>
      </auto>
    </see-also>
    <documentation-string><code>cxml-types</code> defines an extensible interface for XML-related
    data types as required for use in Relax NG validation.<break/>
    It includes Relax NG's minimal built-in type library, which is named    <code>:||</code> and defines the types "string" and "token".<break/>
    In addition, it implements the built-in types of    <a a="http://www.w3.org/TR/xmlschema-2/">XML Schema Datatypes</a>    as specified in <a a="http://relaxng.org/xsd-20010907.html">Guidelines for    using W3C XML Schema Datatypes with RELAX NG</a>.  The XSD type library    is named <code>:|http://www.w3.org/2001/XMLSchema-datatypes|</code>.<break/>    The types defined by <a a="http://relaxng.org/compatibility-20011203.html">      RELAX NG DTD Compatibility</a>
    are available through the data type library named    <code>:|http://relaxng.org/ns/compatibility/datatypes/1.0|</code>.<break/>                                    </documentation-string>
    <symbols>
      <class-definition id="cxml-types__class__validation-context" name="validation-context" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__sax-validation-context-mixin" name="sax-validation-context-mixin" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__klacks-validation-context" name="klacks-validation-context" package="cxml-types"/>
        </subclasses>
        <see-also>
          <auto>
            <see id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</see>
            <see id="cxml-types__fun__context-find-namespace-binding">context-find-namespace-binding</see>
            <see id="cxml-types__fun__context-find-unparsed-entity">context-find-unparsed-entity</see>
          </auto>
        </see-also>
        <documentation-string><short>This abstract class defines a protocol allowing data types    to query the XML parser about its current state.</short><break/>
    Some types are context dependent, as indicated by    <fun id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</fun>.  Those types need access to state
    computed by the XML parser implicitly, like namespace bindings or
    the Base URI.<break/>
    User-defined subclasses must implement methods    for the functions <fun id="cxml-types__fun__context-find-namespace-binding">context-find-namespace-binding</fun> and    <fun id="cxml-types__fun__context-find-unparsed-entity">context-find-unparsed-entity</fun>.<break/>
    Two pre-defined validation context implementations are    provided, one for use with SAX, the other based on Klacks.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__notation-type" name="notation-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__qname-type" name="qname-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__any-uri-type" name="any-uri-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__double-type" name="double-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__float-type" name="float-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__hex-binary-type" name="hex-binary-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__base64-binary-type" name="base64-binary-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__boolean-type" name="boolean-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__month-type" name="month-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__day-type" name="day-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__month-day-type" name="month-day-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__year-type" name="year-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__year-month-type" name="year-month-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__date-type" name="date-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__time-type" name="time-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__date-time-type" name="date-time-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__duration-type" name="duration-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__nmtokens-type" name="nmtokens-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__entities-type" name="entities-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__xsd-idrefs-type" name="xsd-idrefs-type" package="cxml-types"/>
        </subclasses>
        <see-also>
          <slot>
            <see id="cxml-types__fun__patterns">patterns</see>
          </slot>
        </see-also>
        <documentation-string><short>The class of XML Schema built-in types.</short><break/>
    Subclasses of xsd-type provide the built-in types of    <a a="http://www.w3.org/TR/xmlschema-2/">      XML Schema Part 2: Datatypes Second Edition</a>    as specified in <a a="http://relaxng.org/xsd-20010907.html">Guidelines for    using W3C XML Schema Datatypes with RELAX NG</a>.<break/>
    The XSD type library    is named <code>:|http://www.w3.org/2001/XMLSchema-datatypes|</code>.<break/>    <b>Parameters.</b> All XSD types accept regular expressions restricting
    the set of strings accepted by the type.  The pattern parameter is    called <code>"pattern"</code>.  This parameter can be repeated to specify
    multiple regular expressions that must all match the data.    As an initarg, specify <code>:pattern</code> with a list of regular expressions
    as an argument.<break/>    </documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__year-month-type" name="year-month-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="time-ordering-mixin" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__date-time-type">date-time-type</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The gYearMonth data type, representing the calendar month of a    specific year.</short><break/>    <b>Syntax.</b> This type accepts an ISO-like syntax.  For details refer to    the <a a="http://www.w3.org/TR/xmlschema-2/#gYearMonth">specification</a>.<break/>    <b>Implementation.</b> This type returns the same kind of lists as    <class id="cxml-types__class__date-time-type">date-time-type</class>, except that the fields <code>day</code>, <code>hour</code>,    <code>minute</code> and <code>second</code> are filled with dummy values from the
    Gregorian year AD 1.<break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.  The ordering is partial    except within a timezone, see the spec for details.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__hex-binary-type" name="hex-binary-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The hexBinary data type.</short><break/>    <b>Syntax.</b> A sequence of two-digit hexadecimal numbers representing
    one octet each.    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#hexBinary">specification</a>.<break/>    <b>Implementation.</b> This type returns an <code>(unsigned-byte 8)</code>
    vector.<break/>    <b>Parameters.</b> This type allows restrictions on the length of the octet    vector through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>, <slot id="cxml-types__NIL__min-length">min-length</slot>, and    <slot id="cxml-types__NIL__max-length">max-length</slot>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__string-type" name="string-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__rng-type" name="rng-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__fun__parse">parse</see>
            <see id="cxml-types__fun__equal-using-type">equal-using-type</see>
          </auto>
        </see-also>
        <documentation-string><short>The Relax NG 'string' type.</short>
    This data type allows arbitrary strings and interprets them as-is.<break/>    For this type, <fun id="cxml-types__fun__parse">parse</fun> will return any string unchanged, and    <fun id="cxml-types__fun__equal-using-type">equal-using-type</fun> compares strings using <code>equal</code>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__param" name="param" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" name="structure-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <other>
            <see id="cxml-types__fun__find-type">find-type</see>
            <see id="cxml-rng__fun__pattern-params">cxml-rng:pattern-params</see>
            <see id="cxml-rng__fun__data">cxml-rng:data</see>
          </other>
          <slot>
            <see id="cxml-types__fun__param-name">param-name</see>
            <see id="cxml-types__fun__param-value">param-value</see>
          </slot>
          <constructor>
            <see id="cxml-types__fun__make-param">make-param</see>
          </constructor>
        </see-also>
        <documentation-string><short>A named data type parameter.</short><break/>
   (With the XSD type library, parameters are known as restricting facets.)                  </documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__idref-type" name="idref-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__dtd-compatibility-type" name="dtd-compatibility-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__fun__parse">parse</see>
          </auto>
          <other>
            <see id="cxml-types__fun__xsd-idref-type">xsd-idref-type</see>
          </other>
        </see-also>
        <documentation-string><short>The DTD compatibility 'IDREF' type.</short><break/>    For this type, <fun id="cxml-types__fun__parse">parse</fun> will return the string with leading and
    trailing whitespace removed.<break/>
    The resulting value must be an NCName.<break/>
    The ID-type of this data type is 'IDREF', ensuring that the value
    referenced must be declared as the ID of an element in the document.<break/>    </documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__non-positive-integer-type" name="non-positive-integer-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__negative-integer-type" name="negative-integer-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The nonPositiveInteger data type, derived from integer.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#nonPositiveInteger">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values &lt;= 0.<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__make-param" name="make-param" package="cxml-types">
        <lambda-list>
          <elt>name</elt>
          <elt>value</elt>
        </lambda-list>
        <arguments>
          <arg arg="name">parameter name, a string</arg>
          <arg arg="value">parameter value, a string</arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__param">param</see>
          </auto>
          <other>
            <see id="cxml-types__fun__param-name">param-name</see>
            <see id="cxml-types__fun__param-value">param-value</see>
          </other>
        </see-also>
        <return>a <class id="cxml-types__class__param">param</class></return>
        <documentation-string>              
       Create a data type parameter.              </documentation-string>
      </function-definition>
      <function-definition id="cxml-types__fun__fraction-digits" name="fraction-digits" package="cxml-types">
        <lambda-list>
          <elt>data-type</elt>
        </lambda-list>
        <arguments>
          <arg arg="data-type">a subtype of <class id="cxml-types__class__decimal-type">decimal-type</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__decimal-type">decimal-type</see>
          </auto>
          <other>
            <see id="cxml-types__fun__total-digits">total-digits</see>
          </other>
        </see-also>
        <return>an integer, or <code>nil</code></return>
        <documentation-string>    
    This slot reader returns the type's    <a a="http://www.w3.org/TR/xmlschema-2/#rf-fractionDigits">fractionDigits facet</a>,    or <code>nil</code> if none was specified.    </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__int-type" name="int-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__long-type" name="long-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__short-type" name="short-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The int data type, derived from long.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#int">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values from the interval
    [-2^31, 2^31-1].<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__klacks-validation-context" name="klacks-validation-context" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__validation-context" name="validation-context" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <constructor>
            <see id="cxml-types__fun__make-klacks-validation-context">make-klacks-validation-context</see>
          </constructor>
        </see-also>
        <documentation-string>A validation-context implementation that queries
    a klacks source for information about the parser's current state.    </documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__dtd-compatibility-type" name="dtd-compatibility-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__idrefs-type" name="idrefs-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__idref-type" name="idref-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__id-type" name="id-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The class of DTD Compatibility data types.</short><break/>
    This library contains three types: ID, IDREF, and IDREFS.<break/>
    This type library is named    <code>:|http://relaxng.org/ns/compatibility/datatypes/1.0|</code>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__byte-type" name="byte-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__short-type" name="short-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__int-type" name="int-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__long-type" name="long-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <documentation-string><short>The byte data type, derived from short.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#byte">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values from the interval
    [-128, 127].<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__qname-type" name="qname-type" package="cxml-types">
        <cpl>
          <superclass status="INTERNAL" name="qname-like" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__fun__parse">parse</see>
            <see id="cxml-types__fun__validp">validp</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The QName data type.</short><break/>    <b>Syntax.</b> A Qualified Name, as per the "Namespaces in XML"
    specification.  The namespace prefix must be bound to a namespace URI
    in the context.    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#QName">specification</a>.<break/>    <b>Context dependent.</b> This type is context dependent and requires    the <code>context</code> argument to <fun id="cxml-types__fun__parse">parse</fun> and <fun id="cxml-types__fun__validp">validp</fun>.<break/>    <b>Implementation.</b> This type returns a structure with two components,
    the namespace URI and the local name.  fixme: and the original length.
    fixme: export this structure.<break/>    <b>Parameters.</b> This type allows restrictions on the length of the    original QName through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>,    <slot id="cxml-types__NIL__min-length">min-length</slot>, and <slot id="cxml-types__NIL__max-length">max-length</slot>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__unsigned-long-type" name="unsigned-long-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__non-negative-integer-type" name="non-negative-integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__unsigned-int-type" name="unsigned-int-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The unsignedLong data type, derived from nonNegativeInteger.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#unsignedLong">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values from the interval
    [0, 2^64-1].<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__any-uri-type" name="any-uri-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The anyURI data type.</short><break/>    <b>Syntax.</b> An arbitrary string (!).    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#anyURI">specification</a>.<break/>    <b>Implementation.</b> This type returns a normalized string in which
    special characters have been escaped.<break/>    <b>Parameters.</b> This type allows restrictions on the length of the    normalized string through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>,    <slot id="cxml-types__NIL__min-length">min-length</slot>, and <slot id="cxml-types__NIL__max-length">max-length</slot>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__xsd-idref-type" name="xsd-idref-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-id-type" name="xsd-id-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__ncname-type" name="ncname-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__name-type" name="name-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-token-type" name="xsd-token-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__normalized-string-type" name="normalized-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <other>
            <see id="cxml-types__fun__idref-type">idref-type</see>
          </other>
        </see-also>
        <documentation-string><short>The IDREF data type, derived from ID.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#IDREF">specification</a>.<break/>    <b>Restrictions.</b> None.<break/>    <b>ID type.</b> This type has the ID-type 'IDREF'for the purposes of DTD    compatibility. See <a a="http://relaxng.org/xsd-20010907.html">Guidelines    for using W3C XML Schema Datatypes with RELAX NG</a>.<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.<break/>    </documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__normalized-string-type" name="normalized-string-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__xsd-token-type" name="xsd-token-type" package="cxml-types"/>
        </subclasses>
        <see-also>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The normalizedString data type, derived from string.</short><break/>    <b>Syntax.</b> An arbitrary string.    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#normalizedString">specification</a>.<break/>    <b>Implementation.</b> Returns the string with whitespace replaced.<break/>
    I.e., each whitespace character is replaced by a space
    (character code 32), but multiple spaces, as well as
    leading and trailing spaces will still be returned.<break/>
    (This is the only XSD type that replaces whitespace in this way.)<break/>    <b>Parameters.</b> This type allows restrictions on the length of the    normalized string through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>,    <slot id="cxml-types__NIL__min-length">min-length</slot>, and <slot id="cxml-types__NIL__max-length">max-length</slot>.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__min-exclusive" name="min-exclusive" package="cxml-types">
        <lambda-list>
          <elt>data-type</elt>
        </lambda-list>
        <arguments>
          <arg arg="data-type">an ordered data type</arg>
        </arguments>
        <see-also>
          <other>
            <see id="cxml-types__fun__max-exclusive">max-exclusive</see>
            <see id="cxml-types__fun__min-inclusive">min-inclusive</see>
            <see id="cxml-types__fun__max-inclusive">max-inclusive</see>
          </other>
        </see-also>
        <return>an integer, or <code>nil</code></return>
        <documentation-string>    
    This slot reader returns the type's    <a a="http://www.w3.org/TR/xmlschema-2/#rf-minExclusive">minExclusive facet</a>,    or <code>nil</code> if none was specified.            </documentation-string>
      </function-definition>
      <function-definition id="cxml-types__fun__max-inclusive" name="max-inclusive" package="cxml-types">
        <lambda-list>
          <elt>data-type</elt>
        </lambda-list>
        <arguments>
          <arg arg="data-type">an ordered data type</arg>
        </arguments>
        <see-also>
          <other>
            <see id="cxml-types__fun__min-exclusive">min-exclusive</see>
            <see id="cxml-types__fun__max-exclusive">max-exclusive</see>
            <see id="cxml-types__fun__min-inclusive">min-inclusive</see>
          </other>
        </see-also>
        <return>an integer, or <code>nil</code></return>
        <documentation-string>    
    This slot reader returns the type's    <a a="http://www.w3.org/TR/xmlschema-2/#rf-maxInclusive">maxInclusive facet</a>,    or <code>nil</code> if none was specified.            </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__ncname-type" name="ncname-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__name-type" name="name-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-token-type" name="xsd-token-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__normalized-string-type" name="normalized-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__entity-type" name="entity-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__xsd-id-type" name="xsd-id-type" package="cxml-types"/>
        </subclasses>
        <see-also>
          <auto>
            <see id="cxml-types__class__name-type">name-type</see>
          </auto>
        </see-also>
        <documentation-string><short>The NCName data type, derived from Name.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#NCName">specification</a>.<break/>    <b>Restrictions.</b> This type restricts its supertype <class id="cxml-types__class__name-type">name-type</class>
    to strings of the pattern "[\i-[:]][\c-[:]]*".<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__rng-type" name="rng-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__token-type" name="token-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__string-type" name="string-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The class of Relax NG built-in types.</short>
    Relax NG defines two built-in data type: string and token.<break/>    The Relax NG type library is named <code>:||</code>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__unsigned-int-type" name="unsigned-int-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__unsigned-long-type" name="unsigned-long-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__non-negative-integer-type" name="non-negative-integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__unsigned-short-type" name="unsigned-short-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The unsignedInt data type, derived from unsignedLong.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#unsignedInt">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values from the interval
    [0, 2^32-1].<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__xsd-idrefs-type" name="xsd-idrefs-type" package="cxml-types">
        <cpl>
          <superclass status="INTERNAL" name="enumeration-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__xsd-idref-type">xsd-idref-type</see>
            <see id="cxml-types__class__xsd-idref-type">xsd-idref-type</see>
          </auto>
          <other>
            <see id="cxml-types__fun__idrefs-type">idrefs-type</see>
          </other>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The IDREFS data type, an enumeration.</short><break/>    <b>Syntax.</b> A whitespace-separated sequence of <class id="cxml-types__class__xsd-idref-type">xsd-idref-type</class>
    values, with at least one element.<break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#IDREFS">specification</a>.<break/>    <b>Implementation.</b> This type returns a list of the values as returned by    <class id="cxml-types__class__xsd-idref-type">xsd-idref-type</class>.<break/>    <b>ID type.</b> This type has the ID-type 'IDREFS'for the purposes of DTD    compatibility. See <a a="http://relaxng.org/xsd-20010907.html">Guidelines    for using W3C XML Schema Datatypes with RELAX NG</a>.<break/>    <b>Parameters.</b> This type allows restrictions on the number of values    through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>, <slot id="cxml-types__NIL__min-length">min-length</slot>, and    <slot id="cxml-types__NIL__max-length">max-length</slot>.<break/>    </documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__boolean-type" name="boolean-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__fun__pattern">pattern</see>
          </auto>
        </see-also>
        <documentation-string><short>The boolean data type.</short><break/>    <b>Syntax.</b> "1", "0",  "true", or "false".    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#boolean">specification</a>.<break/>    <b>Implementation.</b> This type returns <code>t</code> or <code>nil</code>.<break/>    <b>Parameters.</b> No parameters except for <fun id="cxml-types__fun__pattern">pattern</fun> are available for    this type.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__idrefs-type" name="idrefs-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__dtd-compatibility-type" name="dtd-compatibility-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__fun__parse">parse</see>
          </auto>
          <other>
            <see id="cxml-types__fun__xsd-idrefs-type">xsd-idrefs-type</see>
          </other>
        </see-also>
        <documentation-string><short>The DTD compatibility 'IDREFS' type.</short><break/>
    Strings are valid for this data type they contain a whitespace-separated    list of one or more NCNames.  <fun id="cxml-types__fun__parse">parse</fun> will return a list of these
    substrings.<break/>
    The ID-type of this data type is 'IDREFS', ensuring that each value
    referenced must be declared as the ID of an element in the document.<break/>    </documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__min-length" name="min-length" package="cxml-types">
        <lambda-list>
          <elt>data-type</elt>
        </lambda-list>
        <arguments>
          <arg arg="data-type">a data type supporting restrictions on value lengths</arg>
        </arguments>
        <see-also>
          <other>
            <see id="cxml-types__fun__exact-length">exact-length</see>
            <see id="cxml-types__fun__max-length">max-length</see>
          </other>
        </see-also>
        <return>an integer, or <code>nil</code></return>
        <documentation-string>    
    This slot reader returns the type's    <a a="http://www.w3.org/TR/xmlschema-2/#rf-minLength">minLength facet</a>,    or <code>nil</code> if none was specified.        </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__time-type" name="time-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="time-ordering-mixin" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__date-time-type">date-time-type</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The time data type, representing a time of day.</short><break/>    <b>Syntax.</b> This type accepts an ISO-like syntax.  For details refer to    the <a a="http://www.w3.org/TR/xmlschema-2/#dateTime">specification</a>.<break/>    <b>Implementation.</b> This type returns the same kind of lists as    <class id="cxml-types__class__date-time-type">date-time-type</class>, except that the fields <code>year</code>,    <code>month</code> and <code>day</code> are filled with dummy values from the
    Gregorian year AD 1.<break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.  The ordering is partial    except within a timezone, see the spec for details.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__find-type" name="find-type" package="cxml-types">
        <lambda-list>
          <elt>library</elt>
          <elt>name</elt>
          <elt>params</elt>
        </lambda-list>
        <arguments>
          <arg arg="library">datatype library, a keyword symbol</arg>
          <arg arg="name">the type's name, a string</arg>
          <arg arg="params">type parameters, a list of <class id="cxml-types__class__param">param</class> instances</arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__param">param</see>
            <see id="cxml-types__class__data-type">data-type</see>
            <see id="cxml-types__fun__validp">validp</see>
          </auto>
          <other>
            <see id="cxml-types__fun__data-type">data-type</see>
          </other>
        </see-also>
        <return>an instance of <class id="cxml-types__class__data-type">data-type</class>, or <code>nil</code></return>
        <documentation-string>                <short>Look up the type named <em>name</em> in datatype library <em>library</em>.</short><break/>
    Additional parameters (knows as restricting facets in XSD) can be passed    to specify or restrict the type for the purposes of <fun id="cxml-types__fun__validp">validp</fun>.<break/>
    Return a type instance for this type and the additional parameters,    <code>nil</code> if the type does not exist, or    <code>:error</code> if the type exists, but the specified parameters are not
    valid for that type.<break/>    </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__day-type" name="day-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="time-ordering-mixin" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__date-time-type">date-time-type</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The gDay data type, representing a calendar day.</short><break/>    <b>Syntax.</b> This type accepts an ISO-like syntax.  For details refer to    the <a a="http://www.w3.org/TR/xmlschema-2/#gDay">specification</a>.<break/>    <b>Implementation.</b> This type returns the same kind of lists as    <class id="cxml-types__class__date-time-type">date-time-type</class>, except that the fields <code>year</code>, <code>month</code>,    <code>hour</code>, <code>minute</code> and <code>second</code> are filled with dummy values
    from the Gregorian year AD 1.<break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.  The ordering is partial    except within a timezone, see the spec for details.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__date-time-type" name="date-time-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="time-ordering-mixin" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The dateTime data type, representing a moment in time.</short><break/>    <b>Syntax.</b> This type accepts an ISO-like syntax.  For details refer to    the <a a="http://www.w3.org/TR/xmlschema-2/#dateTime">specification</a>.<break/>    <b>Implementation.</b> This type returns lists of the form    <code>(year month day hour minute second timezone)</code>.  Each    value is an integer, except except for <code>second</code>, which is a real,     and <code>timezone</code> which is a real or <code>nil</code>.    A <code>timezone</code> of <code>nil</code> indicates UTC.<break/>    <b>Example.</b> <code>2002-10-10T12:00:00-05:00</code>    maps to <code>(2002 10 10 12 0 0 -5)</code><break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.  The ordering is partial    except within a timezone, see the spec for details.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__exact-length" name="exact-length" package="cxml-types">
        <lambda-list>
          <elt>data-type</elt>
        </lambda-list>
        <arguments>
          <arg arg="data-type">a data type supporting restrictions on value lengths</arg>
        </arguments>
        <see-also>
          <other>
            <see id="cxml-types__fun__min-length">min-length</see>
            <see id="cxml-types__fun__max-length">max-length</see>
          </other>
        </see-also>
        <return>an integer, or <code>nil</code></return>
        <documentation-string>    
    This slot reader returns the type's    <a a="http://www.w3.org/TR/xmlschema-2/#rf-length">length facet</a>,    or <code>nil</code> if none was specified.        </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__date-type" name="date-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="time-ordering-mixin" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__date-time-type">date-time-type</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The date data type, representing a day of the year.</short><break/>    <b>Syntax.</b> This type accepts an ISO-like syntax.  For details refer to    the <a a="http://www.w3.org/TR/xmlschema-2/#date">specification</a>.<break/>    <b>Implementation.</b> This type returns the same kind of lists as    <class id="cxml-types__class__date-time-type">date-time-type</class>, except that the fields <code>hour</code>,    <code>minute</code> and <code>second</code> are filled with dummy values from the
    Gregorian year AD 1.<break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.  The ordering is partial    except within a timezone, see the spec for details.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__non-negative-integer-type" name="non-negative-integer-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__positive-integer-type" name="positive-integer-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__unsigned-long-type" name="unsigned-long-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The nonNegativeInteger data type, derived from integer.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#nonNegativeInteger">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values &gt;= 0.<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__param-name" name="param-name" package="cxml-types">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-types__class__param">param</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__param">param</see>
          </auto>
          <other>
            <see id="cxml-types__fun__param-value">param-value</see>
          </other>
        </see-also>
        <return>a string</return>
        <documentation-string>       
       The data type parameter's name.       </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__short-type" name="short-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__int-type" name="int-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__long-type" name="long-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__byte-type" name="byte-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The short data type, derived from int.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#short">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values from the interval
    [-2^15, 2^15-1].<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__unsigned-short-type" name="unsigned-short-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__unsigned-int-type" name="unsigned-int-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__unsigned-long-type" name="unsigned-long-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__non-negative-integer-type" name="non-negative-integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__unsigned-byte-type" name="unsigned-byte-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The unsignedShort data type, derived from unsignedInt.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#unsignedShort">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values from the interval
    [0, 2^16-1].<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__context-find-namespace-binding" name="context-find-namespace-binding" package="cxml-types">
        <lambda-list>
          <elt>context</elt>
          <elt>prefix</elt>
        </lambda-list>
        <arguments>
          <arg arg="context">an instance of <class id="cxml-types__class__validation-context">validation-context</class></arg>
          <arg arg="prefix">name prefix, a string</arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__validation-context">validation-context</see>
          </auto>
        </see-also>
        <return>the namespace URI as a string, or NIL</return>
        <documentation-string>            <short>This function resolves a namespace prefix to a namespace URI in the    current context.</short>
    All currently declared namespaces
    are taken into account, including those declared directly on the    current element.</documentation-string>
      </function-definition>
      <function-definition id="cxml-types__fun__max-length" name="max-length" package="cxml-types">
        <lambda-list>
          <elt>data-type</elt>
        </lambda-list>
        <arguments>
          <arg arg="data-type">a data type supporting restrictions on value lengths</arg>
        </arguments>
        <see-also>
          <other>
            <see id="cxml-types__fun__exact-length">exact-length</see>
            <see id="cxml-types__fun__min-length">min-length</see>
          </other>
        </see-also>
        <return>an integer, or <code>nil</code></return>
        <documentation-string>    
    This slot reader returns the type's    <a a="http://www.w3.org/TR/xmlschema-2/#rf-maxLength">maxLength facet</a>,    or <code>nil</code> if none was specified.        </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__nmtoken-type" name="nmtoken-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-token-type" name="xsd-token-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__normalized-string-type" name="normalized-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__token-type">token-type</see>
          </auto>
        </see-also>
        <documentation-string><short>The NMTOKEN data type, derived from token.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#NMTOKEN">specification</a>.<break/>    <b>Restrictions.</b> This type restricts its supertype <class id="cxml-types__class__token-type">token-type</class>
    to strings of the pattern "\c+".<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__type-library" name="type-library" package="cxml-types">
        <lambda-list>
          <elt>type</elt>
        </lambda-list>
        <arguments>
          <arg arg="type">an instance of <class id="cxml-types__class__data-type">data-type</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__data-type">data-type</see>
          </auto>
          <other>
            <see id="cxml-types__fun__type-name">type-name</see>
            <see id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</see>
            <see id="cxml-types__fun__type-id-type">type-id-type</see>
          </other>
        </see-also>
        <return>library name, a keyword</return>
        <documentation-string>        <short>Return the name of the library this type belongs to.</short><break/>            </documentation-string>
      </function-definition>
      <function-definition id="cxml-types__fun__context-find-unparsed-entity" name="context-find-unparsed-entity" package="cxml-types">
        <lambda-list>
          <elt>context</elt>
          <elt>name</elt>
        </lambda-list>
        <arguments>
          <arg arg="context">an instance of <class id="cxml-types__class__validation-context">validation-context</class></arg>
          <arg arg="name">entity name, a string</arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__validation-context">validation-context</see>
          </auto>
        </see-also>
        <return><code>nil</code>, or a list of public id, system id, and notation name</return>
        <documentation-string>            This function looks for an unparsed entity in the current context.</documentation-string>
      </function-definition>
      <function-definition id="cxml-types__fun__type-context-dependent-p" name="type-context-dependent-p" package="cxml-types">
        <lambda-list>
          <elt>type</elt>
        </lambda-list>
        <arguments>
          <arg arg="type">an instance of <class id="cxml-types__class__data-type">data-type</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__data-type">data-type</see>
            <see id="cxml-types__fun__parse">parse</see>
            <see id="cxml-types__fun__validp">validp</see>
          </auto>
          <other>
            <see id="cxml-types__fun__validation-context">validation-context</see>
            <see id="cxml-types__fun__type-name">type-name</see>
            <see id="cxml-types__fun__type-library">type-library</see>
            <see id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</see>
            <see id="cxml-types__fun__type-id-type">type-id-type</see>
          </other>
        </see-also>
        <return>a boolean</return>
        <documentation-string>        <short>Return true if parsing and validation of values by this type      depends on the validation context.</short><break/>    In this case, the optional <code>context</code> argument to <fun id="cxml-types__fun__parse">parse</fun> and    <fun id="cxml-types__fun__validp">validp</fun> is required, and an error will be signalled if it is missing.<break/>                    </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__normalized-string-type" name="normalized-string-type" package="cxml-types"/>
        </subclasses>
        <see-also>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The string data type.</short><break/>    <b>Syntax.</b> An arbitrary string.    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#string">specification</a>.<break/>    <b>Implementation.</b> Returns the string unchanged.  This is the only
    XSD type that does not normalize or replace whitespace.<break/>    <b>Parameters.</b> This type allows restrictions on the length of the    string through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>,    <slot id="cxml-types__NIL__min-length">min-length</slot>, and <slot id="cxml-types__NIL__max-length">max-length</slot>.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__lessp-using-type" name="lessp-using-type" package="cxml-types">
        <lambda-list>
          <elt>type</elt>
          <elt>u</elt>
          <elt>v</elt>
        </lambda-list>
        <arguments>
          <arg arg="type">an ordered <class id="cxml-types__class__data-type">data-type</class></arg>
          <arg arg="u">a parsed value as returned by <fun id="cxml-types__fun__parse">parse</fun></arg>
          <arg arg="v">a parsed value as returned by <fun id="cxml-types__fun__parse">parse</fun></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__data-type">data-type</see>
            <see id="cxml-types__fun__parse">parse</see>
            <see id="cxml-types__fun__parse">parse</see>
          </auto>
          <other>
            <see id="cxml-types__fun__equal-using-type">equal-using-type</see>
          </other>
        </see-also>
        <return>a boolean</return>
        <documentation-string>                <short>Compare the <emph>values</emph> <code>u</code> and <code>v</code> using a      data-type-dependent partial ordering.</short><break/>
    A method for this function is provided only by types that have a
    natural partial ordering.<break/>    </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__float-type" name="float-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The float data type.</short><break/>    <b>Syntax.</b> A floating-point number in a "scientific notation".    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#float">specification</a>.<break/>    <b>Implementation.</b> This type returns a <code>single-float</code> or, on
    implementations where Infinity and Nan cannot be represented as such,
    a special symbol that is treated as if it was Infinity or NaN by the
    built-in ordering.<break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__negative-integer-type" name="negative-integer-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__non-positive-integer-type" name="non-positive-integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <documentation-string><short>The negativeInteger data type, derived from nonPositiveInteger.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#negativeInteger">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values &lt; 0.<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__param-value" name="param-value" package="cxml-types">
        <lambda-list>
          <elt>instance</elt>
        </lambda-list>
        <arguments>
          <arg arg="instance">an instance of <class id="cxml-types__class__param">param</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__param">param</see>
          </auto>
          <other>
            <see id="cxml-types__fun__param-name">param-name</see>
          </other>
        </see-also>
        <return>a string</return>
        <documentation-string>       
       The data type parameter's value.       </documentation-string>
      </function-definition>
      <function-definition id="cxml-types__fun__make-klacks-validation-context" name="make-klacks-validation-context" package="cxml-types">
        <lambda-list>
          <elt>source</elt>
        </lambda-list>
        <arguments>
          <arg arg="source">a <a a="http://common-lisp.net/project/cxml/klacks.html">     klacks source</a></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__klacks-validation-context">klacks-validation-context</see>
          </auto>
        </see-also>
        <return>a <class id="cxml-types__class__klacks-validation-context">klacks-validation-context</class></return>
        <documentation-string>   
   Create a validation-context that will query the given klacks source for   the current parser context.</documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__id-type" name="id-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__dtd-compatibility-type" name="dtd-compatibility-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__fun__parse">parse</see>
          </auto>
          <other>
            <see id="cxml-types__fun__xsd-id-type">xsd-id-type</see>
          </other>
        </see-also>
        <documentation-string><short>The DTD compatibility 'ID' type.</short><break/>    For this type, <fun id="cxml-types__fun__parse">parse</fun> will return the string with leading and
    trailing whitespace removed.<break/>
    The resulting value must be an NCName.<break/>
    The ID-type of this data type is 'ID', ensuring that each value is
    only used for one element in a document.<break/>    </documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__base64-binary-type" name="base64-binary-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The base64Binary data type.</short><break/>    <b>Syntax.</b> Normal Base64 syntax.    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#base64Binary">specification</a>.<break/>    <b>Implementation.</b> This type returns an <code>(unsigned-byte 8)</code>
    vector.<break/>    <b>Parameters.</b> This type allows restrictions on the length of the octet    vector through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>, <slot id="cxml-types__NIL__min-length">min-length</slot>, and    <slot id="cxml-types__NIL__max-length">max-length</slot>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__year-type" name="year-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="time-ordering-mixin" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__date-time-type">date-time-type</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The gYear data type, representing a calendar year.</short><break/>    <b>Syntax.</b> This type accepts an ISO-like syntax.  For details refer to    the <a a="http://www.w3.org/TR/xmlschema-2/#gYear">specification</a>.<break/>    <b>Implementation.</b> This type returns the same kind of lists as    <class id="cxml-types__class__date-time-type">date-time-type</class>, except that the fields <code>month</code>, <code>day</code>,    <code>hour</code>, <code>minute</code> and <code>second</code> are filled with dummy values
    from the Gregorian year AD 1.<break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.  The ordering is partial    except within a timezone, see the spec for details.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__patterns" name="patterns" package="cxml-types">
        <lambda-list>
          <elt>data-type</elt>
        </lambda-list>
        <arguments>
          <arg arg="data-type">a subtype of <class id="cxml-types__class__xsd-type">xsd-type</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__xsd-type">xsd-type</see>
          </auto>
        </see-also>
        <return>a list of strings</return>
        <documentation-string>    
    This slot reader returns a list of the type's    <a a="http://www.w3.org/TR/xmlschema-2/#rf-pattern">pattern facets</a>.</documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__integer-type" name="integer-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__non-negative-integer-type" name="non-negative-integer-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__long-type" name="long-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__non-positive-integer-type" name="non-positive-integer-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The integer data type, derived from decimal.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#integer">specification</a>.<break/>    <b>Syntax.</b> An integer, written it the decimal system without leading
    zeros.  No decimal point is permitted.<break/>    <b>Implementation.</b> This type returns an <code>integer</code>.<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__equal-using-type" name="equal-using-type" package="cxml-types">
        <lambda-list>
          <elt>type</elt>
          <elt>u</elt>
          <elt>v</elt>
        </lambda-list>
        <arguments>
          <arg arg="type">an instance of <class id="cxml-types__class__data-type">data-type</class></arg>
          <arg arg="u">a parsed value as returned by <fun id="cxml-types__fun__parse">parse</fun></arg>
          <arg arg="v">a parsed value as returned by <fun id="cxml-types__fun__parse">parse</fun></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__data-type">data-type</see>
            <see id="cxml-types__fun__parse">parse</see>
            <see id="cxml-types__fun__parse">parse</see>
          </auto>
          <other>
            <see id="cxml-types__fun__validp">validp</see>
          </other>
        </see-also>
        <return>a boolean</return>
        <documentation-string>                <short>Compare the <emph>values</emph> <code>u</code> and <code>v</code> using a      data-type-dependent equality function.</short><break/>    </documentation-string>
      </function-definition>
      <function-definition id="cxml-types__fun__parse" name="parse" package="cxml-types">
        <lambda-list>
          <elt>type</elt>
          <elt>e</elt>
          <elt>&amp;optional</elt>
          <elt>context</elt>
        </lambda-list>
        <arguments>
          <arg arg="type">an instance of <class id="cxml-types__class__data-type">data-type</class></arg>
          <arg arg="e">a string</arg>
          <arg arg="context">an instance of <class id="cxml-types__class__validation-context">validation-context</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__data-type">data-type</see>
            <see id="cxml-types__class__validation-context">validation-context</see>
            <see id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</see>
          </auto>
          <other>
            <see id="cxml-types__fun__equal-using-type">equal-using-type</see>
            <see id="cxml-types__fun__validp">validp</see>
          </other>
        </see-also>
        <return>an object</return>
        <documentation-string>                <short>Parse string <code>e</code> and return a representation of its value      as defined by the data type.</short><break/>    The <code>context</code> argument is required if <fun id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</fun>    is true for <code>type</code>, and will be ignored otherwise.<break/>        </documentation-string>
      </function-definition>
      <function-definition id="cxml-types__fun__validp" name="validp" package="cxml-types">
        <lambda-list>
          <elt>type</elt>
          <elt>e</elt>
          <elt>&amp;optional</elt>
          <elt>context</elt>
        </lambda-list>
        <arguments>
          <arg arg="type">an instance of <class id="cxml-types__class__data-type">data-type</class></arg>
          <arg arg="e">a string</arg>
          <arg arg="context">an instance of <class id="cxml-types__class__validation-context">validation-context</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__data-type">data-type</see>
            <see id="cxml-types__class__validation-context">validation-context</see>
            <see id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</see>
          </auto>
          <other>
            <see id="cxml-types__fun__parse">parse</see>
            <see id="cxml-types__fun__equal-using-type">equal-using-type</see>
          </other>
        </see-also>
        <return>a boolean</return>
        <documentation-string>                <short>Determine whether a string is a valid lexical representation    for a type.</short><break/>    The <code>context</code> argument is required if <fun id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</fun>    is true for <code>type</code>, and will be ignored otherwise.<break/>        </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__data-type" name="data-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__dtd-compatibility-type" name="dtd-compatibility-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__rng-type" name="rng-type" package="cxml-types"/>
        </subclasses>
        <see-also>
          <other>
            <see id="cxml-types__fun__parse">parse</see>
            <see id="cxml-types__fun__equal-using-type">equal-using-type</see>
            <see id="cxml-types__fun__lessp-using-type">lessp-using-type</see>
            <see id="cxml-types__fun__validp">validp</see>
          </other>
          <slot>
            <see id="cxml-types__fun__type-name">type-name</see>
            <see id="cxml-types__fun__type-library">type-library</see>
            <see id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</see>
            <see id="cxml-types__fun__type-id-type">type-id-type</see>
          </slot>
          <constructor>
            <see id="cxml-types__fun__find-type">find-type</see>
          </constructor>
        </see-also>
        <documentation-string><short>The abstract superclass of all types.</short><break/>
    Each type belongs to a datatype library, named by a keyword.  In each
    library, the types are named by strings.<break/>                                    </documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__unsigned-byte-type" name="unsigned-byte-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__unsigned-short-type" name="unsigned-short-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__unsigned-int-type" name="unsigned-int-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__unsigned-long-type" name="unsigned-long-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__non-negative-integer-type" name="non-negative-integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <documentation-string><short>The unsignedByte data type, derived from unsignedInt.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#unsignedByte">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values from the interval
    [0, 255].<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__notation-type" name="notation-type" package="cxml-types">
        <cpl>
          <superclass status="INTERNAL" name="qname-like" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__qname-type">qname-type</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The NOTATION data type.</short><break/>    <b>Syntax.</b> A qualified name.    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#NOTATION">specification</a>.<break/>    <b>Implementation.</b> This type is treated exactly like    <class id="cxml-types__class__qname-type">qname-type</class>, as specified in    <a a="http://relaxng.org/xsd-20010907.html">Guidelines for using W3C XML    Schema Datatypes with RELAX NG</a>.<break/>    <b>Parameters.</b> This type allows restrictions on the length of the    original QName through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>,    <slot id="cxml-types__NIL__min-length">min-length</slot>, and <slot id="cxml-types__NIL__max-length">max-length</slot>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__xsd-id-type" name="xsd-id-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__ncname-type" name="ncname-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__name-type" name="name-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-token-type" name="xsd-token-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__normalized-string-type" name="normalized-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__xsd-idref-type" name="xsd-idref-type" package="cxml-types"/>
        </subclasses>
        <see-also>
          <other>
            <see id="cxml-types__fun__id-type">id-type</see>
          </other>
        </see-also>
        <documentation-string><short>The ID data type, derived from NCName.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#ID">specification</a>.<break/>    <b>Restrictions.</b> None.<break/>    <b>ID type.</b> This type has the ID-type 'ID'for the purposes of DTD    compatibility. See <a a="http://relaxng.org/xsd-20010907.html">Guidelines    for using W3C XML Schema Datatypes with RELAX NG</a>.<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.<break/>    </documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__long-type" name="long-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__int-type" name="int-type" package="cxml-types"/>
        </subclasses>
        <documentation-string><short>The long data type, derived from integer.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#long">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values from the interval
    [-2^63, 2^63-1].<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__month-type" name="month-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="time-ordering-mixin" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__date-time-type">date-time-type</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The gMonth data type, representing a calendar month.</short><break/>    <b>Syntax.</b> This type accepts an ISO-like syntax.  For details refer to    the <a a="http://www.w3.org/TR/xmlschema-2/#gMonth">specification</a>.<break/>    <b>Implementation.</b> This type returns the same kind of lists as    <class id="cxml-types__class__date-time-type">date-time-type</class>, except that the fields <code>year</code>, <code>day</code>,    <code>hour</code>, <code>minute</code> and <code>second</code> are filled with dummy values
    from the Gregorian year AD 1.<break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.  The ordering is partial    except within a timezone, see the spec for details.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__entity-type" name="entity-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__ncname-type" name="ncname-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__name-type" name="name-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-token-type" name="xsd-token-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__normalized-string-type" name="normalized-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__ncname-type">ncname-type</see>
            <see id="cxml-types__fun__parse">parse</see>
            <see id="cxml-types__fun__validp">validp</see>
          </auto>
        </see-also>
        <documentation-string><short>The ENTITY data type, derived from NCName.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#ENTITY">specification</a>.<break/>    <b>Restrictions.</b> This type restricts its supertype <class id="cxml-types__class__ncname-type">ncname-type</class>
    to names that have been declared as unparsed entities in the context.<break/>    <b>Context dependent.</b> This type is context dependent and requires    the <code>context</code> argument to <fun id="cxml-types__fun__parse">parse</fun> and <fun id="cxml-types__fun__validp">validp</fun>.<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__min-inclusive" name="min-inclusive" package="cxml-types">
        <lambda-list>
          <elt>data-type</elt>
        </lambda-list>
        <arguments>
          <arg arg="data-type">an ordered data type</arg>
        </arguments>
        <see-also>
          <other>
            <see id="cxml-types__fun__min-exclusive">min-exclusive</see>
            <see id="cxml-types__fun__max-exclusive">max-exclusive</see>
            <see id="cxml-types__fun__max-inclusive">max-inclusive</see>
          </other>
        </see-also>
        <return>an integer, or <code>nil</code></return>
        <documentation-string>    
    This slot reader returns the type's    <a a="http://www.w3.org/TR/xmlschema-2/#rf-minInclusive">minInclusive facet</a>,    or <code>nil</code> if none was specified.            </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__language-type" name="language-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-token-type" name="xsd-token-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__normalized-string-type" name="normalized-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__token-type">token-type</see>
          </auto>
        </see-also>
        <documentation-string><short>The language data type, derived from token.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#language">specification</a>.<break/>    <b>Restrictions.</b> This type restricts its supertype <class id="cxml-types__class__token-type">token-type</class>
    to strings of the pattern "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*".<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__double-type" name="double-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The double data type.</short><break/>    <b>Syntax.</b> A floating-point number in a "scientific notation".    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#double">specification</a>.<break/>    <b>Implementation.</b> This type returns a <code>double-float</code> or, on
    implementations where Infinity and Nan cannot be represented as such,
    a special symbol that is treated as if it was Infinity or NaN by the
    built-in ordering.<break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__total-digits" name="total-digits" package="cxml-types">
        <lambda-list>
          <elt>data-type</elt>
        </lambda-list>
        <arguments>
          <arg arg="data-type">a subtype of <class id="cxml-types__class__decimal-type">decimal-type</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__decimal-type">decimal-type</see>
          </auto>
          <other>
            <see id="cxml-types__fun__fraction-digits">fraction-digits</see>
          </other>
        </see-also>
        <return>an integer, or <code>nil</code></return>
        <documentation-string>    
    This slot reader returns the type's    <a a="http://www.w3.org/TR/xmlschema-2/#rf-totalDigits">totalDigits facet</a>,    or <code>nil</code> if none was specified.    </documentation-string>
      </function-definition>
      <function-definition id="cxml-types__fun__type-name" name="type-name" package="cxml-types">
        <lambda-list>
          <elt>type</elt>
        </lambda-list>
        <arguments>
          <arg arg="type">an instance of <class id="cxml-types__class__data-type">data-type</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__data-type">data-type</see>
          </auto>
          <other>
            <see id="cxml-types__fun__type-library">type-library</see>
            <see id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</see>
            <see id="cxml-types__fun__type-id-type">type-id-type</see>
          </other>
        </see-also>
        <return>type name, a string</return>
        <documentation-string>        <short>Return the name this type has within its library.</short><break/>            </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
        </subclasses>
        <see-also>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
            <see id="cxml-types__NIL__fraction-digits">fraction-digits</see>
            <see id="cxml-types__NIL__total-digits">total-digits</see>
          </slot>
        </see-also>
        <documentation-string><short>The decimal data type.</short><break/>    <b>Syntax.</b> A rational number, written using an optional decimal point
    and decimal places.    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#decimal">specification</a>.<break/>    <b>Implementation.</b> This type returns a <code>rational</code>.<break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.<break/>    In addition, the facets <slot id="cxml-types__NIL__fraction-digits">fraction-digits</slot> <slot id="cxml-types__NIL__total-digits">total-digits</slot>    are recognized.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__positive-integer-type" name="positive-integer-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__non-negative-integer-type" name="non-negative-integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__integer-type" name="integer-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__decimal-type" name="decimal-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <documentation-string><short>The positiveInteger data type, derived from nonNegativeInteger.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#positiveInteger">specification</a>.<break/>    <b>Restrictions.</b> This type allows only values &gt; 0.<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__xsd-token-type" name="xsd-token-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__normalized-string-type" name="normalized-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__nmtoken-type" name="nmtoken-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__name-type" name="name-type" package="cxml-types"/>
          <subclass status="EXTERNAL" id="cxml-types__class__language-type" name="language-type" package="cxml-types"/>
        </subclasses>
        <see-also>
          <auto>
            <see id="cxml-types__class__string-type">string-type</see>
            <see id="cxml-types__class__normalized-string-type">normalized-string-type</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The token data type, derived from normalizedString.</short><break/>    <b>Syntax.</b> An arbitrary string.    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#token">specification</a>.<break/>    <b>Implementation.</b> Returns the string with normalized whitespace.<break/>
    I.e., each whitespace character is replaced by a space
    (character code 32), multiple spaces are collapsed into one character,
    and leading and trailing spaces will be removed.<break/>
    (This is the standard behaviour of all XSD types with the exception of    token's supertypes <class id="cxml-types__class__string-type">string-type</class> and <class id="cxml-types__class__normalized-string-type">normalized-string-type</class>.)<break/>    <b>Parameters.</b> This type allows restrictions on the length of the    normalized string through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>,    <slot id="cxml-types__NIL__min-length">min-length</slot>, and <slot id="cxml-types__NIL__max-length">max-length</slot>.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__type-id-type" name="type-id-type" package="cxml-types">
        <lambda-list>
          <elt>type</elt>
        </lambda-list>
        <arguments>
          <arg arg="type">an instance of <class id="cxml-types__class__data-type">data-type</class></arg>
        </arguments>
        <see-also>
          <auto>
            <see id="cxml-types__class__data-type">data-type</see>
          </auto>
          <other>
            <see id="cxml-types__fun__type-name">type-name</see>
            <see id="cxml-types__fun__type-library">type-library</see>
            <see id="cxml-types__fun__type-context-dependent-p">type-context-dependent-p</see>
          </other>
        </see-also>
        <return>one of <code>nil</code>, <code>:id</code>, <code>:idref</code>, or <code>:idrefs</code></return>
        <documentation-string>        <short>Returns the <em>ID-type</em> of <code>type</code>.</short><break/>    The symbols <code>nil</code>, <code>:id</code>, <code>:idref</code>, or <code>:idrefs</code>    represent the ID-types <em>null</em>, <em>ID</em>,  <em>IDREF</em>, and <em>IDREFS</em>,
    respectively, as defined by    <a a="http://relaxng.org/compatibility-20011203.html">      RELAX NG DTD Compatibility</a>.<break/>            </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__entities-type" name="entities-type" package="cxml-types">
        <cpl>
          <superclass status="INTERNAL" name="enumeration-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__entity-type">entity-type</see>
            <see id="cxml-types__class__entity-type">entity-type</see>
            <see id="cxml-types__fun__parse">parse</see>
            <see id="cxml-types__fun__validp">validp</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The ENTITIES data type, an enumeration.</short><break/>    <b>Syntax.</b> A whitespace-separated sequence of <class id="cxml-types__class__entity-type">entity-type</class>
    values, with at least one element.<break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#ENTITIES">specification</a>.<break/>    <b>Implementation.</b> This type returns a list of the values as returned by    <class id="cxml-types__class__entity-type">entity-type</class>.<break/>    <b>Context dependent.</b> This type is context dependent and requires    the <code>context</code> argument to <fun id="cxml-types__fun__parse">parse</fun> and <fun id="cxml-types__fun__validp">validp</fun>.<break/>    <b>Parameters.</b> This type allows restrictions on the number of values    through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>, <slot id="cxml-types__NIL__min-length">min-length</slot>, and    <slot id="cxml-types__NIL__max-length">max-length</slot>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__month-day-type" name="month-day-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="time-ordering-mixin" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__date-time-type">date-time-type</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The gMonthDay data type, representing a calendar month and day.</short><break/>    <b>Syntax.</b> This type accepts an ISO-like syntax.  For details refer to    the <a a="http://www.w3.org/TR/xmlschema-2/#monthDay">specification</a>.<break/>    <b>Implementation.</b> This type returns the same kind of lists as    <class id="cxml-types__class__date-time-type">date-time-type</class>, except that the fields <code>year</code>,    <code>hour</code>, <code>minute</code> and <code>second</code> are filled with dummy values
    from the Gregorian year AD 1.<break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.  The ordering is partial    except within a timezone, see the spec for details.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__nmtokens-type" name="nmtokens-type" package="cxml-types">
        <cpl>
          <superclass status="INTERNAL" name="enumeration-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__class__nmtoken-type">nmtoken-type</see>
            <see id="cxml-types__class__nmtoken-type">nmtoken-type</see>
          </auto>
          <slot>
            <see id="cxml-types__NIL__exact-length">exact-length</see>
            <see id="cxml-types__NIL__min-length">min-length</see>
            <see id="cxml-types__NIL__max-length">max-length</see>
          </slot>
        </see-also>
        <documentation-string><short>The NMTOKENS data type, an enumeration.</short><break/>    <b>Syntax.</b> A whitespace-separated sequence of <class id="cxml-types__class__nmtoken-type">nmtoken-type</class>
    values, with at least one element.<break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#NMTOKENS">specification</a>.<break/>    <b>Implementation.</b> This type returns a list of the values as returned by    <class id="cxml-types__class__nmtoken-type">nmtoken-type</class>.<break/>    <b>Parameters.</b> This type allows restrictions on the number of values    through the parameters <slot id="cxml-types__NIL__exact-length">exact-length</slot>, <slot id="cxml-types__NIL__min-length">min-length</slot>, and    <slot id="cxml-types__NIL__max-length">max-length</slot>.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__token-type" name="token-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__rng-type" name="rng-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <auto>
            <see id="cxml-types__fun__parse">parse</see>
            <see id="cxml-types__fun__equal-using-type">equal-using-type</see>
          </auto>
        </see-also>
        <documentation-string><short>The Relax NG 'token' type.</short>
    This data type allows arbitrary strings and normalizes all whitespaces.<break/>    For this type, <fun id="cxml-types__fun__parse">parse</fun> will return the string with leading and
    trailing whitespace removed, and remaining sequences of spaces
    compressed down to one space character each.<break/>    A method for <fun id="cxml-types__fun__equal-using-type">equal-using-type</fun> compares strings using <code>equal</code>.</documentation-string>
      </class-definition>
      <function-definition id="cxml-types__fun__max-exclusive" name="max-exclusive" package="cxml-types">
        <lambda-list>
          <elt>data-type</elt>
        </lambda-list>
        <arguments>
          <arg arg="data-type">an ordered data type</arg>
        </arguments>
        <see-also>
          <other>
            <see id="cxml-types__fun__min-exclusive">min-exclusive</see>
            <see id="cxml-types__fun__min-inclusive">min-inclusive</see>
            <see id="cxml-types__fun__max-inclusive">max-inclusive</see>
          </other>
        </see-also>
        <return>an integer, or <code>nil</code></return>
        <documentation-string>    
    This slot reader returns the type's    <a a="http://www.w3.org/TR/xmlschema-2/#rf-maxExclusive">maxExclusive facet</a>,    or <code>nil</code> if none was specified.            </documentation-string>
      </function-definition>
      <class-definition id="cxml-types__class__name-type" name="name-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-token-type" name="xsd-token-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__normalized-string-type" name="normalized-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-string-type" name="xsd-string-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="length-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses>
          <subclass status="EXTERNAL" id="cxml-types__class__ncname-type" name="ncname-type" package="cxml-types"/>
        </subclasses>
        <see-also>
          <auto>
            <see id="cxml-types__class__token-type">token-type</see>
          </auto>
        </see-also>
        <documentation-string><short>The Name data type, derived from token.</short><break/>    C.f. the <a a="http://www.w3.org/TR/xmlschema-2/#Name">specification</a>.<break/>    <b>Restrictions.</b> This type restricts its supertype <class id="cxml-types__class__token-type">token-type</class>
    to strings of the pattern "\i\c*".<break/>    <b>Parameters and implementation.</b> Unchanged from the supertype.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__sax-validation-context-mixin" name="sax-validation-context-mixin" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__validation-context" name="validation-context" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <documentation-string><short>A class that implements validation-context as a mixin for     user-defined SAX handler classes.</short><break/>
    The mixin will record namespace information
    automatically, and the user's SAX handler can simply be passed as a    validation context to data type functions.</documentation-string>
      </class-definition>
      <class-definition id="cxml-types__class__duration-type" name="duration-type" package="cxml-types">
        <cpl>
          <superclass status="EXTERNAL" id="cxml-types__class__xsd-type" name="xsd-type" package="cxml-types"/>
          <superclass status="EXTERNAL" id="cxml-types__class__data-type" name="data-type" package="cxml-types"/>
          <superclass status="INTERNAL" name="ordering-mixin" package="cxml-types"/>
          <superclass status="EXTERNAL" name="standard-object" package="common-lisp"/>
          <superclass status="INTERNAL" name="slot-object" package="sb-pcl"/>
          <superclass status="EXTERNAL" name="t" package="common-lisp"/>
        </cpl>
        <subclasses/>
        <see-also>
          <slot>
            <see id="cxml-types__NIL__max-inclusive">max-inclusive</see>
            <see id="cxml-types__NIL__min-inclusive">min-inclusive</see>
            <see id="cxml-types__NIL__max-exclusive">max-exclusive</see>
            <see id="cxml-types__NIL__min-exclusive">min-exclusive</see>
          </slot>
        </see-also>
        <documentation-string><short>The duration data type, representing a duration of time.</short><break/>    <b>Syntax.</b> This type accepts an ISO-like syntax.  For details refer to    the <a a="http://www.w3.org/TR/xmlschema-2/#duration">specification</a>.<break/>    <b>Implementation.</b> This type returns lists of the form    <code>(years months days hours minutes seconds)</code>.  Each    value can be <code>nil</code> or a number.  All values are integers    except for <code>seconds</code>, which is a real.<break/>    <b>Example.</b> <code>P1Y2M3DT10H30M</code>    maps to <code>(1 2 3 10 30 nil)</code><break/>    <b>Parameters.</b> This type is ordered and allows the parameters    <slot id="cxml-types__NIL__max-inclusive">max-inclusive</slot>, <slot id="cxml-types__NIL__min-inclusive">min-inclusive</slot>,    <slot id="cxml-types__NIL__max-exclusive">max-exclusive</slot>, and <slot id="cxml-types__NIL__min-exclusive">min-exclusive</slot>.</documentation-string>
      </class-definition>
    </symbols>
  </package>
</documentation>
